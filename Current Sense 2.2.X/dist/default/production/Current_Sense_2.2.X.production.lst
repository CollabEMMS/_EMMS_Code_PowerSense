

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Apr 02 11:51:13 2020

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F25K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1
    57                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=1
    60                           	psect	text47,global,reloc=2,class=CODE,delta=1
    61                           	psect	text48,global,reloc=2,class=CODE,delta=1
    62                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=1
    65                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text53,global,reloc=2,class=CODE,delta=1
    67                           	psect	text54,global,reloc=2,class=CODE,delta=1
    68                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=1
    71                           	psect	text58,global,reloc=2,class=CODE,delta=1
    72                           	psect	text59,global,reloc=2,class=CODE,delta=1,group=1
    73                           	psect	text60,global,reloc=2,class=CODE,delta=1
    74                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    75                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    76                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    77                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    78  0000                     
    79                           ; Version 1.45
    80                           ; Generated 16/11/2017 GMT
    81                           ; 
    82                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    83                           ; All rights reserved.
    84                           ; 
    85                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    86                           ; 
    87                           ; Redistribution and use in source and binary forms, with or without modification, are
    88                           ; permitted provided that the following conditions are met:
    89                           ; 
    90                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    91                           ;        conditions and the following disclaimer.
    92                           ; 
    93                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    94                           ;        of conditions and the following disclaimer in the documentation and/or other
    95                           ;        materials provided with the distribution.
    96                           ; 
    97                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    98                           ;        software without specific prior written permission.
    99                           ; 
   100                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   101                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   102                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   103                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   104                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   105                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   106                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   107                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   108                           ; 
   109                           ; 
   110                           ; Code-generator required, PIC18F25K22 Definitions
   111                           ; 
   112                           ; SFR Addresses
   113  0000                     _ANSELC	set	3898
   114  0000                     _ANSELB	set	3897
   115  0000                     _ANSELA	set	3896
   116  0000                     _ANSELBbits	set	3897
   117  0000                     _ANSELAbits	set	3896
   118  0000                     _TMR0L	set	4054
   119  0000                     _TMR0H	set	4055
   120  0000                     _INTCONbits	set	4082
   121  0000                     _T0CONbits	set	4053
   122  0000                     _PORTAbits	set	3968
   123  0000                     _IPR5	set	3967
   124  0000                     _IPR4	set	3964
   125  0000                     _IPR3	set	4005
   126  0000                     _IPR2	set	4002
   127  0000                     _IPR1	set	3999
   128  0000                     _PIE5	set	3965
   129  0000                     _PIE4	set	3962
   130  0000                     _PIE3	set	4003
   131  0000                     _PIE2	set	4000
   132  0000                     _PIE1	set	3997
   133  0000                     _PIR5	set	3966
   134  0000                     _PIR4	set	3963
   135  0000                     _PIR3	set	4004
   136  0000                     _PIR2	set	4001
   137  0000                     _PIR1	set	3998
   138  0000                     _RCONbits	set	4048
   139  0000                     _INTCON3	set	4080
   140  0000                     _INTCON2	set	4081
   141  0000                     _INTCON	set	4082
   142  0000                     _ADCON0bits	set	4034
   143  0000                     _OSCTUNEbits	set	3995
   144  0000                     _OSCCON2bits	set	4050
   145  0000                     _OSCCONbits	set	4051
   146  0000                     _SSP2CON3bits	set	3945
   147  0000                     _SSP2CON3	set	3945
   148  0000                     _TRISAbits	set	3986
   149  0000                     _SSP2BUF	set	3951
   150  0000                     _SSP2STATbits	set	3949
   151  0000                     _SSP2CON1bits	set	3948
   152  0000                     _PORTCbits	set	3970
   153  0000                     _PORTBbits	set	3969
   154  0000                     _LATCbits	set	3979
   155  0000                     _LATBbits	set	3978
   156  0000                     _TRISCbits	set	3988
   157  0000                     _TRISBbits	set	3987
   158                           
   159                           	psect	smallconst
   160  000600                     __psmallconst:
   161                           	opt stack 0
   162  000600  00                 	db	0
   163  000601                     STR_3:
   164                           
   165                           ; BSR set to: 0
   166  000601  43                 	db	67	;'C'
   167  000602  61                 	db	97	;'a'
   168  000603  6C                 	db	108	;'l'
   169  000604  69                 	db	105	;'i'
   170  000605  62                 	db	98	;'b'
   171  000606  72                 	db	114	;'r'
   172  000607  61                 	db	97	;'a'
   173  000608  74                 	db	116	;'t'
   174  000609  69                 	db	105	;'i'
   175  00060A  6F                 	db	111	;'o'
   176  00060B  6E                 	db	110	;'n'
   177  00060C  00                 	db	0
   178  00060D                     STR_11:
   179                           
   180                           ; BSR set to: 0
   181  00060D  50                 	db	80	;'P'
   182  00060E  53                 	db	83	;'S'
   183  00060F  56                 	db	86	;'V'
   184  000610  65                 	db	101	;'e'
   185  000611  72                 	db	114	;'r'
   186  000612  73                 	db	115	;'s'
   187  000613  69                 	db	105	;'i'
   188  000614  6F                 	db	111	;'o'
   189  000615  6E                 	db	110	;'n'
   190  000616  00                 	db	0
   191  000617                     STR_4:
   192                           
   193                           ; BSR set to: 0
   194  000617  45                 	db	69	;'E'
   195  000618  6E                 	db	110	;'n'
   196  000619  55                 	db	85	;'U'
   197  00061A  73                 	db	115	;'s'
   198  00061B  65                 	db	101	;'e'
   199  00061C  64                 	db	100	;'d'
   200  00061D  00                 	db	0
   201  00061E                     STR_9:
   202                           
   203                           ; BSR set to: 0
   204  00061E  56                 	db	86	;'V'
   205  00061F  6F                 	db	111	;'o'
   206  000620  6C                 	db	108	;'l'
   207  000621  74                 	db	116	;'t'
   208  000622  73                 	db	115	;'s'
   209  000623  00                 	db	0
   210  000624                     STR_7:
   211                           
   212                           ; BSR set to: 0
   213  000624  57                 	db	87	;'W'
   214  000625  61                 	db	97	;'a'
   215  000626  74                 	db	116	;'t'
   216  000627  74                 	db	116	;'t'
   217  000628  73                 	db	115	;'s'
   218  000629  00                 	db	0
   219  00062A                     
   220                           ; BSR set to: 0
   221  00062A  4C                 	db	76	;'L'
   222  00062B  45                 	db	69	;'E'
   223  00062C  44                 	db	68	;'D'
   224  00062D  42                 	db	66	;'B'
   225  00062E  00                 	db	0
   226  00062F                     STR_5:
   227                           
   228                           ; BSR set to: 0
   229  00062F  52                 	db	82	;'R'
   230  000630  65                 	db	101	;'e'
   231  000631  61                 	db	97	;'a'
   232  000632  64                 	db	100	;'d'
   233  000633  00                 	db	0
   234  000634                     STR_6:
   235                           
   236                           ; BSR set to: 0
   237  000634  43                 	db	67	;'C'
   238  000635  6F                 	db	111	;'o'
   239  000636  6E                 	db	110	;'n'
   240  000637  66                 	db	102	;'f'
   241  000638  00                 	db	0
   242  000639                     STR_10:
   243                           
   244                           ; BSR set to: 0
   245  000639  41                 	db	65	;'A'
   246  00063A  6D                 	db	109	;'m'
   247  00063B  70                 	db	112	;'p'
   248  00063C  73                 	db	115	;'s'
   249  00063D  00                 	db	0
   250  00063E                     
   251                           ; BSR set to: 0
   252  00063E  32                 	db	50	;'2'
   253  00063F  32                 	db	50	;'2'
   254  000640  32                 	db	50	;'2'
   255  000641  00                 	db	0
   256  000642                     
   257                           ; BSR set to: 0
   258  000642  33                 	db	51	;'3'
   259  000643  33                 	db	51	;'3'
   260  000644  33                 	db	51	;'3'
   261  000645  00                 	db	0
   262  000646                     STR_29:
   263                           
   264                           ; BSR set to: 0
   265  000646  34                 	db	52	;'4'
   266  000647  34                 	db	52	;'4'
   267  000648  34                 	db	52	;'4'
   268  000649  00                 	db	0
   269  00064A                     STR_1:
   270                           
   271                           ; BSR set to: 0
   272  00064A  45                 	db	69	;'E'
   273  00064B  4E                 	db	78	;'N'
   274  00064C  44                 	db	68	;'D'
   275  00064D  00                 	db	0
   276  00064E                     STR_2:
   277                           
   278                           ; BSR set to: 0
   279  00064E  53                 	db	83	;'S'
   280  00064F  65                 	db	101	;'e'
   281  000650  74                 	db	116	;'t'
   282  000651  00                 	db	0
   283  0000                     
   284                           ; #config settings
   285  000652  00                 	db	0	; dummy byte at the end
   286  0000                     
   287                           	psect	cinit
   288  001EF4                     __pcinit:
   289                           	opt stack 0
   290  001EF4                     start_initialization:
   291                           	opt stack 0
   292  001EF4                     __initialization:
   293                           	opt stack 0
   294                           
   295                           ; Clear objects allocated to BANK1 (84 bytes)
   296  001EF4  EE01  F000         	lfsr	0,__pbssBANK1
   297  001EF8  0E54               	movlw	84
   298  001EFA                     clear_0:
   299  001EFA  6AEE               	clrf	postinc0,c
   300  001EFC  06E8               	decf	wreg,f,c
   301  001EFE  E1FD               	bnz	clear_0
   302                           
   303                           ; Clear objects allocated to BANK0 (32 bytes)
   304  001F00  EE00  F0E0         	lfsr	0,__pbssBANK0
   305  001F04  0E20               	movlw	32
   306  001F06                     clear_1:
   307  001F06  6AEE               	clrf	postinc0,c
   308  001F08  06E8               	decf	wreg,f,c
   309  001F0A  E1FD               	bnz	clear_1
   310                           
   311                           ; Clear objects allocated to COMRAM (16 bytes)
   312  001F0C  EE00  F03D         	lfsr	0,__pbssCOMRAM
   313  001F10  0E10               	movlw	16
   314  001F12                     clear_2:
   315  001F12  6AEE               	clrf	postinc0,c
   316  001F14  06E8               	decf	wreg,f,c
   317  001F16  E1FD               	bnz	clear_2
   318  001F18                     end_of_initialization:
   319                           	opt stack 0
   320  001F18                     __end_of__initialization:
   321                           	opt stack 0
   322  001F18  904D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   323  001F1A  924D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   324  001F1C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   325  001F1E  6EF8               	movwf	tblptru,c
   326  001F20  0100               	movlb	0
   327  001F22  EF1B  F007         	goto	_main	;jump to C main() function
   328                           tblptru	equ	0xFF8
   329                           postinc0	equ	0xFEE
   330                           wreg	equ	0xFE8
   331                           
   332                           	psect	bssCOMRAM
   333  00003D                     __pbssCOMRAM:
   334                           	opt stack 0
   335  00003D                     _meterEnergyUsed_global:
   336                           	opt stack 0
   337  00003D                     	ds	4
   338  000041                     	ds	2
   339  000043                     mcpUpdatePower@meterWattsLF:
   340                           	opt stack 0
   341  000043                     	ds	2
   342  000045                     mcpUpdatePower@meterWattsHF:
   343                           	opt stack 0
   344  000045                     	ds	2
   345  000047                     resetCommunications@commState:
   346                           	opt stack 0
   347  000047                     	ds	2
   348  000049                     mcpUpdatePower@oneShotLFout:
   349                           	opt stack 0
   350  000049                     	ds	1
   351  00004A                     mcpUpdatePower@oneShotHFout:
   352                           	opt stack 0
   353  00004A                     	ds	1
   354  00004B                     receive_data@my_status:
   355                           	opt stack 0
   356  00004B                     	ds	1
   357  00004C                     _SPI_transmit_wait:
   358                           	opt stack 0
   359  00004C                     	ds	1
   360                           tblptru	equ	0xFF8
   361                           postinc0	equ	0xFEE
   362                           wreg	equ	0xFE8
   363                           
   364                           	psect	bssBANK0
   365  0000E0                     __pbssBANK0:
   366                           	opt stack 0
   367  0000E0                     _timerCount_ms:
   368                           	opt stack 0
   369  0000E0                     	ds	16
   370  0000F0                     mcpUpdatePower@timerHFoutLast_ms:
   371                           	opt stack 0
   372  0000F0                     	ds	4
   373  0000F4                     _meterEnergyUsedPart:
   374                           	opt stack 0
   375  0000F4                     	ds	4
   376  0000F8                     _meterWatts_global:
   377                           	opt stack 0
   378  0000F8                     	ds	4
   379  0000FC                     main@oneShot:
   380                           	opt stack 0
   381  0000FC                     	ds	1
   382  0000FD                     communications@last_state_active:
   383                           	opt stack 0
   384  0000FD                     	ds	1
   385  0000FE                     communications@receive_current_state:
   386                           	opt stack 0
   387  0000FE                     	ds	1
   388  0000FF                     communications@end_of_transmission_received:
   389                           	opt stack 0
   390  0000FF                     	ds	1
   391                           tblptru	equ	0xFF8
   392                           postinc0	equ	0xFEE
   393                           wreg	equ	0xFE8
   394                           
   395                           	psect	bssBANK1
   396  000100                     __pbssBANK1:
   397                           	opt stack 0
   398  000100                     communications@send_buffer:
   399                           	opt stack 0
   400  000100                     	ds	42
   401  00012A                     communications@receive_buffer:
   402                           	opt stack 0
   403  00012A                     	ds	42
   404                           tblptru	equ	0xFF8
   405                           postinc0	equ	0xFEE
   406                           wreg	equ	0xFE8
   407                           
   408                           	psect	cstackBANK1
   409  000154                     __pcstackBANK1:
   410                           	opt stack 0
   411  000154                     communications@no_more_to_send:
   412                           	opt stack 0
   413                           
   414                           ; 1 bytes @ 0x0
   415  000154                     	ds	1
   416  000155                     communications@firstTime:
   417                           	opt stack 0
   418                           
   419                           ; 1 bytes @ 0x1
   420  000155                     	ds	1
   421  000156                     main@timerHeartbeat:
   422                           	opt stack 0
   423                           
   424                           ; 4 bytes @ 0x2
   425  000156                     	ds	4
   426  00015A                     main@inx:
   427                           	opt stack 0
   428                           
   429                           ; 2 bytes @ 0x6
   430  00015A                     	ds	2
   431                           tblptru	equ	0xFF8
   432                           postinc0	equ	0xFEE
   433                           wreg	equ	0xFE8
   434                           
   435                           	psect	cstackBANK0
   436  000060                     __pcstackBANK0:
   437                           	opt stack 0
   438  000060                     xsum_builder@xsumBuf:
   439                           	opt stack 0
   440  000060                     xSumMatches@buffer_to_chk:
   441                           	opt stack 0
   442                           
   443                           ; 42 bytes @ 0x0
   444  000060                     	ds	16
   445  000070                     com_command_setPower@temp:
   446                           	opt stack 0
   447  000070                     com_command_setEnergyUsed@temp:
   448                           	opt stack 0
   449                           
   450                           ; 12 bytes @ 0x10
   451  000070                     	ds	12
   452  00007C                     ??_resetCommunications:
   453  00007C                     process_data_parameters@parameters:
   454                           	opt stack 0
   455                           
   456                           ; 2 bytes @ 0x1C
   457  00007C                     	ds	2
   458  00007E                     process_data_parameters@send_buffer:
   459                           	opt stack 0
   460                           
   461                           ; 2 bytes @ 0x1E
   462  00007E                     	ds	12
   463  00008A                     xSumMatches@recXsumbuf:
   464                           	opt stack 0
   465                           
   466                           ; 16 bytes @ 0x2A
   467  00008A                     	ds	16
   468  00009A                     xSumMatches@xsum:
   469                           	opt stack 0
   470                           
   471                           ; 2 bytes @ 0x3A
   472  00009A                     	ds	2
   473  00009C                     xSumMatches@recXsum:
   474                           	opt stack 0
   475                           
   476                           ; 2 bytes @ 0x3C
   477  00009C                     	ds	2
   478  00009E                     xSumMatches@xsumRecieving:
   479                           	opt stack 0
   480                           
   481                           ; 1 bytes @ 0x3E
   482  00009E                     	ds	1
   483  00009F                     xSumMatches@matches:
   484                           	opt stack 0
   485                           
   486                           ; 1 bytes @ 0x3F
   487  00009F                     	ds	1
   488  0000A0                     xSumMatches@recXsumPointer:
   489                           	opt stack 0
   490                           
   491                           ; 2 bytes @ 0x40
   492  0000A0                     	ds	2
   493  0000A2                     xSumMatches@data:
   494                           	opt stack 0
   495                           
   496                           ; 2 bytes @ 0x42
   497  0000A2                     	ds	2
   498  0000A4                     xSumMatches@currentData:
   499                           	opt stack 0
   500                           
   501                           ; 1 bytes @ 0x44
   502  0000A4                     	ds	1
   503  0000A5                     xSumMatches@i:
   504                           	opt stack 0
   505                           
   506                           ; 2 bytes @ 0x45
   507  0000A5                     	ds	2
   508  0000A7                     process_data@receive_buffer:
   509                           	opt stack 0
   510                           
   511                           ; 2 bytes @ 0x47
   512  0000A7                     	ds	2
   513  0000A9                     process_data@send_buffer:
   514                           	opt stack 0
   515                           
   516                           ; 2 bytes @ 0x49
   517  0000A9                     	ds	2
   518  0000AB                     process_data@xSumMatches:
   519                           	opt stack 0
   520                           
   521                           ; 1 bytes @ 0x4B
   522  0000AB                     	ds	1
   523  0000AC                     process_data@parameters:
   524                           	opt stack 0
   525                           
   526                           ; 50 bytes @ 0x4C
   527  0000AC                     	ds	50
   528  0000DE                     process_data@end_of_transmission_received:
   529                           	opt stack 0
   530                           
   531                           ; 1 bytes @ 0x7E
   532  0000DE                     	ds	1
   533  0000DF                     ??_main:
   534                           
   535                           ; 1 bytes @ 0x7F
   536  0000DF                     	ds	1
   537                           tblptru	equ	0xFF8
   538                           postinc0	equ	0xFEE
   539                           wreg	equ	0xFE8
   540                           
   541                           	psect	cstackCOMRAM
   542  000001                     __pcstackCOMRAM:
   543                           	opt stack 0
   544  000001                     ??_Timer0_ISR:
   545                           
   546                           ; 1 bytes @ 0x0
   547  000001                     	ds	18
   548  000013                     ??_isdigit:
   549  000013                     ?_command_builder_add_char:
   550                           	opt stack 0
   551  000013                     ?_strcmp2:
   552                           	opt stack 0
   553  000013                     ?___wmul:
   554                           	opt stack 0
   555  000013                     ?___awdiv:
   556                           	opt stack 0
   557  000013                     ?___lwdiv:
   558                           	opt stack 0
   559  000013                     ?___lwmod:
   560                           	opt stack 0
   561  000013                     ?_timerGetCount:
   562                           	opt stack 0
   563  000013                     ?___lmul:
   564                           	opt stack 0
   565  000013                     ?___lldiv:
   566                           	opt stack 0
   567  000013                     ?___llmod:
   568                           	opt stack 0
   569  000013                     SPI_send_data@data:
   570                           	opt stack 0
   571  000013                     ledSet@ledNum:
   572                           	opt stack 0
   573  000013                     command_builder_add_char@send_buffer:
   574                           	opt stack 0
   575  000013                     strcmp2@a:
   576                           	opt stack 0
   577  000013                     SPI_receive_data@data:
   578                           	opt stack 0
   579  000013                     timerGetCount@timerIndex:
   580                           	opt stack 0
   581  000013                     timerResetCount@timerIndex:
   582                           	opt stack 0
   583  000013                     delayMS10@count:
   584                           	opt stack 0
   585  000013                     ___wmul@multiplier:
   586                           	opt stack 0
   587  000013                     ___awdiv@dividend:
   588                           	opt stack 0
   589  000013                     ___lwdiv@dividend:
   590                           	opt stack 0
   591  000013                     ___lwmod@dividend:
   592                           	opt stack 0
   593  000013                     ___lmul@multiplier:
   594                           	opt stack 0
   595  000013                     ___lldiv@dividend:
   596                           	opt stack 0
   597  000013                     ___llmod@dividend:
   598                           	opt stack 0
   599                           
   600                           ; 4 bytes @ 0x12
   601  000013                     	ds	1
   602  000014                     SPI_send_data@sendGood:
   603                           	opt stack 0
   604  000014                     _isdigit$2441:
   605                           	opt stack 0
   606                           
   607                           ; 1 bytes @ 0x13
   608  000014                     	ds	1
   609  000015                     ??_delayMS10:
   610  000015                     ??_timerResetCount:
   611  000015                     command_builder_add_char@data:
   612                           	opt stack 0
   613  000015                     SPI_receive_data@recvGood:
   614                           	opt stack 0
   615  000015                     isdigit@c:
   616                           	opt stack 0
   617  000015                     ledSet@setValue:
   618                           	opt stack 0
   619  000015                     send_data@send_buffer:
   620                           	opt stack 0
   621  000015                     strcmp2@b:
   622                           	opt stack 0
   623  000015                     ___wmul@multiplicand:
   624                           	opt stack 0
   625  000015                     ___awdiv@divisor:
   626                           	opt stack 0
   627  000015                     ___lwdiv@divisor:
   628                           	opt stack 0
   629  000015                     ___lwmod@divisor:
   630                           	opt stack 0
   631                           
   632                           ; 2 bytes @ 0x14
   633  000015                     	ds	1
   634  000016                     ??_command_builder_add_char:
   635  000016                     receive_data@receive_buffer:
   636                           	opt stack 0
   637  000016                     delayMS10@inx:
   638                           	opt stack 0
   639                           
   640                           ; 2 bytes @ 0x15
   641  000016                     	ds	1
   642  000017                     ??_send_data:
   643  000017                     ??_strcmp2:
   644  000017                     ??_timerGetCount:
   645  000017                     ??_ledSet:
   646  000017                     ?_command_builder_add_string:
   647                           	opt stack 0
   648  000017                     ___awdiv@counter:
   649                           	opt stack 0
   650  000017                     ___lwdiv@counter:
   651                           	opt stack 0
   652  000017                     ___lwmod@counter:
   653                           	opt stack 0
   654  000017                     command_builder_add_string@send_buffer:
   655                           	opt stack 0
   656  000017                     ___wmul@product:
   657                           	opt stack 0
   658  000017                     ___lmul@multiplicand:
   659                           	opt stack 0
   660  000017                     ___lldiv@divisor:
   661                           	opt stack 0
   662  000017                     ___llmod@divisor:
   663                           	opt stack 0
   664                           
   665                           ; 4 bytes @ 0x16
   666  000017                     	ds	1
   667  000018                     ??_receive_data:
   668  000018                     ??_mcpInitF:
   669  000018                     ___awdiv@sign:
   670                           	opt stack 0
   671  000018                     ___lwdiv@quotient:
   672                           	opt stack 0
   673                           
   674                           ; 2 bytes @ 0x17
   675  000018                     	ds	1
   676  000019                     ?_atoi:
   677                           	opt stack 0
   678  000019                     receive_data@data:
   679                           	opt stack 0
   680  000019                     send_data@send_end:
   681                           	opt stack 0
   682  000019                     ledSetAll@led1Value:
   683                           	opt stack 0
   684  000019                     ledToggle@ledNum:
   685                           	opt stack 0
   686  000019                     process_data_parameterize@parameters:
   687                           	opt stack 0
   688  000019                     command_builder_add_string@data_string:
   689                           	opt stack 0
   690  000019                     atoi@s:
   691                           	opt stack 0
   692  000019                     ___awdiv@quotient:
   693                           	opt stack 0
   694                           
   695                           ; 2 bytes @ 0x18
   696  000019                     	ds	1
   697  00001A                     strcmp2@match:
   698                           	opt stack 0
   699  00001A                     utoa@buf:
   700                           	opt stack 0
   701                           
   702                           ; 2 bytes @ 0x19
   703  00001A                     	ds	1
   704  00001B                     ??_atoi:
   705  00001B                     ??_command_builder_add_string:
   706  00001B                     ??_ledToggle:
   707  00001B                     ___llmod@counter:
   708                           	opt stack 0
   709  00001B                     ledSetAll@led2Value:
   710                           	opt stack 0
   711  00001B                     process_data_parameterize@buffer_to_parameterize:
   712                           	opt stack 0
   713  00001B                     ___lmul@product:
   714                           	opt stack 0
   715  00001B                     ___lldiv@quotient:
   716                           	opt stack 0
   717                           
   718                           ; 4 bytes @ 0x1A
   719  00001B                     	ds	1
   720  00001C                     strcmp2@inx:
   721                           	opt stack 0
   722  00001C                     utoa@val:
   723                           	opt stack 0
   724                           
   725                           ; 2 bytes @ 0x1B
   726  00001C                     	ds	1
   727  00001D                     ??_process_data_parameterize:
   728  00001D                     atoi@sign:
   729                           	opt stack 0
   730  00001D                     ledSetAll@led3Value:
   731                           	opt stack 0
   732  00001D                     ledToggle@setValue:
   733                           	opt stack 0
   734  00001D                     command_builder_add_string@xsumAdd:
   735                           	opt stack 0
   736                           
   737                           ; 2 bytes @ 0x1C
   738  00001D                     	ds	1
   739  00001E                     strmatch@a:
   740                           	opt stack 0
   741  00001E                     atoi@a:
   742                           	opt stack 0
   743  00001E                     utoa@base:
   744                           	opt stack 0
   745                           
   746                           ; 2 bytes @ 0x1D
   747  00001E                     	ds	1
   748  00001F                     ?_atol:
   749                           	opt stack 0
   750  00001F                     ___lldiv@counter:
   751                           	opt stack 0
   752  00001F                     ledToggle@getValue:
   753                           	opt stack 0
   754  00001F                     ledRunUp@ledRunDelay:
   755                           	opt stack 0
   756  00001F                     ledRunDown@ledRunDelay:
   757                           	opt stack 0
   758  00001F                     command_builder_add_string@inx:
   759                           	opt stack 0
   760  00001F                     atol@s:
   761                           	opt stack 0
   762                           
   763                           ; 2 bytes @ 0x1E
   764  00001F                     	ds	1
   765  000020                     process_data_parameterize@inx:
   766                           	opt stack 0
   767  000020                     strmatch@b:
   768                           	opt stack 0
   769  000020                     utoa@v:
   770                           	opt stack 0
   771  000020                     ultoa@buf:
   772                           	opt stack 0
   773  000020                     powerReduction@timerLast_ms:
   774                           	opt stack 0
   775                           
   776                           ; 4 bytes @ 0x1F
   777  000020                     	ds	1
   778  000021                     ledTestToggle@ledNum:
   779                           	opt stack 0
   780  000021                     ledGoToggle@ledNum:
   781                           	opt stack 0
   782  000021                     ledRunUp@delay10ms:
   783                           	opt stack 0
   784  000021                     ledRunDown@delay10ms:
   785                           	opt stack 0
   786                           
   787                           ; 2 bytes @ 0x20
   788  000021                     	ds	1
   789  000022                     process_data_parameterize@parameter_index:
   790                           	opt stack 0
   791  000022                     utoa@c:
   792                           	opt stack 0
   793  000022                     strmatch@result:
   794                           	opt stack 0
   795  000022                     ultoa@val:
   796                           	opt stack 0
   797                           
   798                           ; 4 bytes @ 0x21
   799  000022                     	ds	1
   800  000023                     ??_atol:
   801  000023                     ?_powerCalculateWatts:
   802                           	opt stack 0
   803  000023                     process_data_parameterize@parameter_position:
   804                           	opt stack 0
   805  000023                     ledRun@ledRunDelay:
   806                           	opt stack 0
   807  000023                     itoa@buf:
   808                           	opt stack 0
   809  000023                     powerCalculateWatts@timer_ms:
   810                           	opt stack 0
   811                           
   812                           ; 4 bytes @ 0x22
   813  000023                     	ds	1
   814  000024                     strmatch@match:
   815                           	opt stack 0
   816  000024                     powerReduction@timerReduce_ms:
   817                           	opt stack 0
   818                           
   819                           ; 4 bytes @ 0x23
   820  000024                     	ds	1
   821  000025                     itoa@val:
   822                           	opt stack 0
   823                           
   824                           ; 2 bytes @ 0x24
   825  000025                     	ds	1
   826  000026                     ultoa@base:
   827                           	opt stack 0
   828                           
   829                           ; 2 bytes @ 0x25
   830  000026                     	ds	1
   831  000027                     powerCalculateWatts@outHF:
   832                           	opt stack 0
   833  000027                     atol@sign:
   834                           	opt stack 0
   835  000027                     itoa@base:
   836                           	opt stack 0
   837                           
   838                           ; 2 bytes @ 0x26
   839  000027                     	ds	1
   840  000028                     powerCalculateWatts@calcWatts:
   841                           	opt stack 0
   842  000028                     atol@a:
   843                           	opt stack 0
   844  000028                     ultoa@v:
   845                           	opt stack 0
   846                           
   847                           ; 4 bytes @ 0x27
   848  000028                     	ds	1
   849  000029                     itoa@cp:
   850                           	opt stack 0
   851                           
   852                           ; 2 bytes @ 0x28
   853  000029                     	ds	1
   854  00002A                     mcpUpdatePower@timerLFout_ms:
   855                           	opt stack 0
   856                           
   857                           ; 4 bytes @ 0x29
   858  00002A                     	ds	1
   859  00002B                     xsum_builder@send_buffer:
   860                           	opt stack 0
   861                           
   862                           ; 2 bytes @ 0x2A
   863  00002B                     	ds	1
   864  00002C                     atol@c:
   865                           	opt stack 0
   866  00002C                     ultoa@c:
   867                           	opt stack 0
   868                           
   869                           ; 1 bytes @ 0x2B
   870  00002C                     	ds	1
   871  00002D                     xsum_builder@xsum:
   872                           	opt stack 0
   873                           
   874                           ; 2 bytes @ 0x2C
   875  00002D                     	ds	1
   876  00002E                     mcpUpdatePower@timerHFout_ms:
   877                           	opt stack 0
   878                           
   879                           ; 4 bytes @ 0x2D
   880  00002E                     	ds	1
   881  00002F                     command_builder1@send_buffer:
   882                           	opt stack 0
   883  00002F                     command_builder3@send_buffer:
   884                           	opt stack 0
   885                           
   886                           ; 2 bytes @ 0x2E
   887  00002F                     	ds	2
   888  000031                     command_builder1@data1:
   889                           	opt stack 0
   890  000031                     command_builder3@data1:
   891                           	opt stack 0
   892                           
   893                           ; 2 bytes @ 0x30
   894  000031                     	ds	2
   895  000033                     command_builder1@xsum:
   896                           	opt stack 0
   897  000033                     command_builder3@data2:
   898                           	opt stack 0
   899                           
   900                           ; 2 bytes @ 0x32
   901  000033                     	ds	2
   902  000035                     command_builder3@data3:
   903                           	opt stack 0
   904  000035                     send_end_of_transmission@send_buffer:
   905                           	opt stack 0
   906                           
   907                           ; 2 bytes @ 0x34
   908  000035                     	ds	2
   909  000037                     command_builder3@xsum:
   910                           	opt stack 0
   911                           
   912                           ; 2 bytes @ 0x36
   913  000037                     	ds	2
   914  000039                     com_command_setPower@send_buffer:
   915                           	opt stack 0
   916  000039                     com_command_setEnergyUsed@send_buffer:
   917                           	opt stack 0
   918  000039                     com_command_setVersion@send_buffer:
   919                           	opt stack 0
   920                           
   921                           ; 2 bytes @ 0x38
   922  000039                     	ds	2
   923  00003B                     process_data_parameters@end_of_transmission_received:
   924                           	opt stack 0
   925  00003B                     resetCommunications@send_buffer:
   926                           	opt stack 0
   927                           
   928                           ; 2 bytes @ 0x3A
   929  00003B                     	ds	1
   930  00003C                     
   931                           ; 1 bytes @ 0x3B
   932  00003C                     	ds	1
   933  00003D                     tblptru	equ	0xFF8
   934                           postinc0	equ	0xFEE
   935                           wreg	equ	0xFE8
   936                           
   937                           ; 1 bytes @ 0x3C
   938 ;;
   939 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   940 ;;
   941 ;; *************** function _main *****************
   942 ;; Defined at:
   943 ;;		line 48 in file "Main_PowerSense.c"
   944 ;; Parameters:    Size  Location     Type
   945 ;;		None
   946 ;; Auto vars:     Size  Location     Type
   947 ;;  timerHeartbe    4    2[BANK1 ] unsigned long 
   948 ;;  inx             2    6[BANK1 ] int 
   949 ;; Return value:  Size  Location     Type
   950 ;;                  1    wreg      void 
   951 ;; Registers used:
   952 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   953 ;; Tracked objects:
   954 ;;		On entry : 0/0
   955 ;;		On exit  : 0/0
   956 ;;		Unchanged: 0/0
   957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   958 ;;      Params:         0       0       0       0       0       0       0
   959 ;;      Locals:         0       0       6       0       0       0       0
   960 ;;      Temps:          0       1       0       0       0       0       0
   961 ;;      Totals:         0       1       6       0       0       0       0
   962 ;;Total ram usage:        7 bytes
   963 ;; Hardware stack levels required when called:   11
   964 ;; This function calls:
   965 ;;		___llmod
   966 ;;		_commInit
   967 ;;		_commRun
   968 ;;		_initIO
   969 ;;		_initInterruptsClear
   970 ;;		_initOSC
   971 ;;		_ledInit
   972 ;;		_ledRun
   973 ;;		_ledSetAllOff
   974 ;;		_ledSetAllOn
   975 ;;		_ledTestToggle
   976 ;;		_mcpInit
   977 ;;		_mcpUpdatePower
   978 ;;		_timerGetCount
   979 ;;		_timerInit
   980 ;; This function is called by:
   981 ;;		Startup code after reset
   982 ;; This function uses a non-reentrant model
   983 ;;
   984                           
   985                           	psect	text0
   986  000E36                     __ptext0:
   987                           	opt stack 0
   988  000E36                     _main:
   989                           	opt stack 20
   990                           
   991                           ;Main_PowerSense.c: 83: initOSC( );
   992                           
   993                           ;incstack = 0
   994  000E36  EC8B  F010         	call	_initOSC	;wreg free
   995                           
   996                           ;Main_PowerSense.c: 84: initIO( );
   997  000E3A  ECA2  F010         	call	_initIO	;wreg free
   998                           
   999                           ;Main_PowerSense.c: 85: ledInit( );
  1000  000E3E  ECB2  F010         	call	_ledInit	;wreg free
  1001                           
  1002                           ;Main_PowerSense.c: 87: ledSetAllOff( );
  1003  000E42  EC60  F010         	call	_ledSetAllOff	;wreg free
  1004                           
  1005                           ;Main_PowerSense.c: 89: initInterruptsClear( );
  1006  000E46  EC67  F00E         	call	_initInterruptsClear	;wreg free
  1007                           
  1008                           ;Main_PowerSense.c: 90: timerInit( );
  1009  000E4A  EC2F  F00D         	call	_timerInit	;wreg free
  1010                           
  1011                           ;Main_PowerSense.c: 92: mcpInit( );
  1012  000E4E  ECF2  F00F         	call	_mcpInit	;wreg free
  1013                           
  1014                           ;Main_PowerSense.c: 95: for( int inx = 0; inx < 5; inx++ )
  1015  000E52  0E00               	movlw	0
  1016  000E54  0101               	movlb	1	; () banked
  1017  000E56  6F5B               	movwf	(main@inx+1)& (0+255),b
  1018  000E58  0E00               	movlw	0
  1019  000E5A  6F5A               	movwf	main@inx& (0+255),b
  1020  000E5C  BF5B               	btfsc	(main@inx+1)& (0+255),7,b
  1021  000E5E  D006               	goto	l475
  1022  000E60  515B               	movf	(main@inx+1)& (0+255),w,b
  1023  000E62  E11E               	bnz	l4717
  1024  000E64  0E05               	movlw	5
  1025  000E66  5D5A               	subwf	main@inx& (0+255),w,b
  1026  000E68  B0D8               	btfsc	status,0,c
  1027  000E6A  D01A               	goto	u3550
  1028  000E6C                     l475:
  1029                           
  1030                           ; BSR set to: 1
  1031                           ;Main_PowerSense.c: 96: {
  1032                           ;Main_PowerSense.c: 97: ledSetAllOn( );
  1033                           
  1034                           ; BSR set to: 1
  1035  000E6C  EC51  F010         	call	_ledSetAllOn	;wreg free
  1036                           
  1037                           ;Main_PowerSense.c: 98: _delay((unsigned long)((10)*(16000000UL/4000.0)));
  1038  000E70  0E34               	movlw	52
  1039  000E72  0100               	movlb	0	; () banked
  1040  000E74  6FDF               	movwf	??_main& (0+255),b
  1041  000E76  0EF1               	movlw	241
  1042  000E78                     u3587:
  1043  000E78  2EE8               	decfsz	wreg,f,c
  1044  000E7A  D7FE               	bra	u3587
  1045  000E7C  2FDF               	decfsz	??_main& (0+255),f,b
  1046  000E7E  D7FC               	bra	u3587
  1047  000E80  D000               	nop2	
  1048                           
  1049                           ;Main_PowerSense.c: 99: ledSetAllOff( );
  1050  000E82  EC60  F010         	call	_ledSetAllOff	;wreg free
  1051                           
  1052                           ;Main_PowerSense.c: 100: _delay((unsigned long)((10)*(16000000UL/4000.0)));
  1053  000E86  0E34               	movlw	52
  1054  000E88  0100               	movlb	0	; () banked
  1055  000E8A  6FDF               	movwf	??_main& (0+255),b
  1056  000E8C  0EF1               	movlw	241
  1057  000E8E                     u3597:
  1058  000E8E  2EE8               	decfsz	wreg,f,c
  1059  000E90  D7FE               	bra	u3597
  1060  000E92  2FDF               	decfsz	??_main& (0+255),f,b
  1061  000E94  D7FC               	bra	u3597
  1062  000E96  D000               	nop2	
  1063  000E98  0101               	movlb	1	; () banked
  1064  000E9A  4B5A               	infsnz	main@inx& (0+255),f,b
  1065  000E9C  2B5B               	incf	(main@inx+1)& (0+255),f,b
  1066  000E9E  D7DE               	goto	L1
  1067  000EA0                     u3550:
  1068  000EA0                     l4717:
  1069                           
  1070                           ; BSR set to: 1
  1071                           ;Main_PowerSense.c: 101: }
  1072                           ;Main_PowerSense.c: 104: commInit( );
  1073  000EA0  ECBC  F010         	call	_commInit	;wreg free
  1074                           
  1075                           ;Main_PowerSense.c: 106: ledRun( 100 );
  1076  000EA4  0E00               	movlw	0
  1077  000EA6  6E24               	movwf	ledRun@ledRunDelay+1,c
  1078  000EA8  0E64               	movlw	100
  1079  000EAA  6E23               	movwf	ledRun@ledRunDelay,c
  1080  000EAC  EC7E  F010         	call	_ledRun	;wreg free
  1081  000EB0                     
  1082                           ;Main_PowerSense.c: 109: {
  1083                           ;Main_PowerSense.c: 110: mcpUpdatePower( );
  1084  000EB0  EC0F  F004         	call	_mcpUpdatePower	;wreg free
  1085                           
  1086                           ;Main_PowerSense.c: 111: commRun( );
  1087  000EB4  ECB8  F010         	call	_commRun	;wreg free
  1088                           
  1089                           ;Main_PowerSense.c: 114: {
  1090                           ;Main_PowerSense.c: 115: static bool oneShot = 0;
  1091                           ;Main_PowerSense.c: 116: unsigned long timerHeartbeat;
  1092                           ;Main_PowerSense.c: 117: timerHeartbeat = timerGetCount( 3 );
  1093  000EB8  0E00               	movlw	0
  1094  000EBA  6E14               	movwf	timerGetCount@timerIndex+1,c
  1095  000EBC  0E03               	movlw	3
  1096  000EBE  6E13               	movwf	timerGetCount@timerIndex,c
  1097  000EC0  EC93  F00F         	call	_timerGetCount	;wreg free
  1098  000EC4  C013  F156         	movff	?_timerGetCount,main@timerHeartbeat
  1099  000EC8  C014  F157         	movff	?_timerGetCount+1,main@timerHeartbeat+1
  1100  000ECC  C015  F158         	movff	?_timerGetCount+2,main@timerHeartbeat+2
  1101  000ED0  C016  F159         	movff	?_timerGetCount+3,main@timerHeartbeat+3
  1102                           
  1103                           ;Main_PowerSense.c: 118: if( (timerHeartbeat % 500) == 0 )
  1104  000ED4  C156  F013         	movff	main@timerHeartbeat,___llmod@dividend
  1105  000ED8  C157  F014         	movff	main@timerHeartbeat+1,___llmod@dividend+1
  1106  000EDC  C158  F015         	movff	main@timerHeartbeat+2,___llmod@dividend+2
  1107  000EE0  C159  F016         	movff	main@timerHeartbeat+3,___llmod@dividend+3
  1108  000EE4  0EF4               	movlw	244
  1109  000EE6  6E17               	movwf	___llmod@divisor,c
  1110  000EE8  0E01               	movlw	1
  1111  000EEA  6E18               	movwf	___llmod@divisor+1,c
  1112  000EEC  0E00               	movlw	0
  1113  000EEE  6E19               	movwf	___llmod@divisor+2,c
  1114  000EF0  0E00               	movlw	0
  1115  000EF2  6E1A               	movwf	___llmod@divisor+3,c
  1116  000EF4  ECFC  F00C         	call	___llmod	;wreg free
  1117  000EF8  5013               	movf	?___llmod,w,c
  1118  000EFA  1014               	iorwf	?___llmod+1,w,c
  1119  000EFC  1015               	iorwf	?___llmod+2,w,c
  1120  000EFE  1016               	iorwf	?___llmod+3,w,c
  1121  000F00  A4D8               	btfss	status,2,c
  1122  000F02  D00D               	goto	l480
  1123                           
  1124                           ;Main_PowerSense.c: 119: {
  1125                           ;Main_PowerSense.c: 120: if( oneShot == 0 )
  1126  000F04  0100               	movlb	0	; () banked
  1127  000F06  51FC               	movf	main@oneShot& (0+255),w,b
  1128  000F08  A4D8               	btfss	status,2,c
  1129  000F0A  D7D2               	goto	l477
  1130                           
  1131                           ; BSR set to: 0
  1132                           ;Main_PowerSense.c: 121: {
  1133                           ;Main_PowerSense.c: 122: oneShot = 1;
  1134  000F0C  0E01               	movlw	1
  1135  000F0E  6FFC               	movwf	main@oneShot& (0+255),b
  1136                           
  1137                           ; BSR set to: 0
  1138                           ;Main_PowerSense.c: 123: ledTestToggle( 1 );
  1139  000F10  0E00               	movlw	0
  1140  000F12  6E22               	movwf	ledTestToggle@ledNum+1,c
  1141  000F14  0E01               	movlw	1
  1142  000F16  6E21               	movwf	ledTestToggle@ledNum,c
  1143  000F18  ECAB  F010         	call	_ledTestToggle	;wreg free
  1144                           
  1145                           ;Main_PowerSense.c: 124: }
  1146                           ;Main_PowerSense.c: 126: }
  1147  000F1C  D7C9               	goto	l477
  1148  000F1E                     l480:
  1149                           
  1150                           ;Main_PowerSense.c: 127: else
  1151                           ;Main_PowerSense.c: 128: {
  1152                           ;Main_PowerSense.c: 129: oneShot = 0;
  1153  000F1E  0E00               	movlw	0
  1154  000F20  0100               	movlb	0	; () banked
  1155  000F22  6FFC               	movwf	main@oneShot& (0+255),b
  1156                           
  1157                           ; BSR set to: 0
  1158                           
  1159                           ; BSR set to: 0
  1160  000F24  D7C5               	goto	l477
  1161  000F26                     __end_of_main:
  1162                           	opt stack 0
  1163                           tblptru	equ	0xFF8
  1164                           postinc0	equ	0xFEE
  1165                           wreg	equ	0xFE8
  1166                           status	equ	0xFD8
  1167                           
  1168 ;; *************** function _timerInit *****************
  1169 ;; Defined at:
  1170 ;;		line 53 in file "Timer.c"
  1171 ;; Parameters:    Size  Location     Type
  1172 ;;		None
  1173 ;; Auto vars:     Size  Location     Type
  1174 ;;		None
  1175 ;; Return value:  Size  Location     Type
  1176 ;;                  1    wreg      void 
  1177 ;; Registers used:
  1178 ;;		wreg, status,2
  1179 ;; Tracked objects:
  1180 ;;		On entry : 0/0
  1181 ;;		On exit  : 0/0
  1182 ;;		Unchanged: 0/0
  1183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1184 ;;      Params:         0       0       0       0       0       0       0
  1185 ;;      Locals:         0       0       0       0       0       0       0
  1186 ;;      Temps:          0       0       0       0       0       0       0
  1187 ;;      Totals:         0       0       0       0       0       0       0
  1188 ;;Total ram usage:        0 bytes
  1189 ;; Hardware stack levels used:    1
  1190 ;; Hardware stack levels required when called:    1
  1191 ;; This function calls:
  1192 ;;		Nothing
  1193 ;; This function is called by:
  1194 ;;		_main
  1195 ;; This function uses a non-reentrant model
  1196 ;;
  1197                           
  1198                           	psect	text1
  1199  001A5E                     __ptext1:
  1200                           	opt stack 0
  1201  001A5E                     _timerInit:
  1202                           	opt stack 29
  1203                           
  1204                           ;Timer.c: 56: T0CONbits.TMR0ON = 0;
  1205                           
  1206                           ; BSR set to: 0
  1207                           ;incstack = 0
  1208  001A5E  9ED5               	bcf	4053,7,c	;volatile
  1209                           
  1210                           ;Timer.c: 57: T0CONbits.T08BIT = 0;
  1211  001A60  9CD5               	bcf	4053,6,c	;volatile
  1212                           
  1213                           ;Timer.c: 58: T0CONbits.T0CS = 0;
  1214  001A62  9AD5               	bcf	4053,5,c	;volatile
  1215                           
  1216                           ;Timer.c: 59: T0CONbits.PSA = 0;
  1217  001A64  96D5               	bcf	4053,3,c	;volatile
  1218                           
  1219                           ;Timer.c: 60: T0CONbits.T0PS = 0b001;
  1220  001A66  50D5               	movf	4053,w,c	;volatile
  1221  001A68  0BF8               	andlw	-8
  1222  001A6A  0901               	iorlw	1
  1223  001A6C  6ED5               	movwf	4053,c	;volatile
  1224                           
  1225                           ;Timer.c: 62: INTCONbits.TMR0IE = 1;
  1226  001A6E  8AF2               	bsf	intcon,5,c	;volatile
  1227                           
  1228                           ;Timer.c: 63: INTCONbits.GIE = 1;
  1229  001A70  8EF2               	bsf	intcon,7,c	;volatile
  1230                           
  1231                           ;Timer.c: 64: T0CONbits.TMR0ON = 1;
  1232  001A72  8ED5               	bsf	4053,7,c	;volatile
  1233                           
  1234                           ;Timer.c: 68: timerCount_ms[0] = 0;
  1235  001A74  0E00               	movlw	0
  1236  001A76  0100               	movlb	0	; () banked
  1237  001A78  6FE0               	movwf	_timerCount_ms& (0+255),b	;volatile
  1238  001A7A  0E00               	movlw	0
  1239  001A7C  6FE1               	movwf	(_timerCount_ms+1)& (0+255),b	;volatile
  1240  001A7E  0E00               	movlw	0
  1241  001A80  6FE2               	movwf	(_timerCount_ms+2)& (0+255),b	;volatile
  1242  001A82  0E00               	movlw	0
  1243  001A84  6FE3               	movwf	(_timerCount_ms+3)& (0+255),b	;volatile
  1244                           
  1245                           ;Timer.c: 69: timerCount_ms[1] = 0;
  1246  001A86  0E00               	movlw	0
  1247  001A88  6FE4               	movwf	(_timerCount_ms+4)& (0+255),b	;volatile
  1248  001A8A  0E00               	movlw	0
  1249  001A8C  6FE5               	movwf	(_timerCount_ms+5)& (0+255),b	;volatile
  1250  001A8E  0E00               	movlw	0
  1251  001A90  6FE6               	movwf	(_timerCount_ms+6)& (0+255),b	;volatile
  1252  001A92  0E00               	movlw	0
  1253  001A94  6FE7               	movwf	(_timerCount_ms+7)& (0+255),b	;volatile
  1254                           
  1255                           ;Timer.c: 70: timerCount_ms[2] = 0;
  1256  001A96  0E00               	movlw	0
  1257  001A98  6FE8               	movwf	(_timerCount_ms+8)& (0+255),b	;volatile
  1258  001A9A  0E00               	movlw	0
  1259  001A9C  6FE9               	movwf	(_timerCount_ms+9)& (0+255),b	;volatile
  1260  001A9E  0E00               	movlw	0
  1261  001AA0  6FEA               	movwf	(_timerCount_ms+10)& (0+255),b	;volatile
  1262  001AA2  0E00               	movlw	0
  1263  001AA4  6FEB               	movwf	(_timerCount_ms+11)& (0+255),b	;volatile
  1264                           
  1265                           ;Timer.c: 71: timerCount_ms[3] = 0;
  1266  001AA6  0E00               	movlw	0
  1267  001AA8  6FEC               	movwf	(_timerCount_ms+12)& (0+255),b	;volatile
  1268  001AAA  0E00               	movlw	0
  1269  001AAC  6FED               	movwf	(_timerCount_ms+13)& (0+255),b	;volatile
  1270  001AAE  0E00               	movlw	0
  1271  001AB0  6FEE               	movwf	(_timerCount_ms+14)& (0+255),b	;volatile
  1272  001AB2  0E00               	movlw	0
  1273  001AB4  6FEF               	movwf	(_timerCount_ms+15)& (0+255),b	;volatile
  1274                           
  1275                           ; BSR set to: 0
  1276                           ;Timer.c: 73: INTCONbits.TMR0IF = 0;
  1277  001AB6  94F2               	bcf	intcon,2,c	;volatile
  1278                           
  1279                           ;Timer.c: 75: TMR0H = ((unsigned char)(((( 65536 - 1000 ))>>8)&0xFF));
  1280  001AB8  0EFC               	movlw	252
  1281  001ABA  6ED7               	movwf	4055,c	;volatile
  1282                           
  1283                           ;Timer.c: 76: TMR0L = ((unsigned char)((( 65536 - 1000 ))&0xFF));
  1284  001ABC  0E18               	movlw	24
  1285  001ABE  6ED6               	movwf	4054,c	;volatile
  1286                           
  1287                           ; BSR set to: 0
  1288  001AC0  0012               	return		;funcret
  1289  001AC2                     __end_of_timerInit:
  1290                           	opt stack 0
  1291                           tblptru	equ	0xFF8
  1292                           intcon	equ	0xFF2
  1293                           postinc0	equ	0xFEE
  1294                           wreg	equ	0xFE8
  1295                           status	equ	0xFD8
  1296                           
  1297 ;; *************** function _mcpUpdatePower *****************
  1298 ;; Defined at:
  1299 ;;		line 206 in file "MCP3909_Interface.c"
  1300 ;; Parameters:    Size  Location     Type
  1301 ;;		None
  1302 ;; Auto vars:     Size  Location     Type
  1303 ;;  timerLFout_m    4   41[COMRAM] unsigned long 
  1304 ;;  timerHFout_m    4   45[COMRAM] unsigned long 
  1305 ;; Return value:  Size  Location     Type
  1306 ;;                  1    wreg      void 
  1307 ;; Registers used:
  1308 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1309 ;; Tracked objects:
  1310 ;;		On entry : 0/0
  1311 ;;		On exit  : 0/0
  1312 ;;		Unchanged: 0/0
  1313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1314 ;;      Params:         0       0       0       0       0       0       0
  1315 ;;      Locals:         8       0       0       0       0       0       0
  1316 ;;      Temps:          0       0       0       0       0       0       0
  1317 ;;      Totals:         8       0       0       0       0       0       0
  1318 ;;Total ram usage:        8 bytes
  1319 ;; Hardware stack levels used:    1
  1320 ;; Hardware stack levels required when called:    5
  1321 ;; This function calls:
  1322 ;;		_ledGoToggle
  1323 ;;		_ledTestToggle
  1324 ;;		_powerCalculateWatts
  1325 ;;		_powerReduction
  1326 ;;		_timerGetCount
  1327 ;;		_timerResetCount
  1328 ;; This function is called by:
  1329 ;;		_main
  1330 ;; This function uses a non-reentrant model
  1331 ;;
  1332                           
  1333                           	psect	text2
  1334  00081E                     __ptext2:
  1335                           	opt stack 0
  1336  00081E                     _mcpUpdatePower:
  1337                           	opt stack 25
  1338                           
  1339                           ;MCP3909_Interface.c: 220: static int meterWattsHF = 0;
  1340                           ;MCP3909_Interface.c: 221: static unsigned long timerHFoutLast_ms = 0;
  1341                           ;MCP3909_Interface.c: 223: static bool oneShotHFout = 0;
  1342                           ;MCP3909_Interface.c: 225: if( PORTAbits.RA3 == 0 )
  1343                           
  1344                           ; BSR set to: 0
  1345                           ;incstack = 0
  1346  00081E  B680               	btfsc	3968,3,c	;volatile
  1347  000820  D03E               	goto	l541
  1348                           
  1349                           ;MCP3909_Interface.c: 226: {
  1350                           ;MCP3909_Interface.c: 227: if( oneShotHFout == 0 )
  1351  000822  504A               	movf	mcpUpdatePower@oneShotHFout,w,c
  1352  000824  A4D8               	btfss	status,2,c
  1353  000826  D03D               	goto	l543
  1354                           
  1355                           ;MCP3909_Interface.c: 228: {
  1356                           ;MCP3909_Interface.c: 230: ledGoToggle( 0 );
  1357  000828  0E00               	movlw	0
  1358  00082A  6E22               	movwf	ledGoToggle@ledNum+1,c
  1359  00082C  0E00               	movlw	0
  1360  00082E  6E21               	movwf	ledGoToggle@ledNum,c
  1361  000830  ECC0  F010         	call	_ledGoToggle	;wreg free
  1362                           
  1363                           ;MCP3909_Interface.c: 232: oneShotHFout = 1;
  1364  000834  0E01               	movlw	1
  1365  000836  6E4A               	movwf	mcpUpdatePower@oneShotHFout,c
  1366                           
  1367                           ;MCP3909_Interface.c: 234: unsigned long timerHFout_ms;
  1368                           ;MCP3909_Interface.c: 235: timerHFout_ms = timerGetCount( 0 );
  1369  000838  0E00               	movlw	0
  1370  00083A  6E14               	movwf	timerGetCount@timerIndex+1,c
  1371  00083C  0E00               	movlw	0
  1372  00083E  6E13               	movwf	timerGetCount@timerIndex,c
  1373  000840  EC93  F00F         	call	_timerGetCount	;wreg free
  1374  000844  C013  F02E         	movff	?_timerGetCount,mcpUpdatePower@timerHFout_ms
  1375  000848  C014  F02F         	movff	?_timerGetCount+1,mcpUpdatePower@timerHFout_ms+1
  1376  00084C  C015  F030         	movff	?_timerGetCount+2,mcpUpdatePower@timerHFout_ms+2
  1377  000850  C016  F031         	movff	?_timerGetCount+3,mcpUpdatePower@timerHFout_ms+3
  1378                           
  1379                           ;MCP3909_Interface.c: 236: timerResetCount( 0 );
  1380  000854  0E00               	movlw	0
  1381  000856  6E14               	movwf	timerResetCount@timerIndex+1,c
  1382  000858  0E00               	movlw	0
  1383  00085A  6E13               	movwf	timerResetCount@timerIndex,c
  1384  00085C  ECDD  F00F         	call	_timerResetCount	;wreg free
  1385                           
  1386                           ;MCP3909_Interface.c: 237: timerResetCount( 2 );
  1387  000860  0E00               	movlw	0
  1388  000862  6E14               	movwf	timerResetCount@timerIndex+1,c
  1389  000864  0E02               	movlw	2
  1390  000866  6E13               	movwf	timerResetCount@timerIndex,c
  1391  000868  ECDD  F00F         	call	_timerResetCount	;wreg free
  1392                           
  1393                           ;MCP3909_Interface.c: 239: meterWattsHF = powerCalculateWatts( timerHFout_ms, 1 );
  1394  00086C  C02E  F023         	movff	mcpUpdatePower@timerHFout_ms,powerCalculateWatts@timer_ms
  1395  000870  C02F  F024         	movff	mcpUpdatePower@timerHFout_ms+1,powerCalculateWatts@timer_ms+1
  1396  000874  C030  F025         	movff	mcpUpdatePower@timerHFout_ms+2,powerCalculateWatts@timer_ms+2
  1397  000878  C031  F026         	movff	mcpUpdatePower@timerHFout_ms+3,powerCalculateWatts@timer_ms+3
  1398  00087C  0E01               	movlw	1
  1399  00087E  6E27               	movwf	powerCalculateWatts@outHF,c
  1400  000880  EC4B  F00C         	call	_powerCalculateWatts	;wreg free
  1401  000884  C023  F045         	movff	?_powerCalculateWatts,mcpUpdatePower@meterWattsHF
  1402  000888  C024  F046         	movff	?_powerCalculateWatts+1,mcpUpdatePower@meterWattsHF+1
  1403                           
  1404                           ;MCP3909_Interface.c: 241: timerHFoutLast_ms = timerHFout_ms;
  1405  00088C  C02E  F0F0         	movff	mcpUpdatePower@timerHFout_ms,mcpUpdatePower@timerHFoutLast_ms
  1406  000890  C02F  F0F1         	movff	mcpUpdatePower@timerHFout_ms+1,mcpUpdatePower@timerHFoutLast_ms+1
  1407  000894  C030  F0F2         	movff	mcpUpdatePower@timerHFout_ms+2,mcpUpdatePower@timerHFoutLast_ms+2
  1408  000898  C031  F0F3         	movff	mcpUpdatePower@timerHFout_ms+3,mcpUpdatePower@timerHFoutLast_ms+3
  1409                           
  1410                           ;MCP3909_Interface.c: 242: }
  1411                           ;MCP3909_Interface.c: 243: }
  1412  00089C  D002               	goto	l543
  1413  00089E                     l541:
  1414                           
  1415                           ;MCP3909_Interface.c: 244: else
  1416                           ;MCP3909_Interface.c: 245: {
  1417                           ;MCP3909_Interface.c: 246: oneShotHFout = 0;
  1418  00089E  0E00               	movlw	0
  1419  0008A0  6E4A               	movwf	mcpUpdatePower@oneShotHFout,c
  1420  0008A2                     l543:
  1421                           
  1422                           ;MCP3909_Interface.c: 247: }
  1423                           ;MCP3909_Interface.c: 251: static int meterWattsLF = 0;
  1424                           ;MCP3909_Interface.c: 253: static bool oneShotLFout = 0;
  1425                           ;MCP3909_Interface.c: 256: if((PORTAbits.RA2 == 0))
  1426  0008A2  B480               	btfsc	3968,2,c	;volatile
  1427  0008A4  D059               	goto	l548
  1428                           
  1429                           ;MCP3909_Interface.c: 257: {
  1430                           ;MCP3909_Interface.c: 258: if( oneShotLFout == 0 )
  1431  0008A6  5049               	movf	mcpUpdatePower@oneShotLFout,w,c
  1432  0008A8  A4D8               	btfss	status,2,c
  1433  0008AA  D058               	goto	l553
  1434                           
  1435                           ;MCP3909_Interface.c: 259: {
  1436                           ;MCP3909_Interface.c: 263: oneShotLFout = 1;
  1437  0008AC  0E01               	movlw	1
  1438  0008AE  6E49               	movwf	mcpUpdatePower@oneShotLFout,c
  1439                           
  1440                           ;MCP3909_Interface.c: 265: unsigned long timerLFout_ms;
  1441                           ;MCP3909_Interface.c: 266: timerLFout_ms = timerGetCount( 1 );
  1442  0008B0  0E00               	movlw	0
  1443  0008B2  6E14               	movwf	timerGetCount@timerIndex+1,c
  1444  0008B4  0E01               	movlw	1
  1445  0008B6  6E13               	movwf	timerGetCount@timerIndex,c
  1446  0008B8  EC93  F00F         	call	_timerGetCount	;wreg free
  1447  0008BC  C013  F02A         	movff	?_timerGetCount,mcpUpdatePower@timerLFout_ms
  1448  0008C0  C014  F02B         	movff	?_timerGetCount+1,mcpUpdatePower@timerLFout_ms+1
  1449  0008C4  C015  F02C         	movff	?_timerGetCount+2,mcpUpdatePower@timerLFout_ms+2
  1450  0008C8  C016  F02D         	movff	?_timerGetCount+3,mcpUpdatePower@timerLFout_ms+3
  1451                           
  1452                           ;MCP3909_Interface.c: 267: timerResetCount( 1 );
  1453  0008CC  0E00               	movlw	0
  1454  0008CE  6E14               	movwf	timerResetCount@timerIndex+1,c
  1455  0008D0  0E01               	movlw	1
  1456  0008D2  6E13               	movwf	timerResetCount@timerIndex,c
  1457  0008D4  ECDD  F00F         	call	_timerResetCount	;wreg free
  1458                           
  1459                           ;MCP3909_Interface.c: 268: timerResetCount( 2 );
  1460  0008D8  0E00               	movlw	0
  1461  0008DA  6E14               	movwf	timerResetCount@timerIndex+1,c
  1462  0008DC  0E02               	movlw	2
  1463  0008DE  6E13               	movwf	timerResetCount@timerIndex,c
  1464  0008E0  ECDD  F00F         	call	_timerResetCount	;wreg free
  1465                           
  1466                           ;MCP3909_Interface.c: 271: meterWattsLF = powerCalculateWatts( timerLFout_ms, 0 );
  1467  0008E4  C02A  F023         	movff	mcpUpdatePower@timerLFout_ms,powerCalculateWatts@timer_ms
  1468  0008E8  C02B  F024         	movff	mcpUpdatePower@timerLFout_ms+1,powerCalculateWatts@timer_ms+1
  1469  0008EC  C02C  F025         	movff	mcpUpdatePower@timerLFout_ms+2,powerCalculateWatts@timer_ms+2
  1470  0008F0  C02D  F026         	movff	mcpUpdatePower@timerLFout_ms+3,powerCalculateWatts@timer_ms+3
  1471  0008F4  0E00               	movlw	0
  1472  0008F6  6E27               	movwf	powerCalculateWatts@outHF,c
  1473  0008F8  EC4B  F00C         	call	_powerCalculateWatts	;wreg free
  1474  0008FC  C023  F043         	movff	?_powerCalculateWatts,mcpUpdatePower@meterWattsLF
  1475  000900  C024  F044         	movff	?_powerCalculateWatts+1,mcpUpdatePower@meterWattsLF+1
  1476                           
  1477                           ;MCP3909_Interface.c: 274: meterEnergyUsedPart += 3467 * (unsigned long) 16;
  1478  000904  0EB0               	movlw	176
  1479  000906  0100               	movlb	0	; () banked
  1480  000908  27F4               	addwf	_meterEnergyUsedPart& (0+255),f,b
  1481  00090A  0ED8               	movlw	216
  1482  00090C  23F5               	addwfc	(_meterEnergyUsedPart+1)& (0+255),f,b
  1483  00090E  0E00               	movlw	0
  1484  000910  23F6               	addwfc	(_meterEnergyUsedPart+2)& (0+255),f,b
  1485  000912  0E00               	movlw	0
  1486  000914  23F7               	addwfc	(_meterEnergyUsedPart+3)& (0+255),f,b
  1487                           
  1488                           ;MCP3909_Interface.c: 275: while( meterEnergyUsedPart > 100000 )
  1489  000916  D014               	goto	l550
  1490  000918                     l4591:
  1491                           
  1492                           ; BSR set to: 0
  1493                           ;MCP3909_Interface.c: 276: {
  1494                           ;MCP3909_Interface.c: 277: meterEnergyUsed_global++;
  1495  000918  0E01               	movlw	1
  1496  00091A  263D               	addwf	_meterEnergyUsed_global,f,c
  1497  00091C  0E00               	movlw	0
  1498  00091E  223E               	addwfc	_meterEnergyUsed_global+1,f,c
  1499  000920  223F               	addwfc	_meterEnergyUsed_global+2,f,c
  1500  000922  2240               	addwfc	_meterEnergyUsed_global+3,f,c
  1501                           
  1502                           ;MCP3909_Interface.c: 278: meterEnergyUsedPart -= 100000;
  1503  000924  0EA0               	movlw	160
  1504  000926  5FF4               	subwf	_meterEnergyUsedPart& (0+255),f,b
  1505  000928  0E86               	movlw	134
  1506  00092A  5BF5               	subwfb	(_meterEnergyUsedPart+1)& (0+255),f,b
  1507  00092C  0E01               	movlw	1
  1508  00092E  5BF6               	subwfb	(_meterEnergyUsedPart+2)& (0+255),f,b
  1509  000930  0E00               	movlw	0
  1510  000932  5BF7               	subwfb	(_meterEnergyUsedPart+3)& (0+255),f,b
  1511                           
  1512                           ; BSR set to: 0
  1513                           ;MCP3909_Interface.c: 279: ledTestToggle( 3 );
  1514  000934  0E00               	movlw	0
  1515  000936  6E22               	movwf	ledTestToggle@ledNum+1,c
  1516  000938  0E03               	movlw	3
  1517  00093A  6E21               	movwf	ledTestToggle@ledNum,c
  1518  00093C  ECAB  F010         	call	_ledTestToggle	;wreg free
  1519  000940                     l550:
  1520  000940  0100               	movlb	0	; () banked
  1521  000942  51F7               	movf	(_meterEnergyUsedPart+3)& (0+255),w,b
  1522  000944  E1E9               	bnz	l4591
  1523  000946  0EA1               	movlw	161
  1524  000948  5DF4               	subwf	_meterEnergyUsedPart& (0+255),w,b
  1525  00094A  0E86               	movlw	134
  1526  00094C  59F5               	subwfb	(_meterEnergyUsedPart+1)& (0+255),w,b
  1527  00094E  0E01               	movlw	1
  1528  000950  59F6               	subwfb	(_meterEnergyUsedPart+2)& (0+255),w,b
  1529  000952  A0D8               	btfss	status,0,c
  1530  000954  D003               	goto	l553
  1531  000956  D7E0               	goto	l551
  1532  000958                     l548:
  1533                           
  1534                           ;MCP3909_Interface.c: 283: else
  1535                           ;MCP3909_Interface.c: 284: {
  1536                           ;MCP3909_Interface.c: 285: oneShotLFout = 0;
  1537                           
  1538                           ; BSR set to: 0
  1539  000958  0E00               	movlw	0
  1540  00095A  6E49               	movwf	mcpUpdatePower@oneShotLFout,c
  1541  00095C                     l553:
  1542                           
  1543                           ;MCP3909_Interface.c: 286: }
  1544                           ;MCP3909_Interface.c: 296: if( meterWattsLF > 500 )
  1545  00095C  BE44               	btfsc	mcpUpdatePower@meterWattsLF+1,7,c
  1546  00095E  D00B               	goto	l554
  1547  000960  0EF5               	movlw	245
  1548  000962  5C43               	subwf	mcpUpdatePower@meterWattsLF,w,c
  1549  000964  0E01               	movlw	1
  1550  000966  5844               	subwfb	mcpUpdatePower@meterWattsLF+1,w,c
  1551  000968  A0D8               	btfss	status,0,c
  1552  00096A  D005               	goto	l554
  1553                           
  1554                           ;MCP3909_Interface.c: 297: {
  1555                           ;MCP3909_Interface.c: 298: meterWatts_global = meterWattsLF;
  1556  00096C  C043  F0F8         	movff	mcpUpdatePower@meterWattsLF,_meterWatts_global
  1557  000970  C044  F0F9         	movff	mcpUpdatePower@meterWattsLF+1,_meterWatts_global+1
  1558  000974  D004               	goto	L2
  1559  000976                     l554:
  1560                           
  1561                           ;MCP3909_Interface.c: 300: else
  1562                           ;MCP3909_Interface.c: 301: {
  1563                           ;MCP3909_Interface.c: 302: meterWatts_global = meterWattsHF;
  1564                           
  1565                           ; BSR set to: 0
  1566  000976  C045  F0F8         	movff	mcpUpdatePower@meterWattsHF,_meterWatts_global
  1567  00097A  C046  F0F9         	movff	mcpUpdatePower@meterWattsHF+1,_meterWatts_global+1
  1568  00097E                     L2:
  1569  00097E  0100               	movlb	0	; () banked
  1570  000980  0E00               	movlw	0
  1571  000982  BFF9               	btfsc	(_meterWatts_global+1)& (0+255),7,b
  1572  000984  0EFF               	movlw	-1
  1573  000986  6FFA               	movwf	(_meterWatts_global+2)& (0+255),b
  1574  000988  6FFB               	movwf	(_meterWatts_global+3)& (0+255),b
  1575                           
  1576                           ; BSR set to: 0
  1577                           ;MCP3909_Interface.c: 303: }
  1578                           ;MCP3909_Interface.c: 306: powerReduction( timerHFoutLast_ms );
  1579                           
  1580                           ; BSR set to: 0
  1581  00098A  C0F0  F020         	movff	mcpUpdatePower@timerHFoutLast_ms,powerReduction@timerLast_ms
  1582  00098E  C0F1  F021         	movff	mcpUpdatePower@timerHFoutLast_ms+1,powerReduction@timerLast_ms+1
  1583  000992  C0F2  F022         	movff	mcpUpdatePower@timerHFoutLast_ms+2,powerReduction@timerLast_ms+2
  1584  000996  C0F3  F023         	movff	mcpUpdatePower@timerHFoutLast_ms+3,powerReduction@timerLast_ms+3
  1585  00099A  ECE9  F00A         	call	_powerReduction	;wreg free
  1586  00099E  0012               	return	
  1587  0009A0                     __end_of_mcpUpdatePower:
  1588                           	opt stack 0
  1589                           tblptru	equ	0xFF8
  1590                           intcon	equ	0xFF2
  1591                           postinc0	equ	0xFEE
  1592                           wreg	equ	0xFE8
  1593                           status	equ	0xFD8
  1594                           
  1595 ;; *************** function _timerResetCount *****************
  1596 ;; Defined at:
  1597 ;;		line 100 in file "Timer.c"
  1598 ;; Parameters:    Size  Location     Type
  1599 ;;  timerIndex      2   18[COMRAM] int 
  1600 ;; Auto vars:     Size  Location     Type
  1601 ;;		None
  1602 ;; Return value:  Size  Location     Type
  1603 ;;                  1    wreg      void 
  1604 ;; Registers used:
  1605 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1606 ;; Tracked objects:
  1607 ;;		On entry : 0/0
  1608 ;;		On exit  : 0/0
  1609 ;;		Unchanged: 0/0
  1610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1611 ;;      Params:         2       0       0       0       0       0       0
  1612 ;;      Locals:         0       0       0       0       0       0       0
  1613 ;;      Temps:          2       0       0       0       0       0       0
  1614 ;;      Totals:         4       0       0       0       0       0       0
  1615 ;;Total ram usage:        4 bytes
  1616 ;; Hardware stack levels used:    1
  1617 ;; Hardware stack levels required when called:    1
  1618 ;; This function calls:
  1619 ;;		Nothing
  1620 ;; This function is called by:
  1621 ;;		_mcpUpdatePower
  1622 ;; This function uses a non-reentrant model
  1623 ;;
  1624                           
  1625                           	psect	text3
  1626  001FBA                     __ptext3:
  1627                           	opt stack 0
  1628  001FBA                     _timerResetCount:
  1629                           	opt stack 28
  1630                           
  1631                           ;Timer.c: 102: timerCount_ms[timerIndex] = 0;
  1632                           
  1633                           ;incstack = 0
  1634  001FBA  0EE0               	movlw	low _timerCount_ms
  1635  001FBC  6E15               	movwf	??_timerResetCount& (0+255),c
  1636  001FBE  0E00               	movlw	high _timerCount_ms
  1637  001FC0  6E16               	movwf	(??_timerResetCount+1)& (0+255),c
  1638  001FC2  90D8               	bcf	status,0,c
  1639  001FC4  3413               	rlcf	timerResetCount@timerIndex,w,c
  1640  001FC6  6ED9               	movwf	fsr2l,c
  1641  001FC8  3414               	rlcf	timerResetCount@timerIndex+1,w,c
  1642  001FCA  6EDA               	movwf	fsr2h,c
  1643  001FCC  90D8               	bcf	status,0,c
  1644  001FCE  36D9               	rlcf	fsr2l,f,c
  1645  001FD0  36DA               	rlcf	fsr2h,f,c
  1646  001FD2  5015               	movf	??_timerResetCount,w,c
  1647  001FD4  26D9               	addwf	fsr2l,f,c
  1648  001FD6  5016               	movf	??_timerResetCount+1,w,c
  1649  001FD8  22DA               	addwfc	fsr2h,f,c
  1650  001FDA  6ADE               	clrf	postinc2,c
  1651  001FDC  6ADE               	clrf	postinc2,c
  1652  001FDE  6ADE               	clrf	postinc2,c
  1653  001FE0  6ADD               	clrf	postdec2,c
  1654  001FE2  0012               	return	
  1655  001FE4                     __end_of_timerResetCount:
  1656                           	opt stack 0
  1657                           tblptru	equ	0xFF8
  1658                           intcon	equ	0xFF2
  1659                           postinc0	equ	0xFEE
  1660                           wreg	equ	0xFE8
  1661                           postinc2	equ	0xFDE
  1662                           postdec2	equ	0xFDD
  1663                           fsr2h	equ	0xFDA
  1664                           fsr2l	equ	0xFD9
  1665                           status	equ	0xFD8
  1666                           
  1667 ;; *************** function _powerReduction *****************
  1668 ;; Defined at:
  1669 ;;		line 334 in file "MCP3909_Interface.c"
  1670 ;; Parameters:    Size  Location     Type
  1671 ;;  timerLast_ms    4   31[COMRAM] unsigned long 
  1672 ;; Auto vars:     Size  Location     Type
  1673 ;;  timerReduce_    4   35[COMRAM] unsigned long 
  1674 ;; Return value:  Size  Location     Type
  1675 ;;                  1    wreg      void 
  1676 ;; Registers used:
  1677 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1678 ;; Tracked objects:
  1679 ;;		On entry : 0/0
  1680 ;;		On exit  : 0/0
  1681 ;;		Unchanged: 0/0
  1682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1683 ;;      Params:         4       0       0       0       0       0       0
  1684 ;;      Locals:         4       0       0       0       0       0       0
  1685 ;;      Temps:          0       0       0       0       0       0       0
  1686 ;;      Totals:         8       0       0       0       0       0       0
  1687 ;;Total ram usage:        8 bytes
  1688 ;; Hardware stack levels used:    1
  1689 ;; Hardware stack levels required when called:    2
  1690 ;; This function calls:
  1691 ;;		___lldiv
  1692 ;;		_timerGetCount
  1693 ;; This function is called by:
  1694 ;;		_mcpUpdatePower
  1695 ;; This function uses a non-reentrant model
  1696 ;;
  1697                           
  1698                           	psect	text4
  1699  0015D2                     __ptext4:
  1700                           	opt stack 0
  1701  0015D2                     _powerReduction:
  1702                           	opt stack 27
  1703                           
  1704                           ;MCP3909_Interface.c: 343: unsigned long timerReduce_ms;
  1705                           ;MCP3909_Interface.c: 344: static int countReduce = 0;
  1706                           ;MCP3909_Interface.c: 346: timerReduce_ms = timerGetCount( 2 );
  1707                           
  1708                           ;incstack = 0
  1709  0015D2  0E00               	movlw	0
  1710  0015D4  6E14               	movwf	timerGetCount@timerIndex+1,c
  1711  0015D6  0E02               	movlw	2
  1712  0015D8  6E13               	movwf	timerGetCount@timerIndex,c
  1713  0015DA  EC93  F00F         	call	_timerGetCount	;wreg free
  1714  0015DE  C013  F024         	movff	?_timerGetCount,powerReduction@timerReduce_ms
  1715  0015E2  C014  F025         	movff	?_timerGetCount+1,powerReduction@timerReduce_ms+1
  1716  0015E6  C015  F026         	movff	?_timerGetCount+2,powerReduction@timerReduce_ms+2
  1717  0015EA  C016  F027         	movff	?_timerGetCount+3,powerReduction@timerReduce_ms+3
  1718                           
  1719                           ;MCP3909_Interface.c: 348: if( (timerReduce_ms > 90000) || (timerLast_ms == 0) )
  1720  0015EE  5027               	movf	powerReduction@timerReduce_ms+3,w,c
  1721  0015F0  E10E               	bnz	l4449
  1722  0015F2  0E91               	movlw	145
  1723  0015F4  5C24               	subwf	powerReduction@timerReduce_ms,w,c
  1724  0015F6  0E5F               	movlw	95
  1725  0015F8  5825               	subwfb	powerReduction@timerReduce_ms+1,w,c
  1726  0015FA  0E01               	movlw	1
  1727  0015FC  5826               	subwfb	powerReduction@timerReduce_ms+2,w,c
  1728  0015FE  B0D8               	btfsc	status,0,c
  1729  001600  D006               	goto	u3460
  1730  001602  5020               	movf	powerReduction@timerLast_ms,w,c
  1731  001604  1021               	iorwf	powerReduction@timerLast_ms+1,w,c
  1732  001606  1022               	iorwf	powerReduction@timerLast_ms+2,w,c
  1733  001608  1023               	iorwf	powerReduction@timerLast_ms+3,w,c
  1734  00160A  A4D8               	btfss	status,2,c
  1735  00160C  D00A               	goto	l566
  1736  00160E                     u3460:
  1737  00160E                     l4449:
  1738                           
  1739                           ;MCP3909_Interface.c: 349: {
  1740                           ;MCP3909_Interface.c: 350: meterWatts_global = 0;
  1741  00160E  0E00               	movlw	0
  1742  001610  0100               	movlb	0	; () banked
  1743  001612  6FF8               	movwf	_meterWatts_global& (0+255),b
  1744  001614  0E00               	movlw	0
  1745  001616  6FF9               	movwf	(_meterWatts_global+1)& (0+255),b
  1746  001618  0E00               	movlw	0
  1747  00161A  6FFA               	movwf	(_meterWatts_global+2)& (0+255),b
  1748  00161C  0E00               	movlw	0
  1749  00161E  6FFB               	movwf	(_meterWatts_global+3)& (0+255),b
  1750                           
  1751                           ;MCP3909_Interface.c: 351: }
  1752  001620  0012               	return	
  1753  001622                     l566:
  1754                           
  1755                           ;MCP3909_Interface.c: 352: else if( timerReduce_ms > timerLast_ms )
  1756                           
  1757                           ; BSR set to: 0
  1758  001622  5024               	movf	powerReduction@timerReduce_ms,w,c
  1759  001624  5C20               	subwf	powerReduction@timerLast_ms,w,c
  1760  001626  5025               	movf	powerReduction@timerReduce_ms+1,w,c
  1761  001628  5821               	subwfb	powerReduction@timerLast_ms+1,w,c
  1762  00162A  5026               	movf	powerReduction@timerReduce_ms+2,w,c
  1763  00162C  5822               	subwfb	powerReduction@timerLast_ms+2,w,c
  1764  00162E  5027               	movf	powerReduction@timerReduce_ms+3,w,c
  1765  001630  5823               	subwfb	powerReduction@timerLast_ms+3,w,c
  1766  001632  B0D8               	btfsc	status,0,c
  1767  001634  0012               	return	
  1768                           
  1769                           ;MCP3909_Interface.c: 353: {
  1770                           ;MCP3909_Interface.c: 354: meterWatts_global = (((((unsigned long) 3467 * (unsigned long
      +                          ) 3600) / ((unsigned long) 100000 / (unsigned long) 1000))) * (unsigned long) 1) / (unsi
      +                          gned long) timerReduce_ms;
  1771  001636  0E8C               	movlw	140
  1772  001638  6E13               	movwf	___lldiv@dividend,c
  1773  00163A  0EE7               	movlw	231
  1774  00163C  6E14               	movwf	___lldiv@dividend+1,c
  1775  00163E  0E01               	movlw	1
  1776  001640  6E15               	movwf	___lldiv@dividend+2,c
  1777  001642  0E00               	movlw	0
  1778  001644  6E16               	movwf	___lldiv@dividend+3,c
  1779  001646  C024  F017         	movff	powerReduction@timerReduce_ms,___lldiv@divisor
  1780  00164A  C025  F018         	movff	powerReduction@timerReduce_ms+1,___lldiv@divisor+1
  1781  00164E  C026  F019         	movff	powerReduction@timerReduce_ms+2,___lldiv@divisor+2
  1782  001652  C027  F01A         	movff	powerReduction@timerReduce_ms+3,___lldiv@divisor+3
  1783  001656  EC0A  F00C         	call	___lldiv	;wreg free
  1784  00165A  C013  F0F8         	movff	?___lldiv,_meterWatts_global
  1785  00165E  C014  F0F9         	movff	?___lldiv+1,_meterWatts_global+1
  1786  001662  C015  F0FA         	movff	?___lldiv+2,_meterWatts_global+2
  1787  001666  C016  F0FB         	movff	?___lldiv+3,_meterWatts_global+3
  1788  00166A  0012               	return	
  1789  00166C                     __end_of_powerReduction:
  1790                           	opt stack 0
  1791                           tblptru	equ	0xFF8
  1792                           intcon	equ	0xFF2
  1793                           postinc0	equ	0xFEE
  1794                           wreg	equ	0xFE8
  1795                           postinc2	equ	0xFDE
  1796                           postdec2	equ	0xFDD
  1797                           fsr2h	equ	0xFDA
  1798                           fsr2l	equ	0xFD9
  1799                           status	equ	0xFD8
  1800                           
  1801 ;; *************** function _timerGetCount *****************
  1802 ;; Defined at:
  1803 ;;		line 95 in file "Timer.c"
  1804 ;; Parameters:    Size  Location     Type
  1805 ;;  timerIndex      2   18[COMRAM] int 
  1806 ;; Auto vars:     Size  Location     Type
  1807 ;;		None
  1808 ;; Return value:  Size  Location     Type
  1809 ;;                  4   18[COMRAM] unsigned long 
  1810 ;; Registers used:
  1811 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1812 ;; Tracked objects:
  1813 ;;		On entry : 0/0
  1814 ;;		On exit  : 0/0
  1815 ;;		Unchanged: 0/0
  1816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1817 ;;      Params:         4       0       0       0       0       0       0
  1818 ;;      Locals:         0       0       0       0       0       0       0
  1819 ;;      Temps:          2       0       0       0       0       0       0
  1820 ;;      Totals:         6       0       0       0       0       0       0
  1821 ;;Total ram usage:        6 bytes
  1822 ;; Hardware stack levels used:    1
  1823 ;; Hardware stack levels required when called:    1
  1824 ;; This function calls:
  1825 ;;		Nothing
  1826 ;; This function is called by:
  1827 ;;		_main
  1828 ;;		_mcpUpdatePower
  1829 ;;		_powerReduction
  1830 ;; This function uses a non-reentrant model
  1831 ;;
  1832                           
  1833                           	psect	text5
  1834  001F26                     __ptext5:
  1835                           	opt stack 0
  1836  001F26                     _timerGetCount:
  1837                           	opt stack 29
  1838                           
  1839                           ;Timer.c: 97: return timerCount_ms[timerIndex];
  1840                           
  1841                           ;incstack = 0
  1842  001F26  0EE0               	movlw	low _timerCount_ms
  1843  001F28  6E17               	movwf	??_timerGetCount& (0+255),c
  1844  001F2A  0E00               	movlw	high _timerCount_ms
  1845  001F2C  6E18               	movwf	(??_timerGetCount+1)& (0+255),c
  1846  001F2E  90D8               	bcf	status,0,c
  1847  001F30  3413               	rlcf	timerGetCount@timerIndex,w,c
  1848  001F32  6ED9               	movwf	fsr2l,c
  1849  001F34  3414               	rlcf	timerGetCount@timerIndex+1,w,c
  1850  001F36  6EDA               	movwf	fsr2h,c
  1851  001F38  90D8               	bcf	status,0,c
  1852  001F3A  36D9               	rlcf	fsr2l,f,c
  1853  001F3C  36DA               	rlcf	fsr2h,f,c
  1854  001F3E  5017               	movf	??_timerGetCount,w,c
  1855  001F40  26D9               	addwf	fsr2l,f,c
  1856  001F42  5018               	movf	??_timerGetCount+1,w,c
  1857  001F44  22DA               	addwfc	fsr2h,f,c
  1858  001F46  CFDE F013          	movff	postinc2,?_timerGetCount
  1859  001F4A  CFDE F014          	movff	postinc2,?_timerGetCount+1
  1860  001F4E  CFDE F015          	movff	postinc2,?_timerGetCount+2
  1861  001F52  CFDE F016          	movff	postinc2,?_timerGetCount+3
  1862  001F56  0012               	return	
  1863  001F58                     __end_of_timerGetCount:
  1864                           	opt stack 0
  1865                           tblptru	equ	0xFF8
  1866                           intcon	equ	0xFF2
  1867                           postinc0	equ	0xFEE
  1868                           wreg	equ	0xFE8
  1869                           postinc2	equ	0xFDE
  1870                           postdec2	equ	0xFDD
  1871                           fsr2h	equ	0xFDA
  1872                           fsr2l	equ	0xFD9
  1873                           status	equ	0xFD8
  1874                           
  1875 ;; *************** function _powerCalculateWatts *****************
  1876 ;; Defined at:
  1877 ;;		line 311 in file "MCP3909_Interface.c"
  1878 ;; Parameters:    Size  Location     Type
  1879 ;;  timer_ms        4   34[COMRAM] unsigned long 
  1880 ;;  outHF           1   38[COMRAM] unsigned char 
  1881 ;; Auto vars:     Size  Location     Type
  1882 ;;  calcWatts       2   39[COMRAM] int 
  1883 ;; Return value:  Size  Location     Type
  1884 ;;                  4   34[COMRAM] unsigned long 
  1885 ;; Registers used:
  1886 ;;		wreg, status,2, status,0, cstack
  1887 ;; Tracked objects:
  1888 ;;		On entry : 0/0
  1889 ;;		On exit  : 0/0
  1890 ;;		Unchanged: 0/0
  1891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1892 ;;      Params:         5       0       0       0       0       0       0
  1893 ;;      Locals:         2       0       0       0       0       0       0
  1894 ;;      Temps:          0       0       0       0       0       0       0
  1895 ;;      Totals:         7       0       0       0       0       0       0
  1896 ;;Total ram usage:        7 bytes
  1897 ;; Hardware stack levels used:    1
  1898 ;; Hardware stack levels required when called:    4
  1899 ;; This function calls:
  1900 ;;		___lldiv
  1901 ;;		_ledTestToggle
  1902 ;; This function is called by:
  1903 ;;		_mcpUpdatePower
  1904 ;; This function uses a non-reentrant model
  1905 ;;
  1906                           
  1907                           	psect	text6
  1908  001896                     __ptext6:
  1909                           	opt stack 0
  1910  001896                     _powerCalculateWatts:
  1911                           	opt stack 25
  1912                           
  1913                           ;MCP3909_Interface.c: 317: int calcWatts;
  1914                           ;MCP3909_Interface.c: 319: if( outHF == 1 )
  1915                           
  1916                           ;incstack = 0
  1917  001896  0427               	decf	powerCalculateWatts@outHF,w,c
  1918  001898  A4D8               	btfss	status,2,c
  1919  00189A  D017               	goto	l559
  1920                           
  1921                           ;MCP3909_Interface.c: 320: {
  1922                           ;MCP3909_Interface.c: 322: calcWatts = (((((unsigned long) 3467 * (unsigned long) 3600) 
      +                          / ((unsigned long) 100000 / (unsigned long) 1000))) * (unsigned long) 1) / (unsigned lon
      +                          g) timer_ms;
  1923  00189C  0E8C               	movlw	140
  1924  00189E  6E13               	movwf	___lldiv@dividend,c
  1925  0018A0  0EE7               	movlw	231
  1926  0018A2  6E14               	movwf	___lldiv@dividend+1,c
  1927  0018A4  0E01               	movlw	1
  1928  0018A6  6E15               	movwf	___lldiv@dividend+2,c
  1929  0018A8  0E00               	movlw	0
  1930  0018AA  6E16               	movwf	___lldiv@dividend+3,c
  1931  0018AC  C023  F017         	movff	powerCalculateWatts@timer_ms,___lldiv@divisor
  1932  0018B0  C024  F018         	movff	powerCalculateWatts@timer_ms+1,___lldiv@divisor+1
  1933  0018B4  C025  F019         	movff	powerCalculateWatts@timer_ms+2,___lldiv@divisor+2
  1934  0018B8  C026  F01A         	movff	powerCalculateWatts@timer_ms+3,___lldiv@divisor+3
  1935  0018BC  EC0A  F00C         	call	___lldiv	;wreg free
  1936  0018C0  C013  F028         	movff	?___lldiv,powerCalculateWatts@calcWatts
  1937  0018C4  C014  F029         	movff	?___lldiv+1,powerCalculateWatts@calcWatts+1
  1938                           
  1939                           ;MCP3909_Interface.c: 323: }
  1940  0018C8  D01C               	goto	l560
  1941  0018CA                     l559:
  1942                           
  1943                           ;MCP3909_Interface.c: 324: else
  1944                           ;MCP3909_Interface.c: 325: {
  1945                           ;MCP3909_Interface.c: 327: calcWatts = (((((unsigned long) 3467 * (unsigned long) 3600 *
      +                           (unsigned long) 16) / ((unsigned long) 100000 / (unsigned long) 1000))) * (unsigned lon
      +                          g) 1) / (unsigned long) timer_ms;
  1946  0018CA  0EC0               	movlw	192
  1947  0018CC  6E13               	movwf	___lldiv@dividend,c
  1948  0018CE  0E78               	movlw	120
  1949  0018D0  6E14               	movwf	___lldiv@dividend+1,c
  1950  0018D2  0E1E               	movlw	30
  1951  0018D4  6E15               	movwf	___lldiv@dividend+2,c
  1952  0018D6  0E00               	movlw	0
  1953  0018D8  6E16               	movwf	___lldiv@dividend+3,c
  1954  0018DA  C023  F017         	movff	powerCalculateWatts@timer_ms,___lldiv@divisor
  1955  0018DE  C024  F018         	movff	powerCalculateWatts@timer_ms+1,___lldiv@divisor+1
  1956  0018E2  C025  F019         	movff	powerCalculateWatts@timer_ms+2,___lldiv@divisor+2
  1957  0018E6  C026  F01A         	movff	powerCalculateWatts@timer_ms+3,___lldiv@divisor+3
  1958  0018EA  EC0A  F00C         	call	___lldiv	;wreg free
  1959  0018EE  C013  F028         	movff	?___lldiv,powerCalculateWatts@calcWatts
  1960  0018F2  C014  F029         	movff	?___lldiv+1,powerCalculateWatts@calcWatts+1
  1961                           
  1962                           ;MCP3909_Interface.c: 328: ledTestToggle( 2 );
  1963  0018F6  0E00               	movlw	0
  1964  0018F8  6E22               	movwf	ledTestToggle@ledNum+1,c
  1965  0018FA  0E02               	movlw	2
  1966  0018FC  6E21               	movwf	ledTestToggle@ledNum,c
  1967  0018FE  ECAB  F010         	call	_ledTestToggle	;wreg free
  1968  001902                     l560:
  1969                           
  1970                           ;MCP3909_Interface.c: 329: }
  1971                           ;MCP3909_Interface.c: 331: return calcWatts;
  1972  001902  C028  F023         	movff	powerCalculateWatts@calcWatts,?_powerCalculateWatts
  1973  001906  C029  F024         	movff	powerCalculateWatts@calcWatts+1,?_powerCalculateWatts+1
  1974  00190A  0E00               	movlw	0
  1975  00190C  BE24               	btfsc	?_powerCalculateWatts+1,7,c
  1976  00190E  0EFF               	movlw	-1
  1977  001910  6E25               	movwf	?_powerCalculateWatts+2,c
  1978  001912  6E26               	movwf	?_powerCalculateWatts+3,c
  1979  001914  0012               	return	
  1980  001916                     __end_of_powerCalculateWatts:
  1981                           	opt stack 0
  1982                           tblptru	equ	0xFF8
  1983                           intcon	equ	0xFF2
  1984                           postinc0	equ	0xFEE
  1985                           wreg	equ	0xFE8
  1986                           postinc2	equ	0xFDE
  1987                           postdec2	equ	0xFDD
  1988                           fsr2h	equ	0xFDA
  1989                           fsr2l	equ	0xFD9
  1990                           status	equ	0xFD8
  1991                           
  1992 ;; *************** function _ledTestToggle *****************
  1993 ;; Defined at:
  1994 ;;		line 276 in file "LEDControl.c"
  1995 ;; Parameters:    Size  Location     Type
  1996 ;;  ledNum          2   32[COMRAM] int 
  1997 ;; Auto vars:     Size  Location     Type
  1998 ;;		None
  1999 ;; Return value:  Size  Location     Type
  2000 ;;                  1    wreg      void 
  2001 ;; Registers used:
  2002 ;;		wreg, status,2, status,0, cstack
  2003 ;; Tracked objects:
  2004 ;;		On entry : 0/0
  2005 ;;		On exit  : 0/0
  2006 ;;		Unchanged: 0/0
  2007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2008 ;;      Params:         2       0       0       0       0       0       0
  2009 ;;      Locals:         0       0       0       0       0       0       0
  2010 ;;      Temps:          0       0       0       0       0       0       0
  2011 ;;      Totals:         2       0       0       0       0       0       0
  2012 ;;Total ram usage:        2 bytes
  2013 ;; Hardware stack levels used:    1
  2014 ;; Hardware stack levels required when called:    3
  2015 ;; This function calls:
  2016 ;;		_ledToggle
  2017 ;; This function is called by:
  2018 ;;		_main
  2019 ;;		_mcpUpdatePower
  2020 ;;		_powerCalculateWatts
  2021 ;; This function uses a non-reentrant model
  2022 ;;
  2023                           
  2024                           	psect	text7
  2025  002156                     __ptext7:
  2026                           	opt stack 0
  2027  002156                     _ledTestToggle:
  2028                           	opt stack 25
  2029                           
  2030                           ;LEDControl.c: 279: {
  2031                           ;LEDControl.c: 280: ledToggle( ledNum );
  2032                           
  2033                           ;incstack = 0
  2034  002156  C021  F019         	movff	ledTestToggle@ledNum,ledToggle@ledNum
  2035  00215A  C022  F01A         	movff	ledTestToggle@ledNum+1,ledToggle@ledNum+1
  2036  00215E  EC8B  F00C         	call	_ledToggle	;wreg free
  2037  002162  0012               	return	
  2038  002164                     __end_of_ledTestToggle:
  2039                           	opt stack 0
  2040                           tblptru	equ	0xFF8
  2041                           intcon	equ	0xFF2
  2042                           postinc0	equ	0xFEE
  2043                           wreg	equ	0xFE8
  2044                           postinc2	equ	0xFDE
  2045                           postdec2	equ	0xFDD
  2046                           fsr2h	equ	0xFDA
  2047                           fsr2l	equ	0xFD9
  2048                           status	equ	0xFD8
  2049                           
  2050 ;; *************** function _ledGoToggle *****************
  2051 ;; Defined at:
  2052 ;;		line 286 in file "LEDControl.c"
  2053 ;; Parameters:    Size  Location     Type
  2054 ;;  ledNum          2   32[COMRAM] int 
  2055 ;; Auto vars:     Size  Location     Type
  2056 ;;		None
  2057 ;; Return value:  Size  Location     Type
  2058 ;;                  1    wreg      void 
  2059 ;; Registers used:
  2060 ;;		wreg, status,2, status,0, cstack
  2061 ;; Tracked objects:
  2062 ;;		On entry : 0/0
  2063 ;;		On exit  : 0/0
  2064 ;;		Unchanged: 0/0
  2065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2066 ;;      Params:         2       0       0       0       0       0       0
  2067 ;;      Locals:         0       0       0       0       0       0       0
  2068 ;;      Temps:          0       0       0       0       0       0       0
  2069 ;;      Totals:         2       0       0       0       0       0       0
  2070 ;;Total ram usage:        2 bytes
  2071 ;; Hardware stack levels used:    1
  2072 ;; Hardware stack levels required when called:    3
  2073 ;; This function calls:
  2074 ;;		_ledToggle
  2075 ;; This function is called by:
  2076 ;;		_mcpUpdatePower
  2077 ;; This function uses a non-reentrant model
  2078 ;;
  2079                           
  2080                           	psect	text8
  2081  002180                     __ptext8:
  2082                           	opt stack 0
  2083  002180                     _ledGoToggle:
  2084                           	opt stack 26
  2085                           
  2086                           ;LEDControl.c: 288: if( 1 != 1 )
  2087                           
  2088                           ;incstack = 0
  2089  002180  0012               	return	
  2090  002182                     __end_of_ledGoToggle:
  2091                           	opt stack 0
  2092                           tblptru	equ	0xFF8
  2093                           intcon	equ	0xFF2
  2094                           postinc0	equ	0xFEE
  2095                           wreg	equ	0xFE8
  2096                           postinc2	equ	0xFDE
  2097                           postdec2	equ	0xFDD
  2098                           fsr2h	equ	0xFDA
  2099                           fsr2l	equ	0xFD9
  2100                           status	equ	0xFD8
  2101                           
  2102 ;; *************** function _ledToggle *****************
  2103 ;; Defined at:
  2104 ;;		line 243 in file "LEDControl.c"
  2105 ;; Parameters:    Size  Location     Type
  2106 ;;  ledNum          2   24[COMRAM] int 
  2107 ;; Auto vars:     Size  Location     Type
  2108 ;;  getValue        2   30[COMRAM] int 
  2109 ;;  setValue        2   28[COMRAM] int 
  2110 ;; Return value:  Size  Location     Type
  2111 ;;                  1    wreg      void 
  2112 ;; Registers used:
  2113 ;;		wreg, status,2, status,0, cstack
  2114 ;; Tracked objects:
  2115 ;;		On entry : 0/0
  2116 ;;		On exit  : 0/0
  2117 ;;		Unchanged: 0/0
  2118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2119 ;;      Params:         2       0       0       0       0       0       0
  2120 ;;      Locals:         4       0       0       0       0       0       0
  2121 ;;      Temps:          2       0       0       0       0       0       0
  2122 ;;      Totals:         8       0       0       0       0       0       0
  2123 ;;Total ram usage:        8 bytes
  2124 ;; Hardware stack levels used:    1
  2125 ;; Hardware stack levels required when called:    2
  2126 ;; This function calls:
  2127 ;;		_ledSet
  2128 ;; This function is called by:
  2129 ;;		_ledTestToggle
  2130 ;;		_ledGoToggle
  2131 ;; This function uses a non-reentrant model
  2132 ;;
  2133                           
  2134                           	psect	text9
  2135  001916                     __ptext9:
  2136                           	opt stack 0
  2137  001916                     _ledToggle:
  2138                           	opt stack 25
  2139                           
  2140                           ;LEDControl.c: 246: int getValue;
  2141                           ;LEDControl.c: 247: int setValue;
  2142                           ;LEDControl.c: 249: switch( ledNum )
  2143                           
  2144                           ;incstack = 0
  2145  001916  D011               	goto	l85
  2146  001918                     
  2147                           ;LEDControl.c: 252: getValue = PORTBbits.RB4;
  2148  001918  A881               	btfss	3969,4,c	;volatile
  2149  00191A  D00D               	goto	u2880
  2150  00191C  D009               	goto	u2881
  2151  00191E                     u2868:
  2152  00191E  501B               	movf	??_ledToggle,w,c
  2153  001920  6E1F               	movwf	ledToggle@getValue,c
  2154  001922  6A20               	clrf	ledToggle@getValue+1,c
  2155                           
  2156                           ;LEDControl.c: 253: break;
  2157  001924  D01C               	goto	l87
  2158  001926                     
  2159                           ;LEDControl.c: 255: getValue = PORTCbits.RC1;
  2160  001926  A282               	btfss	3970,1,c	;volatile
  2161  001928  D006               	goto	u2880
  2162  00192A  D002               	goto	u2881
  2163  00192C                     
  2164                           ;LEDControl.c: 258: getValue = PORTCbits.RC0;
  2165  00192C  A082               	btfss	3970,0,c	;volatile
  2166  00192E  D003               	goto	u2880
  2167  001930                     u2881:
  2168  001930  6A1B               	clrf	??_ledToggle& (0+255),c
  2169  001932  2A1B               	incf	??_ledToggle& (0+255),f,c
  2170  001934  D7F4               	goto	u2868
  2171  001936                     u2880:
  2172  001936  6A1B               	clrf	??_ledToggle& (0+255),c
  2173  001938  D7F2               	goto	u2868
  2174  00193A                     l85:
  2175  00193A  C019  F01B         	movff	ledToggle@ledNum,??_ledToggle
  2176  00193E  C01A  F01C         	movff	ledToggle@ledNum+1,??_ledToggle+1
  2177                           
  2178                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2179                           ; Switch size 1, requested type "space"
  2180                           ; Number of cases is 1, Range of values is 0 to 0
  2181                           ; switch strategies available:
  2182                           ; Name         Instructions Cycles
  2183                           ; simple_byte            4     3 (average)
  2184                           ;	Chosen strategy is simple_byte
  2185  001942  501C               	movf	??_ledToggle+1,w,c
  2186  001944  0A00               	xorlw	0	; case 0
  2187  001946  A4D8               	btfss	status,2,c
  2188  001948  D00A               	goto	l87
  2189                           
  2190                           ; Switch size 1, requested type "space"
  2191                           ; Number of cases is 3, Range of values is 1 to 3
  2192                           ; switch strategies available:
  2193                           ; Name         Instructions Cycles
  2194                           ; simple_byte           10     6 (average)
  2195                           ;	Chosen strategy is simple_byte
  2196  00194A  501B               	movf	??_ledToggle,w,c
  2197  00194C  0A01               	xorlw	1	; case 1
  2198  00194E  B4D8               	btfsc	status,2,c
  2199  001950  D7E3               	goto	l86
  2200  001952  0A03               	xorlw	3	; case 2
  2201  001954  B4D8               	btfsc	status,2,c
  2202  001956  D7E7               	goto	l88
  2203  001958  0A01               	xorlw	1	; case 3
  2204  00195A  B4D8               	btfsc	status,2,c
  2205  00195C  D7E7               	goto	l89
  2206  00195E                     l87:
  2207                           
  2208                           ;LEDControl.c: 262: if( getValue == 0 )
  2209  00195E  501F               	movf	ledToggle@getValue,w,c
  2210  001960  1020               	iorwf	ledToggle@getValue+1,w,c
  2211  001962  A4D8               	btfss	status,2,c
  2212  001964  D004               	goto	l90
  2213                           
  2214                           ;LEDControl.c: 263: {
  2215                           ;LEDControl.c: 264: setValue = 1;
  2216  001966  0E00               	movlw	0
  2217  001968  6E1E               	movwf	ledToggle@setValue+1,c
  2218  00196A  0E01               	movlw	1
  2219  00196C  D003               	goto	L3
  2220  00196E                     l90:
  2221                           
  2222                           ;LEDControl.c: 266: else
  2223                           ;LEDControl.c: 267: {
  2224                           ;LEDControl.c: 268: setValue = 0;
  2225  00196E  0E00               	movlw	0
  2226  001970  6E1E               	movwf	ledToggle@setValue+1,c
  2227  001972  0E00               	movlw	0
  2228  001974                     L3:
  2229  001974  6E1D               	movwf	ledToggle@setValue,c
  2230                           
  2231                           ;LEDControl.c: 269: }
  2232                           ;LEDControl.c: 271: ledSet( ledNum, setValue );
  2233  001976  C019  F013         	movff	ledToggle@ledNum,ledSet@ledNum
  2234  00197A  C01A  F014         	movff	ledToggle@ledNum+1,ledSet@ledNum+1
  2235  00197E  C01D  F015         	movff	ledToggle@setValue,ledSet@setValue
  2236  001982  C01E  F016         	movff	ledToggle@setValue+1,ledSet@setValue+1
  2237  001986  EC41  F00E         	call	_ledSet	;wreg free
  2238  00198A  0012               	return	
  2239  00198C                     __end_of_ledToggle:
  2240                           	opt stack 0
  2241                           tblptru	equ	0xFF8
  2242                           intcon	equ	0xFF2
  2243                           postinc0	equ	0xFEE
  2244                           wreg	equ	0xFE8
  2245                           postinc2	equ	0xFDE
  2246                           postdec2	equ	0xFDD
  2247                           fsr2h	equ	0xFDA
  2248                           fsr2l	equ	0xFD9
  2249                           status	equ	0xFD8
  2250                           
  2251 ;; *************** function _mcpInit *****************
  2252 ;; Defined at:
  2253 ;;		line 155 in file "MCP3909_Interface.c"
  2254 ;; Parameters:    Size  Location     Type
  2255 ;;		None
  2256 ;; Auto vars:     Size  Location     Type
  2257 ;;		None
  2258 ;; Return value:  Size  Location     Type
  2259 ;;                  1    wreg      void 
  2260 ;; Registers used:
  2261 ;;		wreg, status,2, status,0, cstack
  2262 ;; Tracked objects:
  2263 ;;		On entry : 0/0
  2264 ;;		On exit  : 0/0
  2265 ;;		Unchanged: 0/0
  2266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2267 ;;      Params:         0       0       0       0       0       0       0
  2268 ;;      Locals:         0       0       0       0       0       0       0
  2269 ;;      Temps:          0       0       0       0       0       0       0
  2270 ;;      Totals:         0       0       0       0       0       0       0
  2271 ;;Total ram usage:        0 bytes
  2272 ;; Hardware stack levels used:    1
  2273 ;; Hardware stack levels required when called:    3
  2274 ;; This function calls:
  2275 ;;		_delayMS10
  2276 ;;		_mcpInitF
  2277 ;; This function is called by:
  2278 ;;		_main
  2279 ;; This function uses a non-reentrant model
  2280 ;;
  2281                           
  2282                           	psect	text10
  2283  001FE4                     __ptext10:
  2284                           	opt stack 0
  2285  001FE4                     _mcpInit:
  2286                           	opt stack 27
  2287                           
  2288                           ;MCP3909_Interface.c: 157: TRISAbits.TRISA3 = 1;
  2289                           
  2290                           ;incstack = 0
  2291  001FE4  8692               	bsf	3986,3,c	;volatile
  2292                           
  2293                           ;MCP3909_Interface.c: 158: TRISAbits.TRISA2 = 1;
  2294  001FE6  8492               	bsf	3986,2,c	;volatile
  2295                           
  2296                           ;MCP3909_Interface.c: 159: TRISAbits.TRISA4 = 1;
  2297  001FE8  8892               	bsf	3986,4,c	;volatile
  2298                           
  2299                           ;MCP3909_Interface.c: 161: meterEnergyUsedPart = 0;
  2300  001FEA  0E00               	movlw	0
  2301  001FEC  0100               	movlb	0	; () banked
  2302  001FEE  6FF4               	movwf	_meterEnergyUsedPart& (0+255),b
  2303  001FF0  0E00               	movlw	0
  2304  001FF2  6FF5               	movwf	(_meterEnergyUsedPart+1)& (0+255),b
  2305  001FF4  0E00               	movlw	0
  2306  001FF6  6FF6               	movwf	(_meterEnergyUsedPart+2)& (0+255),b
  2307  001FF8  0E00               	movlw	0
  2308  001FFA  6FF7               	movwf	(_meterEnergyUsedPart+3)& (0+255),b
  2309                           
  2310                           ; BSR set to: 0
  2311                           ;MCP3909_Interface.c: 163: delayMS10( 100 );
  2312  001FFC  0E00               	movlw	0
  2313  001FFE  6E14               	movwf	delayMS10@count+1,c
  2314  002000  0E64               	movlw	100
  2315  002002  6E13               	movwf	delayMS10@count,c
  2316  002004  ECAC  F00F         	call	_delayMS10	;wreg free
  2317                           
  2318                           ;MCP3909_Interface.c: 165: mcpInitF( );
  2319  002008  ECC6  F00C         	call	_mcpInitF	;wreg free
  2320  00200C  0012               	return	
  2321  00200E                     __end_of_mcpInit:
  2322                           	opt stack 0
  2323                           tblptru	equ	0xFF8
  2324                           intcon	equ	0xFF2
  2325                           postinc0	equ	0xFEE
  2326                           wreg	equ	0xFE8
  2327                           postinc2	equ	0xFDE
  2328                           postdec2	equ	0xFDD
  2329                           fsr2h	equ	0xFDA
  2330                           fsr2l	equ	0xFD9
  2331                           status	equ	0xFD8
  2332                           
  2333 ;; *************** function _mcpInitF *****************
  2334 ;; Defined at:
  2335 ;;		line 170 in file "MCP3909_Interface.c"
  2336 ;; Parameters:    Size  Location     Type
  2337 ;;		None
  2338 ;; Auto vars:     Size  Location     Type
  2339 ;;		None
  2340 ;; Return value:  Size  Location     Type
  2341 ;;                  1    wreg      void 
  2342 ;; Registers used:
  2343 ;;		wreg, status,2, status,0, cstack
  2344 ;; Tracked objects:
  2345 ;;		On entry : 0/0
  2346 ;;		On exit  : 0/0
  2347 ;;		Unchanged: 0/0
  2348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2349 ;;      Params:         0       0       0       0       0       0       0
  2350 ;;      Locals:         0       0       0       0       0       0       0
  2351 ;;      Temps:          1       0       0       0       0       0       0
  2352 ;;      Totals:         1       0       0       0       0       0       0
  2353 ;;Total ram usage:        1 bytes
  2354 ;; Hardware stack levels used:    1
  2355 ;; Hardware stack levels required when called:    2
  2356 ;; This function calls:
  2357 ;;		_delayMS10
  2358 ;; This function is called by:
  2359 ;;		_mcpInit
  2360 ;; This function uses a non-reentrant model
  2361 ;;
  2362                           
  2363                           	psect	text11
  2364  00198C                     __ptext11:
  2365                           	opt stack 0
  2366  00198C                     _mcpInitF:
  2367                           	opt stack 27
  2368                           
  2369                           ;MCP3909_Interface.c: 175: TRISCbits.TRISC6 = 0;
  2370                           
  2371                           ;incstack = 0
  2372  00198C  9C94               	bcf	3988,6,c	;volatile
  2373                           
  2374                           ;MCP3909_Interface.c: 176: TRISCbits.TRISC7 = 0;
  2375  00198E  9E94               	bcf	3988,7,c	;volatile
  2376                           
  2377                           ;MCP3909_Interface.c: 177: TRISCbits.TRISC4 = 0;
  2378  001990  9894               	bcf	3988,4,c	;volatile
  2379                           
  2380                           ;MCP3909_Interface.c: 178: TRISCbits.TRISC3 = 0;
  2381  001992  9694               	bcf	3988,3,c	;volatile
  2382                           
  2383                           ;MCP3909_Interface.c: 181: LATCbits.LC7 = 0;
  2384  001994  9E8B               	bcf	3979,7,c	;volatile
  2385                           
  2386                           ;MCP3909_Interface.c: 182: LATCbits.LC4 = 0;
  2387  001996  988B               	bcf	3979,4,c	;volatile
  2388                           
  2389                           ;MCP3909_Interface.c: 183: LATCbits.LC4 = 0;
  2390  001998  988B               	bcf	3979,4,c	;volatile
  2391                           
  2392                           ;MCP3909_Interface.c: 185: _delay((unsigned long)((5)*(16000000UL/4000.0)));
  2393  00199A  0E1A               	movlw	26
  2394  00199C  6E18               	movwf	??_mcpInitF& (0+255),c
  2395  00199E  0EF8               	movlw	248
  2396  0019A0                     u3607:
  2397  0019A0  2EE8               	decfsz	wreg,f,c
  2398  0019A2  D7FE               	bra	u3607
  2399  0019A4  2E18               	decfsz	??_mcpInitF& (0+255),f,c
  2400  0019A6  D7FC               	bra	u3607
  2401  0019A8  D000               	nop2	
  2402                           
  2403                           ;MCP3909_Interface.c: 186: LATCbits.LATC6 = 0;
  2404  0019AA  9C8B               	bcf	3979,6,c	;volatile
  2405                           
  2406                           ;MCP3909_Interface.c: 187: _delay((unsigned long)((5)*(16000000UL/4000.0)));
  2407  0019AC  0E1A               	movlw	26
  2408  0019AE  6E18               	movwf	??_mcpInitF& (0+255),c
  2409  0019B0  0EF8               	movlw	248
  2410  0019B2                     u3617:
  2411  0019B2  2EE8               	decfsz	wreg,f,c
  2412  0019B4  D7FE               	bra	u3617
  2413  0019B6  2E18               	decfsz	??_mcpInitF& (0+255),f,c
  2414  0019B8  D7FC               	bra	u3617
  2415  0019BA  D000               	nop2	
  2416                           
  2417                           ;MCP3909_Interface.c: 189: LATCbits.LC7 = 0;
  2418  0019BC  9E8B               	bcf	3979,7,c	;volatile
  2419                           
  2420                           ;MCP3909_Interface.c: 190: LATCbits.LC4 = 0;
  2421  0019BE  988B               	bcf	3979,4,c	;volatile
  2422                           
  2423                           ;MCP3909_Interface.c: 191: LATCbits.LC4 = 0;
  2424  0019C0  988B               	bcf	3979,4,c	;volatile
  2425                           
  2426                           ;MCP3909_Interface.c: 193: _delay((unsigned long)((5)*(16000000UL/4000.0)));
  2427  0019C2  0E1A               	movlw	26
  2428  0019C4  6E18               	movwf	??_mcpInitF& (0+255),c
  2429  0019C6  0EF8               	movlw	248
  2430  0019C8                     u3627:
  2431  0019C8  2EE8               	decfsz	wreg,f,c
  2432  0019CA  D7FE               	bra	u3627
  2433  0019CC  2E18               	decfsz	??_mcpInitF& (0+255),f,c
  2434  0019CE  D7FC               	bra	u3627
  2435  0019D0  D000               	nop2	
  2436                           
  2437                           ;MCP3909_Interface.c: 195: LATCbits.LC7 = 1;
  2438  0019D2  8E8B               	bsf	3979,7,c	;volatile
  2439                           
  2440                           ;MCP3909_Interface.c: 196: LATCbits.LC4 = 1;
  2441  0019D4  888B               	bsf	3979,4,c	;volatile
  2442                           
  2443                           ;MCP3909_Interface.c: 197: LATCbits.LC4 = 1;
  2444  0019D6  888B               	bsf	3979,4,c	;volatile
  2445                           
  2446                           ;MCP3909_Interface.c: 199: _delay((unsigned long)((5)*(16000000UL/4000.0)));
  2447  0019D8  0E1A               	movlw	26
  2448  0019DA  6E18               	movwf	??_mcpInitF& (0+255),c
  2449  0019DC  0EF8               	movlw	248
  2450  0019DE                     u3637:
  2451  0019DE  2EE8               	decfsz	wreg,f,c
  2452  0019E0  D7FE               	bra	u3637
  2453  0019E2  2E18               	decfsz	??_mcpInitF& (0+255),f,c
  2454  0019E4  D7FC               	bra	u3637
  2455  0019E6  D000               	nop2	
  2456                           
  2457                           ;MCP3909_Interface.c: 200: LATCbits.LATC6 = 1;
  2458  0019E8  8C8B               	bsf	3979,6,c	;volatile
  2459                           
  2460                           ;MCP3909_Interface.c: 201: delayMS10( 10 );
  2461  0019EA  0E00               	movlw	0
  2462  0019EC  6E14               	movwf	delayMS10@count+1,c
  2463  0019EE  0E0A               	movlw	10
  2464  0019F0  6E13               	movwf	delayMS10@count,c
  2465  0019F2  ECAC  F00F         	call	_delayMS10	;wreg free
  2466  0019F6  0012               	return	
  2467  0019F8                     __end_of_mcpInitF:
  2468                           	opt stack 0
  2469                           tblptru	equ	0xFF8
  2470                           intcon	equ	0xFF2
  2471                           postinc0	equ	0xFEE
  2472                           wreg	equ	0xFE8
  2473                           postinc2	equ	0xFDE
  2474                           postdec2	equ	0xFDD
  2475                           fsr2h	equ	0xFDA
  2476                           fsr2l	equ	0xFD9
  2477                           status	equ	0xFD8
  2478                           
  2479 ;; *************** function _ledSetAllOn *****************
  2480 ;; Defined at:
  2481 ;;		line 187 in file "LEDControl.c"
  2482 ;; Parameters:    Size  Location     Type
  2483 ;;		None
  2484 ;; Auto vars:     Size  Location     Type
  2485 ;;		None
  2486 ;; Return value:  Size  Location     Type
  2487 ;;                  1    wreg      void 
  2488 ;; Registers used:
  2489 ;;		wreg, status,2, status,0, cstack
  2490 ;; Tracked objects:
  2491 ;;		On entry : 0/0
  2492 ;;		On exit  : 0/0
  2493 ;;		Unchanged: 0/0
  2494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2495 ;;      Params:         0       0       0       0       0       0       0
  2496 ;;      Locals:         0       0       0       0       0       0       0
  2497 ;;      Temps:          0       0       0       0       0       0       0
  2498 ;;      Totals:         0       0       0       0       0       0       0
  2499 ;;Total ram usage:        0 bytes
  2500 ;; Hardware stack levels used:    1
  2501 ;; Hardware stack levels required when called:    3
  2502 ;; This function calls:
  2503 ;;		_ledSetAll
  2504 ;; This function is called by:
  2505 ;;		_main
  2506 ;;		_ledTestSetAllOn
  2507 ;;		_ledGoSetAllOn
  2508 ;; This function uses a non-reentrant model
  2509 ;;
  2510                           
  2511                           	psect	text12
  2512  0020A2                     __ptext12:
  2513                           	opt stack 0
  2514  0020A2                     _ledSetAllOn:
  2515                           	opt stack 27
  2516                           
  2517                           ;LEDControl.c: 189: ledSetAll( 1, 1, 1 );
  2518                           
  2519                           ;incstack = 0
  2520  0020A2  0E00               	movlw	0
  2521  0020A4  6E1A               	movwf	ledSetAll@led1Value+1,c
  2522  0020A6  0E01               	movlw	1
  2523  0020A8  6E19               	movwf	ledSetAll@led1Value,c
  2524  0020AA  0E00               	movlw	0
  2525  0020AC  6E1C               	movwf	ledSetAll@led2Value+1,c
  2526  0020AE  0E01               	movlw	1
  2527  0020B0  6E1B               	movwf	ledSetAll@led2Value,c
  2528  0020B2  0E00               	movlw	0
  2529  0020B4  6E1E               	movwf	ledSetAll@led3Value+1,c
  2530  0020B6  0E01               	movlw	1
  2531  0020B8  6E1D               	movwf	ledSetAll@led3Value,c
  2532  0020BA  EC3D  F00F         	call	_ledSetAll	;wreg free
  2533  0020BE  0012               	return	
  2534  0020C0                     __end_of_ledSetAllOn:
  2535                           	opt stack 0
  2536                           tblptru	equ	0xFF8
  2537                           intcon	equ	0xFF2
  2538                           postinc0	equ	0xFEE
  2539                           wreg	equ	0xFE8
  2540                           postinc2	equ	0xFDE
  2541                           postdec2	equ	0xFDD
  2542                           fsr2h	equ	0xFDA
  2543                           fsr2l	equ	0xFD9
  2544                           status	equ	0xFD8
  2545                           
  2546 ;; *************** function _ledRun *****************
  2547 ;; Defined at:
  2548 ;;		line 334 in file "LEDControl.c"
  2549 ;; Parameters:    Size  Location     Type
  2550 ;;  ledRunDelay     2   34[COMRAM] int 
  2551 ;; Auto vars:     Size  Location     Type
  2552 ;;		None
  2553 ;; Return value:  Size  Location     Type
  2554 ;;                  1    wreg      void 
  2555 ;; Registers used:
  2556 ;;		wreg, status,2, status,0, cstack
  2557 ;; Tracked objects:
  2558 ;;		On entry : 0/0
  2559 ;;		On exit  : 0/0
  2560 ;;		Unchanged: 0/0
  2561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2562 ;;      Params:         2       0       0       0       0       0       0
  2563 ;;      Locals:         0       0       0       0       0       0       0
  2564 ;;      Temps:          0       0       0       0       0       0       0
  2565 ;;      Totals:         2       0       0       0       0       0       0
  2566 ;;Total ram usage:        2 bytes
  2567 ;; Hardware stack levels used:    1
  2568 ;; Hardware stack levels required when called:    4
  2569 ;; This function calls:
  2570 ;;		_ledRunDown
  2571 ;;		_ledRunUp
  2572 ;; This function is called by:
  2573 ;;		_main
  2574 ;; This function uses a non-reentrant model
  2575 ;;
  2576                           
  2577                           	psect	text13
  2578  0020FC                     __ptext13:
  2579                           	opt stack 0
  2580  0020FC                     _ledRun:
  2581                           	opt stack 26
  2582                           
  2583                           ;LEDControl.c: 336: ledRunUp( ledRunDelay );
  2584                           
  2585                           ;incstack = 0
  2586  0020FC  C023  F01F         	movff	ledRun@ledRunDelay,ledRunUp@ledRunDelay
  2587  002100  C024  F020         	movff	ledRun@ledRunDelay+1,ledRunUp@ledRunDelay+1
  2588  002104  EC8B  F009         	call	_ledRunUp	;wreg free
  2589                           
  2590                           ;LEDControl.c: 337: ledRunDown( ledRunDelay );
  2591  002108  C023  F01F         	movff	ledRun@ledRunDelay,ledRunDown@ledRunDelay
  2592  00210C  C024  F020         	movff	ledRun@ledRunDelay+1,ledRunDown@ledRunDelay+1
  2593  002110  ECEA  F009         	call	_ledRunDown	;wreg free
  2594  002114  0012               	return	
  2595  002116                     __end_of_ledRun:
  2596                           	opt stack 0
  2597                           tblptru	equ	0xFF8
  2598                           intcon	equ	0xFF2
  2599                           postinc0	equ	0xFEE
  2600                           wreg	equ	0xFE8
  2601                           postinc2	equ	0xFDE
  2602                           postdec2	equ	0xFDD
  2603                           fsr2h	equ	0xFDA
  2604                           fsr2l	equ	0xFD9
  2605                           status	equ	0xFD8
  2606                           
  2607 ;; *************** function _ledRunUp *****************
  2608 ;; Defined at:
  2609 ;;		line 296 in file "LEDControl.c"
  2610 ;; Parameters:    Size  Location     Type
  2611 ;;  ledRunDelay     2   30[COMRAM] int 
  2612 ;; Auto vars:     Size  Location     Type
  2613 ;;  delay10ms       2   32[COMRAM] int 
  2614 ;; Return value:  Size  Location     Type
  2615 ;;                  1    wreg      void 
  2616 ;; Registers used:
  2617 ;;		wreg, status,2, status,0, cstack
  2618 ;; Tracked objects:
  2619 ;;		On entry : 0/0
  2620 ;;		On exit  : 0/0
  2621 ;;		Unchanged: 0/0
  2622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2623 ;;      Params:         2       0       0       0       0       0       0
  2624 ;;      Locals:         2       0       0       0       0       0       0
  2625 ;;      Temps:          0       0       0       0       0       0       0
  2626 ;;      Totals:         4       0       0       0       0       0       0
  2627 ;;Total ram usage:        4 bytes
  2628 ;; Hardware stack levels used:    1
  2629 ;; Hardware stack levels required when called:    3
  2630 ;; This function calls:
  2631 ;;		___awdiv
  2632 ;;		_delayMS10
  2633 ;;		_ledSetAll
  2634 ;; This function is called by:
  2635 ;;		_ledRun
  2636 ;; This function uses a non-reentrant model
  2637 ;;
  2638                           
  2639                           	psect	text14
  2640  001316                     __ptext14:
  2641                           	opt stack 0
  2642  001316                     _ledRunUp:
  2643                           	opt stack 26
  2644                           
  2645                           ;LEDControl.c: 299: int delay10ms;
  2646                           ;LEDControl.c: 300: delay10ms = ledRunDelay / 10;
  2647                           
  2648                           ;incstack = 0
  2649  001316  C01F  F013         	movff	ledRunUp@ledRunDelay,___awdiv@dividend
  2650  00131A  C020  F014         	movff	ledRunUp@ledRunDelay+1,___awdiv@dividend+1
  2651  00131E  0E00               	movlw	0
  2652  001320  6E16               	movwf	___awdiv@divisor+1,c
  2653  001322  0E0A               	movlw	10
  2654  001324  6E15               	movwf	___awdiv@divisor,c
  2655  001326  ECC8  F00B         	call	___awdiv	;wreg free
  2656  00132A  C013  F021         	movff	?___awdiv,ledRunUp@delay10ms
  2657  00132E  C014  F022         	movff	?___awdiv+1,ledRunUp@delay10ms+1
  2658                           
  2659                           ;LEDControl.c: 304: ledSetAll( 0, 0, 0 );
  2660  001332  0E00               	movlw	0
  2661  001334  6E1A               	movwf	ledSetAll@led1Value+1,c
  2662  001336  0E00               	movlw	0
  2663  001338  6E19               	movwf	ledSetAll@led1Value,c
  2664  00133A  0E00               	movlw	0
  2665  00133C  6E1C               	movwf	ledSetAll@led2Value+1,c
  2666  00133E  0E00               	movlw	0
  2667  001340  6E1B               	movwf	ledSetAll@led2Value,c
  2668  001342  0E00               	movlw	0
  2669  001344  6E1E               	movwf	ledSetAll@led3Value+1,c
  2670  001346  0E00               	movlw	0
  2671  001348  6E1D               	movwf	ledSetAll@led3Value,c
  2672  00134A  EC3D  F00F         	call	_ledSetAll	;wreg free
  2673                           
  2674                           ;LEDControl.c: 305: delayMS10( delay10ms );
  2675  00134E  C021  F013         	movff	ledRunUp@delay10ms,delayMS10@count
  2676  001352  C022  F014         	movff	ledRunUp@delay10ms+1,delayMS10@count+1
  2677  001356  ECAC  F00F         	call	_delayMS10	;wreg free
  2678                           
  2679                           ;LEDControl.c: 306: ledSetAll( 1, 0, 0 );
  2680  00135A  0E00               	movlw	0
  2681  00135C  6E1A               	movwf	ledSetAll@led1Value+1,c
  2682  00135E  0E01               	movlw	1
  2683  001360  6E19               	movwf	ledSetAll@led1Value,c
  2684  001362  0E00               	movlw	0
  2685  001364  6E1C               	movwf	ledSetAll@led2Value+1,c
  2686  001366  0E00               	movlw	0
  2687  001368  6E1B               	movwf	ledSetAll@led2Value,c
  2688  00136A  0E00               	movlw	0
  2689  00136C  6E1E               	movwf	ledSetAll@led3Value+1,c
  2690  00136E  0E00               	movlw	0
  2691  001370  6E1D               	movwf	ledSetAll@led3Value,c
  2692  001372  EC3D  F00F         	call	_ledSetAll	;wreg free
  2693                           
  2694                           ;LEDControl.c: 307: delayMS10( delay10ms );
  2695  001376  C021  F013         	movff	ledRunUp@delay10ms,delayMS10@count
  2696  00137A  C022  F014         	movff	ledRunUp@delay10ms+1,delayMS10@count+1
  2697  00137E  ECAC  F00F         	call	_delayMS10	;wreg free
  2698                           
  2699                           ;LEDControl.c: 308: ledSetAll( 0, 1, 0 );
  2700  001382  0E00               	movlw	0
  2701  001384  6E1A               	movwf	ledSetAll@led1Value+1,c
  2702  001386  0E00               	movlw	0
  2703  001388  6E19               	movwf	ledSetAll@led1Value,c
  2704  00138A  0E00               	movlw	0
  2705  00138C  6E1C               	movwf	ledSetAll@led2Value+1,c
  2706  00138E  0E01               	movlw	1
  2707  001390  6E1B               	movwf	ledSetAll@led2Value,c
  2708  001392  0E00               	movlw	0
  2709  001394  6E1E               	movwf	ledSetAll@led3Value+1,c
  2710  001396  0E00               	movlw	0
  2711  001398  6E1D               	movwf	ledSetAll@led3Value,c
  2712  00139A  EC3D  F00F         	call	_ledSetAll	;wreg free
  2713                           
  2714                           ;LEDControl.c: 309: delayMS10( delay10ms );
  2715  00139E  C021  F013         	movff	ledRunUp@delay10ms,delayMS10@count
  2716  0013A2  C022  F014         	movff	ledRunUp@delay10ms+1,delayMS10@count+1
  2717  0013A6  ECAC  F00F         	call	_delayMS10	;wreg free
  2718                           
  2719                           ;LEDControl.c: 310: ledSetAll( 0, 0, 1 );
  2720  0013AA  0E00               	movlw	0
  2721  0013AC  6E1A               	movwf	ledSetAll@led1Value+1,c
  2722  0013AE  0E00               	movlw	0
  2723  0013B0  6E19               	movwf	ledSetAll@led1Value,c
  2724  0013B2  0E00               	movlw	0
  2725  0013B4  6E1C               	movwf	ledSetAll@led2Value+1,c
  2726  0013B6  0E00               	movlw	0
  2727  0013B8  6E1B               	movwf	ledSetAll@led2Value,c
  2728  0013BA  0E00               	movlw	0
  2729  0013BC  6E1E               	movwf	ledSetAll@led3Value+1,c
  2730  0013BE  0E01               	movlw	1
  2731  0013C0  6E1D               	movwf	ledSetAll@led3Value,c
  2732  0013C2  EC3D  F00F         	call	_ledSetAll	;wreg free
  2733                           
  2734                           ;LEDControl.c: 311: delayMS10( delay10ms );
  2735  0013C6  C021  F013         	movff	ledRunUp@delay10ms,delayMS10@count
  2736  0013CA  C022  F014         	movff	ledRunUp@delay10ms+1,delayMS10@count+1
  2737  0013CE  ECAC  F00F         	call	_delayMS10	;wreg free
  2738  0013D2  0012               	return	
  2739  0013D4                     __end_of_ledRunUp:
  2740                           	opt stack 0
  2741                           tblptru	equ	0xFF8
  2742                           intcon	equ	0xFF2
  2743                           postinc0	equ	0xFEE
  2744                           wreg	equ	0xFE8
  2745                           postinc2	equ	0xFDE
  2746                           postdec2	equ	0xFDD
  2747                           fsr2h	equ	0xFDA
  2748                           fsr2l	equ	0xFD9
  2749                           status	equ	0xFD8
  2750                           
  2751 ;; *************** function _ledRunDown *****************
  2752 ;; Defined at:
  2753 ;;		line 316 in file "LEDControl.c"
  2754 ;; Parameters:    Size  Location     Type
  2755 ;;  ledRunDelay     2   30[COMRAM] int 
  2756 ;; Auto vars:     Size  Location     Type
  2757 ;;  delay10ms       2   32[COMRAM] int 
  2758 ;; Return value:  Size  Location     Type
  2759 ;;                  1    wreg      void 
  2760 ;; Registers used:
  2761 ;;		wreg, status,2, status,0, cstack
  2762 ;; Tracked objects:
  2763 ;;		On entry : 0/0
  2764 ;;		On exit  : 0/0
  2765 ;;		Unchanged: 0/0
  2766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2767 ;;      Params:         2       0       0       0       0       0       0
  2768 ;;      Locals:         2       0       0       0       0       0       0
  2769 ;;      Temps:          0       0       0       0       0       0       0
  2770 ;;      Totals:         4       0       0       0       0       0       0
  2771 ;;Total ram usage:        4 bytes
  2772 ;; Hardware stack levels used:    1
  2773 ;; Hardware stack levels required when called:    3
  2774 ;; This function calls:
  2775 ;;		___awdiv
  2776 ;;		_delayMS10
  2777 ;;		_ledSetAll
  2778 ;; This function is called by:
  2779 ;;		_ledRun
  2780 ;; This function uses a non-reentrant model
  2781 ;;
  2782                           
  2783                           	psect	text15
  2784  0013D4                     __ptext15:
  2785                           	opt stack 0
  2786  0013D4                     _ledRunDown:
  2787                           	opt stack 26
  2788                           
  2789                           ;LEDControl.c: 319: int delay10ms;
  2790                           ;LEDControl.c: 320: delay10ms = ledRunDelay / 10;
  2791                           
  2792                           ;incstack = 0
  2793  0013D4  C01F  F013         	movff	ledRunDown@ledRunDelay,___awdiv@dividend
  2794  0013D8  C020  F014         	movff	ledRunDown@ledRunDelay+1,___awdiv@dividend+1
  2795  0013DC  0E00               	movlw	0
  2796  0013DE  6E16               	movwf	___awdiv@divisor+1,c
  2797  0013E0  0E0A               	movlw	10
  2798  0013E2  6E15               	movwf	___awdiv@divisor,c
  2799  0013E4  ECC8  F00B         	call	___awdiv	;wreg free
  2800  0013E8  C013  F021         	movff	?___awdiv,ledRunDown@delay10ms
  2801  0013EC  C014  F022         	movff	?___awdiv+1,ledRunDown@delay10ms+1
  2802                           
  2803                           ;LEDControl.c: 322: ledSetAll( 0, 0, 1 );
  2804  0013F0  0E00               	movlw	0
  2805  0013F2  6E1A               	movwf	ledSetAll@led1Value+1,c
  2806  0013F4  0E00               	movlw	0
  2807  0013F6  6E19               	movwf	ledSetAll@led1Value,c
  2808  0013F8  0E00               	movlw	0
  2809  0013FA  6E1C               	movwf	ledSetAll@led2Value+1,c
  2810  0013FC  0E00               	movlw	0
  2811  0013FE  6E1B               	movwf	ledSetAll@led2Value,c
  2812  001400  0E00               	movlw	0
  2813  001402  6E1E               	movwf	ledSetAll@led3Value+1,c
  2814  001404  0E01               	movlw	1
  2815  001406  6E1D               	movwf	ledSetAll@led3Value,c
  2816  001408  EC3D  F00F         	call	_ledSetAll	;wreg free
  2817                           
  2818                           ;LEDControl.c: 323: delayMS10( delay10ms );
  2819  00140C  C021  F013         	movff	ledRunDown@delay10ms,delayMS10@count
  2820  001410  C022  F014         	movff	ledRunDown@delay10ms+1,delayMS10@count+1
  2821  001414  ECAC  F00F         	call	_delayMS10	;wreg free
  2822                           
  2823                           ;LEDControl.c: 324: ledSetAll( 0, 1, 0 );
  2824  001418  0E00               	movlw	0
  2825  00141A  6E1A               	movwf	ledSetAll@led1Value+1,c
  2826  00141C  0E00               	movlw	0
  2827  00141E  6E19               	movwf	ledSetAll@led1Value,c
  2828  001420  0E00               	movlw	0
  2829  001422  6E1C               	movwf	ledSetAll@led2Value+1,c
  2830  001424  0E01               	movlw	1
  2831  001426  6E1B               	movwf	ledSetAll@led2Value,c
  2832  001428  0E00               	movlw	0
  2833  00142A  6E1E               	movwf	ledSetAll@led3Value+1,c
  2834  00142C  0E00               	movlw	0
  2835  00142E  6E1D               	movwf	ledSetAll@led3Value,c
  2836  001430  EC3D  F00F         	call	_ledSetAll	;wreg free
  2837                           
  2838                           ;LEDControl.c: 325: delayMS10( delay10ms );
  2839  001434  C021  F013         	movff	ledRunDown@delay10ms,delayMS10@count
  2840  001438  C022  F014         	movff	ledRunDown@delay10ms+1,delayMS10@count+1
  2841  00143C  ECAC  F00F         	call	_delayMS10	;wreg free
  2842                           
  2843                           ;LEDControl.c: 326: ledSetAll( 1, 0, 0 );
  2844  001440  0E00               	movlw	0
  2845  001442  6E1A               	movwf	ledSetAll@led1Value+1,c
  2846  001444  0E01               	movlw	1
  2847  001446  6E19               	movwf	ledSetAll@led1Value,c
  2848  001448  0E00               	movlw	0
  2849  00144A  6E1C               	movwf	ledSetAll@led2Value+1,c
  2850  00144C  0E00               	movlw	0
  2851  00144E  6E1B               	movwf	ledSetAll@led2Value,c
  2852  001450  0E00               	movlw	0
  2853  001452  6E1E               	movwf	ledSetAll@led3Value+1,c
  2854  001454  0E00               	movlw	0
  2855  001456  6E1D               	movwf	ledSetAll@led3Value,c
  2856  001458  EC3D  F00F         	call	_ledSetAll	;wreg free
  2857                           
  2858                           ;LEDControl.c: 327: delayMS10( delay10ms );
  2859  00145C  C021  F013         	movff	ledRunDown@delay10ms,delayMS10@count
  2860  001460  C022  F014         	movff	ledRunDown@delay10ms+1,delayMS10@count+1
  2861  001464  ECAC  F00F         	call	_delayMS10	;wreg free
  2862                           
  2863                           ;LEDControl.c: 328: ledSetAll( 0, 0, 0 );
  2864  001468  0E00               	movlw	0
  2865  00146A  6E1A               	movwf	ledSetAll@led1Value+1,c
  2866  00146C  0E00               	movlw	0
  2867  00146E  6E19               	movwf	ledSetAll@led1Value,c
  2868  001470  0E00               	movlw	0
  2869  001472  6E1C               	movwf	ledSetAll@led2Value+1,c
  2870  001474  0E00               	movlw	0
  2871  001476  6E1B               	movwf	ledSetAll@led2Value,c
  2872  001478  0E00               	movlw	0
  2873  00147A  6E1E               	movwf	ledSetAll@led3Value+1,c
  2874  00147C  0E00               	movlw	0
  2875  00147E  6E1D               	movwf	ledSetAll@led3Value,c
  2876  001480  EC3D  F00F         	call	_ledSetAll	;wreg free
  2877                           
  2878                           ;LEDControl.c: 329: delayMS10( delay10ms );
  2879  001484  C021  F013         	movff	ledRunDown@delay10ms,delayMS10@count
  2880  001488  C022  F014         	movff	ledRunDown@delay10ms+1,delayMS10@count+1
  2881  00148C  ECAC  F00F         	call	_delayMS10	;wreg free
  2882  001490  0012               	return	
  2883  001492                     __end_of_ledRunDown:
  2884                           	opt stack 0
  2885                           tblptru	equ	0xFF8
  2886                           intcon	equ	0xFF2
  2887                           postinc0	equ	0xFEE
  2888                           wreg	equ	0xFE8
  2889                           postinc2	equ	0xFDE
  2890                           postdec2	equ	0xFDD
  2891                           fsr2h	equ	0xFDA
  2892                           fsr2l	equ	0xFD9
  2893                           status	equ	0xFD8
  2894                           
  2895 ;; *************** function _delayMS10 *****************
  2896 ;; Defined at:
  2897 ;;		line 111 in file "Timer.c"
  2898 ;; Parameters:    Size  Location     Type
  2899 ;;  count           2   18[COMRAM] int 
  2900 ;; Auto vars:     Size  Location     Type
  2901 ;;  inx             2   21[COMRAM] int 
  2902 ;; Return value:  Size  Location     Type
  2903 ;;                  1    wreg      void 
  2904 ;; Registers used:
  2905 ;;		wreg, status,2, status,0
  2906 ;; Tracked objects:
  2907 ;;		On entry : 0/0
  2908 ;;		On exit  : 0/0
  2909 ;;		Unchanged: 0/0
  2910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2911 ;;      Params:         2       0       0       0       0       0       0
  2912 ;;      Locals:         2       0       0       0       0       0       0
  2913 ;;      Temps:          1       0       0       0       0       0       0
  2914 ;;      Totals:         5       0       0       0       0       0       0
  2915 ;;Total ram usage:        5 bytes
  2916 ;; Hardware stack levels used:    1
  2917 ;; Hardware stack levels required when called:    1
  2918 ;; This function calls:
  2919 ;;		Nothing
  2920 ;; This function is called by:
  2921 ;;		_ledRunUp
  2922 ;;		_ledRunDown
  2923 ;;		_mcpInit
  2924 ;;		_mcpInitF
  2925 ;; This function uses a non-reentrant model
  2926 ;;
  2927                           
  2928                           	psect	text16
  2929  001F58                     __ptext16:
  2930                           	opt stack 0
  2931  001F58                     _delayMS10:
  2932                           	opt stack 27
  2933                           
  2934                           ;Timer.c: 113: for( int inx = 0; inx < count; inx++ )
  2935                           
  2936                           ;incstack = 0
  2937  001F58  0E00               	movlw	0
  2938  001F5A  6E17               	movwf	delayMS10@inx+1,c
  2939  001F5C  0E00               	movlw	0
  2940  001F5E  6E16               	movwf	delayMS10@inx,c
  2941  001F60  D009               	goto	l600
  2942  001F62                     
  2943                           ;Timer.c: 114: {
  2944                           ;Timer.c: 115: _delay((unsigned long)((10)*(16000000UL/4000.0)));
  2945  001F62  0E34               	movlw	52
  2946  001F64  6E15               	movwf	??_delayMS10& (0+255),c
  2947  001F66  0EF2               	movlw	242
  2948  001F68                     u3647:
  2949  001F68  2EE8               	decfsz	wreg,f,c
  2950  001F6A  D7FE               	bra	u3647
  2951  001F6C  2E15               	decfsz	??_delayMS10& (0+255),f,c
  2952  001F6E  D7FC               	bra	u3647
  2953  001F70  4A16               	infsnz	delayMS10@inx,f,c
  2954  001F72  2A17               	incf	delayMS10@inx+1,f,c
  2955  001F74                     l600:
  2956  001F74  5013               	movf	delayMS10@count,w,c
  2957  001F76  5C16               	subwf	delayMS10@inx,w,c
  2958  001F78  5017               	movf	delayMS10@inx+1,w,c
  2959  001F7A  0A80               	xorlw	128
  2960  001F7C  6E15               	movwf	??_delayMS10& (0+255),c
  2961  001F7E  5014               	movf	delayMS10@count+1,w,c
  2962  001F80  0A80               	xorlw	128
  2963  001F82  5815               	subwfb	??_delayMS10& (0+255),w,c
  2964  001F84  B0D8               	btfsc	status,0,c
  2965  001F86  0012               	return	
  2966  001F88  D7EC               	goto	l601
  2967  001F8A                     __end_of_delayMS10:
  2968                           	opt stack 0
  2969                           tblptru	equ	0xFF8
  2970                           intcon	equ	0xFF2
  2971                           postinc0	equ	0xFEE
  2972                           wreg	equ	0xFE8
  2973                           postinc2	equ	0xFDE
  2974                           postdec2	equ	0xFDD
  2975                           fsr2h	equ	0xFDA
  2976                           fsr2l	equ	0xFD9
  2977                           status	equ	0xFD8
  2978                           
  2979 ;; *************** function ___awdiv *****************
  2980 ;; Defined at:
  2981 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  2982 ;; Parameters:    Size  Location     Type
  2983 ;;  dividend        2   18[COMRAM] int 
  2984 ;;  divisor         2   20[COMRAM] int 
  2985 ;; Auto vars:     Size  Location     Type
  2986 ;;  quotient        2   24[COMRAM] int 
  2987 ;;  sign            1   23[COMRAM] unsigned char 
  2988 ;;  counter         1   22[COMRAM] unsigned char 
  2989 ;; Return value:  Size  Location     Type
  2990 ;;                  2   18[COMRAM] int 
  2991 ;; Registers used:
  2992 ;;		wreg, status,2, status,0
  2993 ;; Tracked objects:
  2994 ;;		On entry : 0/0
  2995 ;;		On exit  : 0/0
  2996 ;;		Unchanged: 0/0
  2997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2998 ;;      Params:         4       0       0       0       0       0       0
  2999 ;;      Locals:         4       0       0       0       0       0       0
  3000 ;;      Temps:          0       0       0       0       0       0       0
  3001 ;;      Totals:         8       0       0       0       0       0       0
  3002 ;;Total ram usage:        8 bytes
  3003 ;; Hardware stack levels used:    1
  3004 ;; Hardware stack levels required when called:    1
  3005 ;; This function calls:
  3006 ;;		Nothing
  3007 ;; This function is called by:
  3008 ;;		_ledRunUp
  3009 ;;		_ledRunDown
  3010 ;; This function uses a non-reentrant model
  3011 ;;
  3012                           
  3013                           	psect	text17
  3014  001790                     __ptext17:
  3015                           	opt stack 0
  3016  001790                     ___awdiv:
  3017                           	opt stack 27
  3018                           
  3019                           ;incstack = 0
  3020  001790  0E00               	movlw	0
  3021  001792  6E18               	movwf	___awdiv@sign,c
  3022  001794  AE16               	btfss	___awdiv@divisor+1,7,c
  3023  001796  D006               	goto	l800
  3024  001798  6C15               	negf	___awdiv@divisor,c
  3025  00179A  1E16               	comf	___awdiv@divisor+1,f,c
  3026  00179C  B0D8               	btfsc	status,0,c
  3027  00179E  2A16               	incf	___awdiv@divisor+1,f,c
  3028  0017A0  0E01               	movlw	1
  3029  0017A2  6E18               	movwf	___awdiv@sign,c
  3030  0017A4                     l800:
  3031  0017A4  AE14               	btfss	___awdiv@dividend+1,7,c
  3032  0017A6  D006               	goto	l801
  3033  0017A8  6C13               	negf	___awdiv@dividend,c
  3034  0017AA  1E14               	comf	___awdiv@dividend+1,f,c
  3035  0017AC  B0D8               	btfsc	status,0,c
  3036  0017AE  2A14               	incf	___awdiv@dividend+1,f,c
  3037  0017B0  0E01               	movlw	1
  3038  0017B2  1A18               	xorwf	___awdiv@sign,f,c
  3039  0017B4                     l801:
  3040  0017B4  0E00               	movlw	0
  3041  0017B6  6E1A               	movwf	___awdiv@quotient+1,c
  3042  0017B8  0E00               	movlw	0
  3043  0017BA  6E19               	movwf	___awdiv@quotient,c
  3044  0017BC  5015               	movf	___awdiv@divisor,w,c
  3045  0017BE  1016               	iorwf	___awdiv@divisor+1,w,c
  3046  0017C0  B4D8               	btfsc	status,2,c
  3047  0017C2  D01C               	goto	l808
  3048  0017C4  0E01               	movlw	1
  3049  0017C6  6E17               	movwf	___awdiv@counter,c
  3050  0017C8  D004               	goto	l803
  3051  0017CA  90D8               	bcf	status,0,c
  3052  0017CC  3615               	rlcf	___awdiv@divisor,f,c
  3053  0017CE  3616               	rlcf	___awdiv@divisor+1,f,c
  3054  0017D0  2A17               	incf	___awdiv@counter,f,c
  3055  0017D2                     l803:
  3056  0017D2  AE16               	btfss	___awdiv@divisor+1,7,c
  3057  0017D4  D7FA               	goto	l804
  3058  0017D6                     u3360:
  3059  0017D6  90D8               	bcf	status,0,c
  3060  0017D8  3619               	rlcf	___awdiv@quotient,f,c
  3061  0017DA  361A               	rlcf	___awdiv@quotient+1,f,c
  3062  0017DC  5015               	movf	___awdiv@divisor,w,c
  3063  0017DE  5C13               	subwf	___awdiv@dividend,w,c
  3064  0017E0  5016               	movf	___awdiv@divisor+1,w,c
  3065  0017E2  5814               	subwfb	___awdiv@dividend+1,w,c
  3066  0017E4  A0D8               	btfss	status,0,c
  3067  0017E6  D005               	goto	l807
  3068  0017E8  5015               	movf	___awdiv@divisor,w,c
  3069  0017EA  5E13               	subwf	___awdiv@dividend,f,c
  3070  0017EC  5016               	movf	___awdiv@divisor+1,w,c
  3071  0017EE  5A14               	subwfb	___awdiv@dividend+1,f,c
  3072  0017F0  8019               	bsf	___awdiv@quotient,0,c
  3073  0017F2                     l807:
  3074  0017F2  90D8               	bcf	status,0,c
  3075  0017F4  3216               	rrcf	___awdiv@divisor+1,f,c
  3076  0017F6  3215               	rrcf	___awdiv@divisor,f,c
  3077  0017F8  2E17               	decfsz	___awdiv@counter,f,c
  3078  0017FA  D7ED               	goto	u3360
  3079  0017FC                     l808:
  3080  0017FC  5018               	movf	___awdiv@sign,w,c
  3081  0017FE  B4D8               	btfsc	status,2,c
  3082  001800  D004               	goto	l809
  3083  001802  6C19               	negf	___awdiv@quotient,c
  3084  001804  1E1A               	comf	___awdiv@quotient+1,f,c
  3085  001806  B0D8               	btfsc	status,0,c
  3086  001808  2A1A               	incf	___awdiv@quotient+1,f,c
  3087  00180A                     l809:
  3088  00180A  C019  F013         	movff	___awdiv@quotient,?___awdiv
  3089  00180E  C01A  F014         	movff	___awdiv@quotient+1,?___awdiv+1
  3090  001812  0012               	return	
  3091  001814                     __end_of___awdiv:
  3092                           	opt stack 0
  3093                           tblptru	equ	0xFF8
  3094                           intcon	equ	0xFF2
  3095                           postinc0	equ	0xFEE
  3096                           wreg	equ	0xFE8
  3097                           postinc2	equ	0xFDE
  3098                           postdec2	equ	0xFDD
  3099                           fsr2h	equ	0xFDA
  3100                           fsr2l	equ	0xFD9
  3101                           status	equ	0xFD8
  3102                           
  3103 ;; *************** function _ledInit *****************
  3104 ;; Defined at:
  3105 ;;		line 71 in file "LEDControl.c"
  3106 ;; Parameters:    Size  Location     Type
  3107 ;;		None
  3108 ;; Auto vars:     Size  Location     Type
  3109 ;;		None
  3110 ;; Return value:  Size  Location     Type
  3111 ;;                  1    wreg      void 
  3112 ;; Registers used:
  3113 ;;		wreg, status,2, status,0, cstack
  3114 ;; Tracked objects:
  3115 ;;		On entry : 0/0
  3116 ;;		On exit  : 0/0
  3117 ;;		Unchanged: 0/0
  3118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3119 ;;      Params:         0       0       0       0       0       0       0
  3120 ;;      Locals:         0       0       0       0       0       0       0
  3121 ;;      Temps:          0       0       0       0       0       0       0
  3122 ;;      Totals:         0       0       0       0       0       0       0
  3123 ;;Total ram usage:        0 bytes
  3124 ;; Hardware stack levels used:    1
  3125 ;; Hardware stack levels required when called:    4
  3126 ;; This function calls:
  3127 ;;		_ledSetAllOff
  3128 ;; This function is called by:
  3129 ;;		_main
  3130 ;; This function uses a non-reentrant model
  3131 ;;
  3132                           
  3133                           	psect	text18
  3134  002164                     __ptext18:
  3135                           	opt stack 0
  3136  002164                     _ledInit:
  3137                           	opt stack 26
  3138                           
  3139                           ;LEDControl.c: 73: TRISBbits.TRISB4 = 0;
  3140                           
  3141                           ;incstack = 0
  3142  002164  9893               	bcf	3987,4,c	;volatile
  3143                           
  3144                           ;LEDControl.c: 74: TRISCbits.TRISC1 = 0;
  3145  002166  9294               	bcf	3988,1,c	;volatile
  3146                           
  3147                           ;LEDControl.c: 75: TRISCbits.TRISC0 = 0;
  3148  002168  9094               	bcf	3988,0,c	;volatile
  3149                           
  3150                           ;LEDControl.c: 77: ledSetAllOff( );
  3151  00216A  EC60  F010         	call	_ledSetAllOff	;wreg free
  3152  00216E  0012               	return	
  3153  002170                     __end_of_ledInit:
  3154                           	opt stack 0
  3155                           tblptru	equ	0xFF8
  3156                           intcon	equ	0xFF2
  3157                           postinc0	equ	0xFEE
  3158                           wreg	equ	0xFE8
  3159                           postinc2	equ	0xFDE
  3160                           postdec2	equ	0xFDD
  3161                           fsr2h	equ	0xFDA
  3162                           fsr2l	equ	0xFD9
  3163                           status	equ	0xFD8
  3164                           
  3165 ;; *************** function _ledSetAllOff *****************
  3166 ;; Defined at:
  3167 ;;		line 194 in file "LEDControl.c"
  3168 ;; Parameters:    Size  Location     Type
  3169 ;;		None
  3170 ;; Auto vars:     Size  Location     Type
  3171 ;;		None
  3172 ;; Return value:  Size  Location     Type
  3173 ;;                  1    wreg      void 
  3174 ;; Registers used:
  3175 ;;		wreg, status,2, status,0, cstack
  3176 ;; Tracked objects:
  3177 ;;		On entry : 0/0
  3178 ;;		On exit  : 0/0
  3179 ;;		Unchanged: 0/0
  3180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3181 ;;      Params:         0       0       0       0       0       0       0
  3182 ;;      Locals:         0       0       0       0       0       0       0
  3183 ;;      Temps:          0       0       0       0       0       0       0
  3184 ;;      Totals:         0       0       0       0       0       0       0
  3185 ;;Total ram usage:        0 bytes
  3186 ;; Hardware stack levels used:    1
  3187 ;; Hardware stack levels required when called:    3
  3188 ;; This function calls:
  3189 ;;		_ledSetAll
  3190 ;; This function is called by:
  3191 ;;		_ledInit
  3192 ;;		_main
  3193 ;;		_ledTestSetAllOff
  3194 ;;		_ledGoSetAllOff
  3195 ;; This function uses a non-reentrant model
  3196 ;;
  3197                           
  3198                           	psect	text19
  3199  0020C0                     __ptext19:
  3200                           	opt stack 0
  3201  0020C0                     _ledSetAllOff:
  3202                           	opt stack 27
  3203                           
  3204                           ;LEDControl.c: 196: ledSetAll( 0, 0, 0 );
  3205                           
  3206                           ;incstack = 0
  3207  0020C0  0E00               	movlw	0
  3208  0020C2  6E1A               	movwf	ledSetAll@led1Value+1,c
  3209  0020C4  0E00               	movlw	0
  3210  0020C6  6E19               	movwf	ledSetAll@led1Value,c
  3211  0020C8  0E00               	movlw	0
  3212  0020CA  6E1C               	movwf	ledSetAll@led2Value+1,c
  3213  0020CC  0E00               	movlw	0
  3214  0020CE  6E1B               	movwf	ledSetAll@led2Value,c
  3215  0020D0  0E00               	movlw	0
  3216  0020D2  6E1E               	movwf	ledSetAll@led3Value+1,c
  3217  0020D4  0E00               	movlw	0
  3218  0020D6  6E1D               	movwf	ledSetAll@led3Value,c
  3219  0020D8  EC3D  F00F         	call	_ledSetAll	;wreg free
  3220  0020DC  0012               	return	
  3221  0020DE                     __end_of_ledSetAllOff:
  3222                           	opt stack 0
  3223                           tblptru	equ	0xFF8
  3224                           intcon	equ	0xFF2
  3225                           postinc0	equ	0xFEE
  3226                           wreg	equ	0xFE8
  3227                           postinc2	equ	0xFDE
  3228                           postdec2	equ	0xFDD
  3229                           fsr2h	equ	0xFDA
  3230                           fsr2l	equ	0xFD9
  3231                           status	equ	0xFD8
  3232                           
  3233 ;; *************** function _ledSetAll *****************
  3234 ;; Defined at:
  3235 ;;		line 158 in file "LEDControl.c"
  3236 ;; Parameters:    Size  Location     Type
  3237 ;;  led1Value       2   24[COMRAM] int 
  3238 ;;  led2Value       2   26[COMRAM] int 
  3239 ;;  led3Value       2   28[COMRAM] int 
  3240 ;; Auto vars:     Size  Location     Type
  3241 ;;		None
  3242 ;; Return value:  Size  Location     Type
  3243 ;;                  1    wreg      void 
  3244 ;; Registers used:
  3245 ;;		wreg, status,2, status,0, cstack
  3246 ;; Tracked objects:
  3247 ;;		On entry : 0/0
  3248 ;;		On exit  : 0/0
  3249 ;;		Unchanged: 0/0
  3250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3251 ;;      Params:         6       0       0       0       0       0       0
  3252 ;;      Locals:         0       0       0       0       0       0       0
  3253 ;;      Temps:          0       0       0       0       0       0       0
  3254 ;;      Totals:         6       0       0       0       0       0       0
  3255 ;;Total ram usage:        6 bytes
  3256 ;; Hardware stack levels used:    1
  3257 ;; Hardware stack levels required when called:    2
  3258 ;; This function calls:
  3259 ;;		_ledSet
  3260 ;; This function is called by:
  3261 ;;		_ledSetAllOn
  3262 ;;		_ledSetAllOff
  3263 ;;		_ledRunUp
  3264 ;;		_ledRunDown
  3265 ;;		_ledTestSetAll
  3266 ;;		_ledGoSetAll
  3267 ;; This function uses a non-reentrant model
  3268 ;;
  3269                           
  3270                           	psect	text20
  3271  001E7A                     __ptext20:
  3272                           	opt stack 0
  3273  001E7A                     _ledSetAll:
  3274                           	opt stack 27
  3275                           
  3276                           ;LEDControl.c: 160: ledSet( 1, led1Value );
  3277                           
  3278                           ;incstack = 0
  3279  001E7A  0E00               	movlw	0
  3280  001E7C  6E14               	movwf	ledSet@ledNum+1,c
  3281  001E7E  0E01               	movlw	1
  3282  001E80  6E13               	movwf	ledSet@ledNum,c
  3283  001E82  C019  F015         	movff	ledSetAll@led1Value,ledSet@setValue
  3284  001E86  C01A  F016         	movff	ledSetAll@led1Value+1,ledSet@setValue+1
  3285  001E8A  EC41  F00E         	call	_ledSet	;wreg free
  3286                           
  3287                           ;LEDControl.c: 161: ledSet( 2, led2Value );
  3288  001E8E  0E00               	movlw	0
  3289  001E90  6E14               	movwf	ledSet@ledNum+1,c
  3290  001E92  0E02               	movlw	2
  3291  001E94  6E13               	movwf	ledSet@ledNum,c
  3292  001E96  C01B  F015         	movff	ledSetAll@led2Value,ledSet@setValue
  3293  001E9A  C01C  F016         	movff	ledSetAll@led2Value+1,ledSet@setValue+1
  3294  001E9E  EC41  F00E         	call	_ledSet	;wreg free
  3295                           
  3296                           ;LEDControl.c: 162: ledSet( 3, led3Value );
  3297  001EA2  0E00               	movlw	0
  3298  001EA4  6E14               	movwf	ledSet@ledNum+1,c
  3299  001EA6  0E03               	movlw	3
  3300  001EA8  6E13               	movwf	ledSet@ledNum,c
  3301  001EAA  C01D  F015         	movff	ledSetAll@led3Value,ledSet@setValue
  3302  001EAE  C01E  F016         	movff	ledSetAll@led3Value+1,ledSet@setValue+1
  3303  001EB2  EC41  F00E         	call	_ledSet	;wreg free
  3304  001EB6  0012               	return	
  3305  001EB8                     __end_of_ledSetAll:
  3306                           	opt stack 0
  3307                           tblptru	equ	0xFF8
  3308                           intcon	equ	0xFF2
  3309                           postinc0	equ	0xFEE
  3310                           wreg	equ	0xFE8
  3311                           postinc2	equ	0xFDE
  3312                           postdec2	equ	0xFDD
  3313                           fsr2h	equ	0xFDA
  3314                           fsr2l	equ	0xFD9
  3315                           status	equ	0xFD8
  3316                           
  3317 ;; *************** function _ledSet *****************
  3318 ;; Defined at:
  3319 ;;		line 82 in file "LEDControl.c"
  3320 ;; Parameters:    Size  Location     Type
  3321 ;;  ledNum          2   18[COMRAM] int 
  3322 ;;  setValue        2   20[COMRAM] int 
  3323 ;; Auto vars:     Size  Location     Type
  3324 ;;		None
  3325 ;; Return value:  Size  Location     Type
  3326 ;;                  1    wreg      void 
  3327 ;; Registers used:
  3328 ;;		wreg, status,2, status,0
  3329 ;; Tracked objects:
  3330 ;;		On entry : 0/0
  3331 ;;		On exit  : 0/0
  3332 ;;		Unchanged: 0/0
  3333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3334 ;;      Params:         4       0       0       0       0       0       0
  3335 ;;      Locals:         0       0       0       0       0       0       0
  3336 ;;      Temps:          2       0       0       0       0       0       0
  3337 ;;      Totals:         6       0       0       0       0       0       0
  3338 ;;Total ram usage:        6 bytes
  3339 ;; Hardware stack levels used:    1
  3340 ;; Hardware stack levels required when called:    1
  3341 ;; This function calls:
  3342 ;;		Nothing
  3343 ;; This function is called by:
  3344 ;;		_ledSetAll
  3345 ;;		_ledToggle
  3346 ;;		_ledSetOn
  3347 ;;		_ledSetOff
  3348 ;; This function uses a non-reentrant model
  3349 ;;
  3350                           
  3351                           	psect	text21
  3352  001C82                     __ptext21:
  3353                           	opt stack 0
  3354  001C82                     _ledSet:
  3355                           	opt stack 25
  3356                           
  3357                           ;LEDControl.c: 84: switch( ledNum )
  3358                           
  3359                           ;incstack = 0
  3360  001C82  D012               	goto	l22
  3361  001C84                     l23:
  3362                           
  3363                           ;LEDControl.c: 87: LATBbits.LATB4 = setValue;
  3364  001C84  B015               	btfsc	ledSet@setValue,0,c
  3365  001C86  D002               	bra	u2755
  3366  001C88  988A               	bcf	3978,4,c	;volatile
  3367  001C8A  D001               	bra	u2756
  3368  001C8C                     u2755:
  3369  001C8C  888A               	bsf	3978,4,c	;volatile
  3370  001C8E                     u2756:
  3371                           
  3372                           ;LEDControl.c: 88: break;
  3373  001C8E  0012               	return	
  3374  001C90                     l25:
  3375                           
  3376                           ;LEDControl.c: 90: LATCbits.LATC1 = setValue;
  3377  001C90  B015               	btfsc	ledSet@setValue,0,c
  3378  001C92  D002               	bra	u2765
  3379  001C94  928B               	bcf	3979,1,c	;volatile
  3380  001C96  D001               	bra	u2766
  3381  001C98                     u2765:
  3382  001C98  828B               	bsf	3979,1,c	;volatile
  3383  001C9A                     u2766:
  3384                           
  3385                           ;LEDControl.c: 91: break;
  3386  001C9A  0012               	return	
  3387  001C9C                     l26:
  3388                           
  3389                           ;LEDControl.c: 93: LATCbits.LATC0 = setValue;
  3390  001C9C  B015               	btfsc	ledSet@setValue,0,c
  3391  001C9E  D002               	bra	u2775
  3392  001CA0  908B               	bcf	3979,0,c	;volatile
  3393  001CA2  D001               	bra	u2776
  3394  001CA4                     u2775:
  3395  001CA4  808B               	bsf	3979,0,c	;volatile
  3396  001CA6                     u2776:
  3397                           
  3398                           ;LEDControl.c: 95: }
  3399                           
  3400                           ;LEDControl.c: 94: break;
  3401  001CA6  0012               	return	
  3402  001CA8                     l22:
  3403  001CA8  C013  F017         	movff	ledSet@ledNum,??_ledSet
  3404  001CAC  C014  F018         	movff	ledSet@ledNum+1,??_ledSet+1
  3405                           
  3406                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3407                           ; Switch size 1, requested type "space"
  3408                           ; Number of cases is 1, Range of values is 0 to 0
  3409                           ; switch strategies available:
  3410                           ; Name         Instructions Cycles
  3411                           ; simple_byte            4     3 (average)
  3412                           ;	Chosen strategy is simple_byte
  3413  001CB0  5018               	movf	??_ledSet+1,w,c
  3414  001CB2  0A00               	xorlw	0	; case 0
  3415  001CB4  A4D8               	btfss	status,2,c
  3416  001CB6  0012               	return	
  3417                           
  3418                           ; Switch size 1, requested type "space"
  3419                           ; Number of cases is 3, Range of values is 1 to 3
  3420                           ; switch strategies available:
  3421                           ; Name         Instructions Cycles
  3422                           ; simple_byte           10     6 (average)
  3423                           ;	Chosen strategy is simple_byte
  3424  001CB8  5017               	movf	??_ledSet,w,c
  3425  001CBA  0A01               	xorlw	1	; case 1
  3426  001CBC  B4D8               	btfsc	status,2,c
  3427  001CBE  D7E2               	goto	l23
  3428  001CC0  0A03               	xorlw	3	; case 2
  3429  001CC2  B4D8               	btfsc	status,2,c
  3430  001CC4  D7E5               	goto	l25
  3431  001CC6  0A01               	xorlw	1	; case 3
  3432  001CC8  A4D8               	btfss	status,2,c
  3433  001CCA  0012               	return	
  3434  001CCC  D7E7               	goto	l26
  3435  001CCE                     __end_of_ledSet:
  3436                           	opt stack 0
  3437                           tblptru	equ	0xFF8
  3438                           intcon	equ	0xFF2
  3439                           postinc0	equ	0xFEE
  3440                           wreg	equ	0xFE8
  3441                           postinc2	equ	0xFDE
  3442                           postdec2	equ	0xFDD
  3443                           fsr2h	equ	0xFDA
  3444                           fsr2l	equ	0xFD9
  3445                           status	equ	0xFD8
  3446                           
  3447 ;; *************** function _initOSC *****************
  3448 ;; Defined at:
  3449 ;;		line 136 in file "Main_PowerSense.c"
  3450 ;; Parameters:    Size  Location     Type
  3451 ;;		None
  3452 ;; Auto vars:     Size  Location     Type
  3453 ;;		None
  3454 ;; Return value:  Size  Location     Type
  3455 ;;                  1    wreg      void 
  3456 ;; Registers used:
  3457 ;;		wreg, status,2
  3458 ;; Tracked objects:
  3459 ;;		On entry : 0/0
  3460 ;;		On exit  : 0/0
  3461 ;;		Unchanged: 0/0
  3462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3463 ;;      Params:         0       0       0       0       0       0       0
  3464 ;;      Locals:         0       0       0       0       0       0       0
  3465 ;;      Temps:          0       0       0       0       0       0       0
  3466 ;;      Totals:         0       0       0       0       0       0       0
  3467 ;;Total ram usage:        0 bytes
  3468 ;; Hardware stack levels used:    1
  3469 ;; Hardware stack levels required when called:    1
  3470 ;; This function calls:
  3471 ;;		Nothing
  3472 ;; This function is called by:
  3473 ;;		_main
  3474 ;; This function uses a non-reentrant model
  3475 ;;
  3476                           
  3477                           	psect	text22
  3478  002116                     __ptext22:
  3479                           	opt stack 0
  3480  002116                     _initOSC:
  3481                           	opt stack 29
  3482                           
  3483                           ;Main_PowerSense.c: 139: OSCCONbits.IDLEN = 0;
  3484                           
  3485                           ;incstack = 0
  3486  002116  9ED3               	bcf	4051,7,c	;volatile
  3487                           
  3488                           ;Main_PowerSense.c: 140: OSCCONbits.IRCF = 0b111;
  3489  002118  88D3               	bsf	4051,4,c	;volatile
  3490  00211A  8AD3               	bsf	4051,5,c	;volatile
  3491  00211C  8CD3               	bsf	4051,6,c	;volatile
  3492                           
  3493                           ;Main_PowerSense.c: 141: OSCCONbits.SCS = 0b11;
  3494  00211E  0E03               	movlw	3
  3495  002120  12D3               	iorwf	4051,f,c	;volatile
  3496                           
  3497                           ;Main_PowerSense.c: 143: OSCCON2bits.MFIOSEL = 0;
  3498  002122  98D2               	bcf	4050,4,c	;volatile
  3499                           
  3500                           ;Main_PowerSense.c: 144: OSCCON2bits.SOSCGO = 0;
  3501  002124  96D2               	bcf	4050,3,c	;volatile
  3502                           
  3503                           ;Main_PowerSense.c: 145: OSCCON2bits.PRISD = 0;
  3504  002126  94D2               	bcf	4050,2,c	;volatile
  3505                           
  3506                           ;Main_PowerSense.c: 147: OSCTUNEbits.INTSRC = 1;
  3507  002128  8E9B               	bsf	3995,7,c	;volatile
  3508                           
  3509                           ;Main_PowerSense.c: 148: OSCTUNEbits.PLLEN = 0;
  3510  00212A  9C9B               	bcf	3995,6,c	;volatile
  3511  00212C  0012               	return	
  3512  00212E                     __end_of_initOSC:
  3513                           	opt stack 0
  3514                           tblptru	equ	0xFF8
  3515                           intcon	equ	0xFF2
  3516                           postinc0	equ	0xFEE
  3517                           wreg	equ	0xFE8
  3518                           postinc2	equ	0xFDE
  3519                           postdec2	equ	0xFDD
  3520                           fsr2h	equ	0xFDA
  3521                           fsr2l	equ	0xFD9
  3522                           status	equ	0xFD8
  3523                           
  3524 ;; *************** function _initInterruptsClear *****************
  3525 ;; Defined at:
  3526 ;;		line 172 in file "Main_PowerSense.c"
  3527 ;; Parameters:    Size  Location     Type
  3528 ;;		None
  3529 ;; Auto vars:     Size  Location     Type
  3530 ;;		None
  3531 ;; Return value:  Size  Location     Type
  3532 ;;                  1    wreg      void 
  3533 ;; Registers used:
  3534 ;;		wreg, status,2
  3535 ;; Tracked objects:
  3536 ;;		On entry : 0/0
  3537 ;;		On exit  : 0/0
  3538 ;;		Unchanged: 0/0
  3539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3540 ;;      Params:         0       0       0       0       0       0       0
  3541 ;;      Locals:         0       0       0       0       0       0       0
  3542 ;;      Temps:          0       0       0       0       0       0       0
  3543 ;;      Totals:         0       0       0       0       0       0       0
  3544 ;;Total ram usage:        0 bytes
  3545 ;; Hardware stack levels used:    1
  3546 ;; Hardware stack levels required when called:    1
  3547 ;; This function calls:
  3548 ;;		Nothing
  3549 ;; This function is called by:
  3550 ;;		_main
  3551 ;; This function uses a non-reentrant model
  3552 ;;
  3553                           
  3554                           	psect	text23
  3555  001CCE                     __ptext23:
  3556                           	opt stack 0
  3557  001CCE                     _initInterruptsClear:
  3558                           	opt stack 29
  3559                           
  3560                           ;Main_PowerSense.c: 175: INTCON = 0b00000000;
  3561                           
  3562                           ;incstack = 0
  3563  001CCE  0E00               	movlw	0
  3564  001CD0  6EF2               	movwf	intcon,c	;volatile
  3565                           
  3566                           ;Main_PowerSense.c: 176: INTCON2 = 0b00000000;
  3567  001CD2  0E00               	movlw	0
  3568  001CD4  6EF1               	movwf	intcon2,c	;volatile
  3569                           
  3570                           ;Main_PowerSense.c: 177: INTCON3 = 0b00000000;
  3571  001CD6  0E00               	movlw	0
  3572  001CD8  6EF0               	movwf	intcon3,c	;volatile
  3573                           
  3574                           ;Main_PowerSense.c: 179: RCONbits.IPEN = 0;
  3575  001CDA  9ED0               	bcf	4048,7,c	;volatile
  3576                           
  3577                           ;Main_PowerSense.c: 181: PIR1 = 0b00000000;
  3578  001CDC  0E00               	movlw	0
  3579  001CDE  6E9E               	movwf	3998,c	;volatile
  3580                           
  3581                           ;Main_PowerSense.c: 182: PIR2 = 0b00000000;
  3582  001CE0  0E00               	movlw	0
  3583  001CE2  6EA1               	movwf	4001,c	;volatile
  3584                           
  3585                           ;Main_PowerSense.c: 183: PIR3 = 0b00000000;
  3586  001CE4  0E00               	movlw	0
  3587  001CE6  6EA4               	movwf	4004,c	;volatile
  3588                           
  3589                           ;Main_PowerSense.c: 184: PIR4 = 0b00000000;
  3590  001CE8  0E00               	movlw	0
  3591  001CEA  6E7B               	movwf	3963,c	;volatile
  3592                           
  3593                           ;Main_PowerSense.c: 185: PIR5 = 0b00000000;
  3594  001CEC  0E00               	movlw	0
  3595  001CEE  6E7E               	movwf	3966,c	;volatile
  3596                           
  3597                           ;Main_PowerSense.c: 187: PIE1 = 0b00000000;
  3598  001CF0  0E00               	movlw	0
  3599  001CF2  6E9D               	movwf	3997,c	;volatile
  3600                           
  3601                           ;Main_PowerSense.c: 188: PIE2 = 0b00000000;
  3602  001CF4  0E00               	movlw	0
  3603  001CF6  6EA0               	movwf	4000,c	;volatile
  3604                           
  3605                           ;Main_PowerSense.c: 189: PIE3 = 0b00000000;
  3606  001CF8  0E00               	movlw	0
  3607  001CFA  6EA3               	movwf	4003,c	;volatile
  3608                           
  3609                           ;Main_PowerSense.c: 190: PIE4 = 0b00000000;
  3610  001CFC  0E00               	movlw	0
  3611  001CFE  6E7A               	movwf	3962,c	;volatile
  3612                           
  3613                           ;Main_PowerSense.c: 191: PIE5 = 0b00000000;
  3614  001D00  0E00               	movlw	0
  3615  001D02  6E7D               	movwf	3965,c	;volatile
  3616                           
  3617                           ;Main_PowerSense.c: 193: IPR1 = 0b00000000;
  3618  001D04  0E00               	movlw	0
  3619  001D06  6E9F               	movwf	3999,c	;volatile
  3620                           
  3621                           ;Main_PowerSense.c: 194: IPR2 = 0b00000000;
  3622  001D08  0E00               	movlw	0
  3623  001D0A  6EA2               	movwf	4002,c	;volatile
  3624                           
  3625                           ;Main_PowerSense.c: 195: IPR3 = 0b00000000;
  3626  001D0C  0E00               	movlw	0
  3627  001D0E  6EA5               	movwf	4005,c	;volatile
  3628                           
  3629                           ;Main_PowerSense.c: 196: IPR4 = 0b00000000;
  3630  001D10  0E00               	movlw	0
  3631  001D12  6E7C               	movwf	3964,c	;volatile
  3632                           
  3633                           ;Main_PowerSense.c: 197: IPR5 = 0b00000000;
  3634  001D14  0E00               	movlw	0
  3635  001D16  6E7F               	movwf	3967,c	;volatile
  3636  001D18  0012               	return	
  3637  001D1A                     __end_of_initInterruptsClear:
  3638                           	opt stack 0
  3639                           tblptru	equ	0xFF8
  3640                           intcon	equ	0xFF2
  3641                           intcon2	equ	0xFF1
  3642                           intcon3	equ	0xFF0
  3643                           postinc0	equ	0xFEE
  3644                           wreg	equ	0xFE8
  3645                           postinc2	equ	0xFDE
  3646                           postdec2	equ	0xFDD
  3647                           fsr2h	equ	0xFDA
  3648                           fsr2l	equ	0xFD9
  3649                           status	equ	0xFD8
  3650                           
  3651 ;; *************** function _initIO *****************
  3652 ;; Defined at:
  3653 ;;		line 153 in file "Main_PowerSense.c"
  3654 ;; Parameters:    Size  Location     Type
  3655 ;;		None
  3656 ;; Auto vars:     Size  Location     Type
  3657 ;;		None
  3658 ;; Return value:  Size  Location     Type
  3659 ;;                  1    wreg      void 
  3660 ;; Registers used:
  3661 ;;		wreg, status,2
  3662 ;; Tracked objects:
  3663 ;;		On entry : 0/0
  3664 ;;		On exit  : 0/0
  3665 ;;		Unchanged: 0/0
  3666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3667 ;;      Params:         0       0       0       0       0       0       0
  3668 ;;      Locals:         0       0       0       0       0       0       0
  3669 ;;      Temps:          0       0       0       0       0       0       0
  3670 ;;      Totals:         0       0       0       0       0       0       0
  3671 ;;Total ram usage:        0 bytes
  3672 ;; Hardware stack levels used:    1
  3673 ;; Hardware stack levels required when called:    1
  3674 ;; This function calls:
  3675 ;;		Nothing
  3676 ;; This function is called by:
  3677 ;;		_main
  3678 ;; This function uses a non-reentrant model
  3679 ;;
  3680                           
  3681                           	psect	text24
  3682  002144                     __ptext24:
  3683                           	opt stack 0
  3684  002144                     _initIO:
  3685                           	opt stack 29
  3686                           
  3687                           ;Main_PowerSense.c: 155: ADCON0bits.ADON = 0;
  3688                           
  3689                           ;incstack = 0
  3690  002144  90C2               	bcf	4034,0,c	;volatile
  3691                           
  3692                           ;Main_PowerSense.c: 156: ANSELA = 0b00000000;
  3693  002146  0E00               	movlw	0
  3694  002148  010F               	movlb	15	; () banked
  3695  00214A  6F38               	movwf	56,b	;volatile
  3696                           
  3697                           ;Main_PowerSense.c: 157: ANSELB = 0b00000000;
  3698  00214C  0E00               	movlw	0
  3699  00214E  6F39               	movwf	57,b	;volatile
  3700                           
  3701                           ;Main_PowerSense.c: 158: ANSELC = 0b00000000;
  3702  002150  0E00               	movlw	0
  3703  002152  6F3A               	movwf	58,b	;volatile
  3704  002154  0012               	return	
  3705  002156                     __end_of_initIO:
  3706                           	opt stack 0
  3707                           tblptru	equ	0xFF8
  3708                           intcon	equ	0xFF2
  3709                           intcon2	equ	0xFF1
  3710                           intcon3	equ	0xFF0
  3711                           postinc0	equ	0xFEE
  3712                           wreg	equ	0xFE8
  3713                           postinc2	equ	0xFDE
  3714                           postdec2	equ	0xFDD
  3715                           fsr2h	equ	0xFDA
  3716                           fsr2l	equ	0xFD9
  3717                           status	equ	0xFD8
  3718                           
  3719 ;; *************** function _commRun *****************
  3720 ;; Defined at:
  3721 ;;		line 114 in file "SlaveComm.c"
  3722 ;; Parameters:    Size  Location     Type
  3723 ;;		None
  3724 ;; Auto vars:     Size  Location     Type
  3725 ;;		None
  3726 ;; Return value:  Size  Location     Type
  3727 ;;                  1    wreg      void 
  3728 ;; Registers used:
  3729 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3730 ;; Tracked objects:
  3731 ;;		On entry : 0/0
  3732 ;;		On exit  : 0/0
  3733 ;;		Unchanged: 0/0
  3734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3735 ;;      Params:         0       0       0       0       0       0       0
  3736 ;;      Locals:         0       0       0       0       0       0       0
  3737 ;;      Temps:          0       0       0       0       0       0       0
  3738 ;;      Totals:         0       0       0       0       0       0       0
  3739 ;;Total ram usage:        0 bytes
  3740 ;; Hardware stack levels used:    1
  3741 ;; Hardware stack levels required when called:   10
  3742 ;; This function calls:
  3743 ;;		_communications
  3744 ;; This function is called by:
  3745 ;;		_main
  3746 ;; This function uses a non-reentrant model
  3747 ;;
  3748                           
  3749                           	psect	text25
  3750  002170                     __ptext25:
  3751                           	opt stack 0
  3752  002170                     _commRun:
  3753                           	opt stack 20
  3754                           
  3755                           ;SlaveComm.c: 116: communications( 0 );
  3756                           
  3757                           ; BSR set to: 15
  3758                           ;incstack = 0
  3759  002170  0E00               	movlw	0
  3760  002172  EC69  F008         	call	_communications
  3761  002176  0012               	return	
  3762  002178                     __end_of_commRun:
  3763                           	opt stack 0
  3764                           tblptru	equ	0xFF8
  3765                           intcon	equ	0xFF2
  3766                           intcon2	equ	0xFF1
  3767                           intcon3	equ	0xFF0
  3768                           postinc0	equ	0xFEE
  3769                           wreg	equ	0xFE8
  3770                           postinc2	equ	0xFDE
  3771                           postdec2	equ	0xFDD
  3772                           fsr2h	equ	0xFDA
  3773                           fsr2l	equ	0xFD9
  3774                           status	equ	0xFD8
  3775                           
  3776 ;; *************** function _commInit *****************
  3777 ;; Defined at:
  3778 ;;		line 107 in file "SlaveComm.c"
  3779 ;; Parameters:    Size  Location     Type
  3780 ;;		None
  3781 ;; Auto vars:     Size  Location     Type
  3782 ;;		None
  3783 ;; Return value:  Size  Location     Type
  3784 ;;                  1    wreg      void 
  3785 ;; Registers used:
  3786 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3787 ;; Tracked objects:
  3788 ;;		On entry : 0/0
  3789 ;;		On exit  : 0/0
  3790 ;;		Unchanged: 0/0
  3791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3792 ;;      Params:         0       0       0       0       0       0       0
  3793 ;;      Locals:         0       0       0       0       0       0       0
  3794 ;;      Temps:          0       0       0       0       0       0       0
  3795 ;;      Totals:         0       0       0       0       0       0       0
  3796 ;;Total ram usage:        0 bytes
  3797 ;; Hardware stack levels used:    1
  3798 ;; Hardware stack levels required when called:   10
  3799 ;; This function calls:
  3800 ;;		_communications
  3801 ;; This function is called by:
  3802 ;;		_main
  3803 ;; This function uses a non-reentrant model
  3804 ;;
  3805                           
  3806                           	psect	text26
  3807  002178                     __ptext26:
  3808                           	opt stack 0
  3809  002178                     _commInit:
  3810                           	opt stack 20
  3811                           
  3812                           ;SlaveComm.c: 109: communications( 1 );
  3813                           
  3814                           ;incstack = 0
  3815  002178  0E01               	movlw	1
  3816  00217A  EC69  F008         	call	_communications
  3817  00217E  0012               	return	
  3818  002180                     __end_of_commInit:
  3819                           	opt stack 0
  3820                           tblptru	equ	0xFF8
  3821                           intcon	equ	0xFF2
  3822                           intcon2	equ	0xFF1
  3823                           intcon3	equ	0xFF0
  3824                           postinc0	equ	0xFEE
  3825                           wreg	equ	0xFE8
  3826                           postinc2	equ	0xFDE
  3827                           postdec2	equ	0xFDD
  3828                           fsr2h	equ	0xFDA
  3829                           fsr2l	equ	0xFD9
  3830                           status	equ	0xFD8
  3831                           
  3832 ;; *************** function _communications *****************
  3833 ;; Defined at:
  3834 ;;		line 121 in file "SlaveComm.c"
  3835 ;; Parameters:    Size  Location     Type
  3836 ;;  firstTime       1    wreg     unsigned char 
  3837 ;; Auto vars:     Size  Location     Type
  3838 ;;  firstTime       1    1[BANK1 ] unsigned char 
  3839 ;;  no_more_to_s    1    0[BANK1 ] unsigned char 
  3840 ;; Return value:  Size  Location     Type
  3841 ;;                  1    wreg      void 
  3842 ;; Registers used:
  3843 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3844 ;; Tracked objects:
  3845 ;;		On entry : 0/0
  3846 ;;		On exit  : 0/0
  3847 ;;		Unchanged: 0/0
  3848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3849 ;;      Params:         0       0       0       0       0       0       0
  3850 ;;      Locals:         0       0       2       0       0       0       0
  3851 ;;      Temps:          0       0       0       0       0       0       0
  3852 ;;      Totals:         0       0       2       0       0       0       0
  3853 ;;Total ram usage:        2 bytes
  3854 ;; Hardware stack levels used:    1
  3855 ;; Hardware stack levels required when called:    9
  3856 ;; This function calls:
  3857 ;;		_SPISlaveInit
  3858 ;;		_process_data
  3859 ;;		_receive_data
  3860 ;;		_resetCommunications
  3861 ;;		_send_data
  3862 ;;		_xSumMatches
  3863 ;; This function is called by:
  3864 ;;		_commInit
  3865 ;;		_commRun
  3866 ;; This function uses a non-reentrant model
  3867 ;;
  3868                           
  3869                           	psect	text27
  3870  0010D2                     __ptext27:
  3871                           	opt stack 0
  3872  0010D2                     _communications:
  3873                           	opt stack 20
  3874                           
  3875                           ;incstack = 0
  3876                           ;communications@firstTime stored from wreg
  3877  0010D2  0101               	movlb	1	; () banked
  3878  0010D4  6F55               	movwf	communications@firstTime& (0+255),b
  3879                           
  3880                           ;SlaveComm.c: 123: static struct buffer receive_buffer;
  3881                           ;SlaveComm.c: 124: static struct buffer send_buffer;
  3882                           ;SlaveComm.c: 126: static bool end_of_transmission_received = 0;
  3883                           ;SlaveComm.c: 127: bool no_more_to_send;
  3884                           ;SlaveComm.c: 129: static enum receive_status receive_current_state;
  3885                           ;SlaveComm.c: 132: if( firstTime == 1 )
  3886  0010D6  0101               	movlb	1	; () banked
  3887  0010D8  0555               	decf	communications@firstTime& (0+255),w,b
  3888  0010DA  A4D8               	btfss	status,2,c
  3889  0010DC  D00E               	goto	l206
  3890                           
  3891                           ; BSR set to: 1
  3892                           ;SlaveComm.c: 133: {
  3893                           ;SlaveComm.c: 134: SPISlaveInit( );
  3894  0010DE  ECD7  F00E         	call	_SPISlaveInit	;wreg free
  3895                           
  3896                           ;SlaveComm.c: 135: send_buffer.write_position = 0;
  3897  0010E2  0E00               	movlw	0
  3898  0010E4  0101               	movlb	1	; () banked
  3899  0010E6  6F28               	movwf	(communications@send_buffer+40)& (0+255),b
  3900                           
  3901                           ; BSR set to: 1
  3902                           ;SlaveComm.c: 136: send_buffer.read_position = 0;
  3903  0010E8  0E00               	movlw	0
  3904  0010EA  6F29               	movwf	(communications@send_buffer+41)& (0+255),b
  3905                           
  3906                           ; BSR set to: 1
  3907                           ;SlaveComm.c: 137: resetCommunications( &send_buffer );
  3908  0010EC  0E00               	movlw	low communications@send_buffer
  3909  0010EE  6E3B               	movwf	resetCommunications@send_buffer,c
  3910  0010F0  0E01               	movlw	high communications@send_buffer
  3911  0010F2  6E3C               	movwf	resetCommunications@send_buffer+1,c
  3912  0010F4  EC9B  F00A         	call	_resetCommunications	;wreg free
  3913                           
  3914                           ;SlaveComm.c: 138: }
  3915  0010F8  0012               	return	
  3916  0010FA                     l206:
  3917                           
  3918                           ;SlaveComm.c: 139: else
  3919                           ;SlaveComm.c: 140: {
  3920                           ;SlaveComm.c: 141: receive_current_state = receive_data( &receive_buffer );
  3921  0010FA  0E2A               	movlw	low communications@receive_buffer
  3922  0010FC  6E16               	movwf	receive_data@receive_buffer,c
  3923  0010FE  0E01               	movlw	high communications@receive_buffer
  3924  001100  6E17               	movwf	receive_data@receive_buffer+1,c
  3925  001102  EC2B  F009         	call	_receive_data	;wreg free
  3926  001106  0100               	movlb	0	; () banked
  3927  001108  6FFE               	movwf	communications@receive_current_state& (0+255),b
  3928                           
  3929                           ;SlaveComm.c: 143: switch( receive_current_state )
  3930  00110A  D01E               	goto	l208
  3931  00110C                     
  3932                           ; BSR set to: 0
  3933                           ;SlaveComm.c: 153: if( process_data( &receive_buffer, &send_buffer, xSumMatches(receive_
      +                          buffer) ) == 1 )
  3934                           
  3935                           ; BSR set to: 0
  3936  00110C  0E2A               	movlw	low communications@receive_buffer
  3937  00110E  6FA7               	movwf	process_data@receive_buffer& (0+255),b
  3938  001110  0E01               	movlw	high communications@receive_buffer
  3939  001112  6FA8               	movwf	(process_data@receive_buffer+1)& (0+255),b
  3940  001114  0E00               	movlw	low communications@send_buffer
  3941  001116  6FA9               	movwf	process_data@send_buffer& (0+255),b
  3942  001118  0E01               	movlw	high communications@send_buffer
  3943  00111A  6FAA               	movwf	(process_data@send_buffer+1)& (0+255),b
  3944  00111C  EE21  F02A         	lfsr	2,communications@receive_buffer
  3945  001120  EE00  F060         	lfsr	0,xSumMatches@buffer_to_chk
  3946  001124  0E29               	movlw	41
  3947  001126                     u3401:
  3948  001126  CFDB FFEB          	movff	plusw2,plusw0
  3949  00112A  06E8               	decf	wreg,f,c
  3950  00112C  E2FC               	bc	u3401
  3951  00112E  EC93  F007         	call	_xSumMatches	;wreg free
  3952  001132  0100               	movlb	0	; () banked
  3953  001134  6FAB               	movwf	process_data@xSumMatches& (0+255),b
  3954  001136  EC5C  F00F         	call	_process_data	;wreg free
  3955  00113A  06E8               	decf	wreg,f,c
  3956  00113C  A4D8               	btfss	status,2,c
  3957  00113E  D00E               	goto	l210
  3958                           
  3959                           ;SlaveComm.c: 154: {
  3960                           ;SlaveComm.c: 155: end_of_transmission_received = 1;
  3961  001140  0E01               	movlw	1
  3962  001142  0100               	movlb	0	; () banked
  3963  001144  6FFF               	movwf	communications@end_of_transmission_received& (0+255),b
  3964                           
  3965                           ; BSR set to: 0
  3966                           ;SlaveComm.c: 159: }
  3967                           
  3968                           ; BSR set to: 0
  3969                           ;SlaveComm.c: 156: }
  3970                           ;SlaveComm.c: 158: break;
  3971  001146  D00A               	goto	l210
  3972  001148                     l208:
  3973                           
  3974                           ; BSR set to: 0
  3975                           
  3976                           ; BSR set to: 0
  3977  001148  51FE               	movf	communications@receive_current_state& (0+255),w,b
  3978                           
  3979                           ; Switch size 1, requested type "space"
  3980                           ; Number of cases is 3, Range of values is 0 to 2
  3981                           ; switch strategies available:
  3982                           ; Name         Instructions Cycles
  3983                           ; simple_byte           10     6 (average)
  3984                           ;	Chosen strategy is simple_byte
  3985  00114A  0A00               	xorlw	0	; case 0
  3986  00114C  B4D8               	btfsc	status,2,c
  3987  00114E  D006               	goto	l210
  3988  001150  0A01               	xorlw	1	; case 1
  3989  001152  B4D8               	btfsc	status,2,c
  3990  001154  D003               	goto	l210
  3991  001156  0A03               	xorlw	3	; case 2
  3992  001158  B4D8               	btfsc	status,2,c
  3993  00115A  D7D8               	goto	l212
  3994  00115C                     l210:
  3995                           
  3996                           ;SlaveComm.c: 161: no_more_to_send = send_data( &send_buffer );
  3997                           
  3998                           ; BSR set to: 0
  3999  00115C  0E00               	movlw	low communications@send_buffer
  4000  00115E  6E15               	movwf	send_data@send_buffer,c
  4001  001160  0E01               	movlw	high communications@send_buffer
  4002  001162  6E16               	movwf	send_data@send_buffer+1,c
  4003  001164  EC80  F00B         	call	_send_data	;wreg free
  4004  001168  0101               	movlb	1	; () banked
  4005  00116A  6F54               	movwf	communications@no_more_to_send& (0+255),b
  4006                           
  4007                           ; BSR set to: 1
  4008                           ;SlaveComm.c: 164: static bool last_state_active = 0;
  4009                           ;SlaveComm.c: 165: if( PORTBbits.SS2 == 0b1 )
  4010  00116C  A081               	btfss	3969,0,c	;volatile
  4011  00116E  D004               	goto	l216
  4012                           
  4013                           ; BSR set to: 1
  4014                           ;SlaveComm.c: 166: {
  4015                           ;SlaveComm.c: 167: last_state_active = 0;
  4016  001170  0E00               	movlw	0
  4017  001172  0100               	movlb	0	; () banked
  4018  001174  6FFD               	movwf	communications@last_state_active& (0+255),b
  4019                           
  4020                           ;SlaveComm.c: 168: }
  4021  001176  0012               	return	
  4022  001178                     l216:
  4023                           
  4024                           ;SlaveComm.c: 169: else
  4025                           ;SlaveComm.c: 170: {
  4026                           ;SlaveComm.c: 171: if( last_state_active == 0 )
  4027                           
  4028                           ; BSR set to: 0
  4029  001178  0100               	movlb	0	; () banked
  4030  00117A  51FD               	movf	communications@last_state_active& (0+255),w,b
  4031  00117C  A4D8               	btfss	status,2,c
  4032  00117E  D006               	goto	l218
  4033                           
  4034                           ; BSR set to: 0
  4035                           ;SlaveComm.c: 172: {
  4036                           ;SlaveComm.c: 173: resetCommunications( &send_buffer );
  4037  001180  0E00               	movlw	low communications@send_buffer
  4038  001182  6E3B               	movwf	resetCommunications@send_buffer,c
  4039  001184  0E01               	movlw	high communications@send_buffer
  4040  001186  6E3C               	movwf	resetCommunications@send_buffer+1,c
  4041  001188  EC9B  F00A         	call	_resetCommunications	;wreg free
  4042  00118C                     l218:
  4043                           
  4044                           ;SlaveComm.c: 174: }
  4045                           ;SlaveComm.c: 176: last_state_active = 1;
  4046  00118C  0E01               	movlw	1
  4047  00118E  0100               	movlb	0	; () banked
  4048  001190  6FFD               	movwf	communications@last_state_active& (0+255),b
  4049                           
  4050                           ; BSR set to: 0
  4051                           
  4052                           ; BSR set to: 0
  4053  001192  0012               	return	
  4054  001194                     __end_of_communications:
  4055                           	opt stack 0
  4056                           tblptru	equ	0xFF8
  4057                           intcon	equ	0xFF2
  4058                           intcon2	equ	0xFF1
  4059                           intcon3	equ	0xFF0
  4060                           postinc0	equ	0xFEE
  4061                           plusw0	equ	0xFEB
  4062                           wreg	equ	0xFE8
  4063                           postinc2	equ	0xFDE
  4064                           postdec2	equ	0xFDD
  4065                           plusw2	equ	0xFDB
  4066                           fsr2h	equ	0xFDA
  4067                           fsr2l	equ	0xFD9
  4068                           status	equ	0xFD8
  4069                           
  4070 ;; *************** function _xSumMatches *****************
  4071 ;; Defined at:
  4072 ;;		line 413 in file "SlaveComm.c"
  4073 ;; Parameters:    Size  Location     Type
  4074 ;;  buffer_to_ch   42    0[BANK0 ] struct buffer
  4075 ;; Auto vars:     Size  Location     Type
  4076 ;;  recXsumbuf     16   42[BANK0 ] unsigned char [16]
  4077 ;;  i               2   69[BANK0 ] int 
  4078 ;;  data            2   66[BANK0 ] PTR unsigned char 
  4079 ;;		 -> buffer_to_chk.data_buffer(40), xSumMatches@buffer_to_chk(42), 
  4080 ;;  recXsumPoint    2   64[BANK0 ] int 
  4081 ;;  recXsum         2   60[BANK0 ] int 
  4082 ;;  xsum            2   58[BANK0 ] int 
  4083 ;;  currentData     1   68[BANK0 ] unsigned char 
  4084 ;;  matches         1   63[BANK0 ] unsigned char 
  4085 ;;  xsumRecievin    1   62[BANK0 ] unsigned char 
  4086 ;; Return value:  Size  Location     Type
  4087 ;;                  1    wreg      unsigned char 
  4088 ;; Registers used:
  4089 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4090 ;; Tracked objects:
  4091 ;;		On entry : 0/0
  4092 ;;		On exit  : 0/0
  4093 ;;		Unchanged: 0/0
  4094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4095 ;;      Params:         0      42       0       0       0       0       0
  4096 ;;      Locals:         0      29       0       0       0       0       0
  4097 ;;      Temps:          1       0       0       0       0       0       0
  4098 ;;      Totals:         1      71       0       0       0       0       0
  4099 ;;Total ram usage:       72 bytes
  4100 ;; Hardware stack levels used:    1
  4101 ;; Hardware stack levels required when called:    3
  4102 ;; This function calls:
  4103 ;;		_atoi
  4104 ;; This function is called by:
  4105 ;;		_communications
  4106 ;; This function uses a non-reentrant model
  4107 ;;
  4108                           
  4109                           	psect	text28
  4110  000F26                     __ptext28:
  4111                           	opt stack 0
  4112  000F26                     _xSumMatches:
  4113                           	opt stack 25
  4114                           
  4115                           ;SlaveComm.c: 417: int xsum = 0;
  4116                           
  4117                           ;incstack = 0
  4118  000F26  0E00               	movlw	0
  4119  000F28  0100               	movlb	0	; () banked
  4120  000F2A  6F9B               	movwf	(xSumMatches@xsum+1)& (0+255),b
  4121  000F2C  0E00               	movlw	0
  4122  000F2E  6F9A               	movwf	xSumMatches@xsum& (0+255),b
  4123                           
  4124                           ;SlaveComm.c: 418: int recXsum = 0;
  4125  000F30  0E00               	movlw	0
  4126  000F32  6F9D               	movwf	(xSumMatches@recXsum+1)& (0+255),b
  4127  000F34  0E00               	movlw	0
  4128  000F36  6F9C               	movwf	xSumMatches@recXsum& (0+255),b
  4129                           
  4130                           ;SlaveComm.c: 419: char recXsumbuf[16];
  4131                           ;SlaveComm.c: 420: int recXsumPointer = 0;
  4132  000F38  0E00               	movlw	0
  4133  000F3A  6FA1               	movwf	(xSumMatches@recXsumPointer+1)& (0+255),b
  4134  000F3C  0E00               	movlw	0
  4135  000F3E  6FA0               	movwf	xSumMatches@recXsumPointer& (0+255),b
  4136                           
  4137                           ;SlaveComm.c: 421: bool xsumRecieving = 0;
  4138  000F40  0E00               	movlw	0
  4139  000F42  6F9E               	movwf	xSumMatches@xsumRecieving& (0+255),b
  4140                           
  4141                           ; BSR set to: 0
  4142                           ;SlaveComm.c: 422: char currentData;
  4143                           ;SlaveComm.c: 423: char* data = buffer_to_chk.data_buffer;
  4144  000F44  0E60               	movlw	low xSumMatches@buffer_to_chk
  4145  000F46  6FA2               	movwf	xSumMatches@data& (0+255),b
  4146  000F48  0E00               	movlw	high xSumMatches@buffer_to_chk
  4147  000F4A  6FA3               	movwf	(xSumMatches@data+1)& (0+255),b
  4148                           
  4149                           ; BSR set to: 0
  4150                           ;SlaveComm.c: 424: int i = 1;
  4151  000F4C  0E00               	movlw	0
  4152  000F4E  6FA6               	movwf	(xSumMatches@i+1)& (0+255),b
  4153  000F50  0E01               	movlw	1
  4154  000F52  6FA5               	movwf	xSumMatches@i& (0+255),b
  4155                           
  4156                           ;SlaveComm.c: 427: while (currentData != '*'){
  4157  000F54  D03B               	goto	l293
  4158  000F56                     
  4159                           ; BSR set to: 0
  4160                           ;SlaveComm.c: 429: currentData = data[i];
  4161                           
  4162                           ; BSR set to: 0
  4163  000F56  51A5               	movf	xSumMatches@i& (0+255),w,b
  4164  000F58  25A2               	addwf	xSumMatches@data& (0+255),w,b
  4165  000F5A  6ED9               	movwf	fsr2l,c
  4166  000F5C  51A6               	movf	(xSumMatches@i+1)& (0+255),w,b
  4167  000F5E  21A3               	addwfc	(xSumMatches@data+1)& (0+255),w,b
  4168  000F60  6EDA               	movwf	fsr2h,c
  4169  000F62  50DF               	movf	indf2,w,c
  4170  000F64  6FA4               	movwf	xSumMatches@currentData& (0+255),b
  4171                           
  4172                           ; BSR set to: 0
  4173                           ;SlaveComm.c: 430: i++;
  4174  000F66  4BA5               	infsnz	xSumMatches@i& (0+255),f,b
  4175  000F68  2BA6               	incf	(xSumMatches@i+1)& (0+255),f,b
  4176                           
  4177                           ; BSR set to: 0
  4178                           ;SlaveComm.c: 432: if (xsumRecieving){
  4179  000F6A  519E               	movf	xSumMatches@xsumRecieving& (0+255),w,b
  4180  000F6C  B4D8               	btfsc	status,2,c
  4181  000F6E  D00B               	goto	l290
  4182                           
  4183                           ; BSR set to: 0
  4184                           ;SlaveComm.c: 433: recXsumbuf[recXsumPointer] = currentData;
  4185  000F70  0E8A               	movlw	low xSumMatches@recXsumbuf
  4186  000F72  25A0               	addwf	xSumMatches@recXsumPointer& (0+255),w,b
  4187  000F74  6ED9               	movwf	fsr2l,c
  4188  000F76  0E00               	movlw	high xSumMatches@recXsumbuf
  4189  000F78  21A1               	addwfc	(xSumMatches@recXsumPointer+1)& (0+255),w,b
  4190  000F7A  6EDA               	movwf	fsr2h,c
  4191  000F7C  C0A4  FFDF         	movff	xSumMatches@currentData,indf2
  4192                           
  4193                           ; BSR set to: 0
  4194                           ;SlaveComm.c: 434: recXsumPointer++;
  4195  000F80  4BA0               	infsnz	xSumMatches@recXsumPointer& (0+255),f,b
  4196  000F82  2BA1               	incf	(xSumMatches@recXsumPointer+1)& (0+255),f,b
  4197                           
  4198                           ;SlaveComm.c: 435: }
  4199  000F84  D023               	goto	l293
  4200  000F86                     l290:
  4201                           
  4202                           ; BSR set to: 0
  4203                           ;SlaveComm.c: 436: else{
  4204                           ;SlaveComm.c: 438: if (data[i] == '$'){
  4205                           
  4206                           ; BSR set to: 0
  4207  000F86  51A5               	movf	xSumMatches@i& (0+255),w,b
  4208  000F88  25A2               	addwf	xSumMatches@data& (0+255),w,b
  4209  000F8A  6ED9               	movwf	fsr2l,c
  4210  000F8C  51A6               	movf	(xSumMatches@i+1)& (0+255),w,b
  4211  000F8E  21A3               	addwfc	(xSumMatches@data+1)& (0+255),w,b
  4212  000F90  6EDA               	movwf	fsr2h,c
  4213  000F92  0E24               	movlw	36
  4214  000F94  18DE               	xorwf	postinc2,w,c
  4215  000F96  A4D8               	btfss	status,2,c
  4216  000F98  D015               	goto	l292
  4217                           
  4218                           ; BSR set to: 0
  4219                           ;SlaveComm.c: 439: data[i] = '\0';
  4220  000F9A  51A5               	movf	xSumMatches@i& (0+255),w,b
  4221  000F9C  25A2               	addwf	xSumMatches@data& (0+255),w,b
  4222  000F9E  6ED9               	movwf	fsr2l,c
  4223  000FA0  51A6               	movf	(xSumMatches@i+1)& (0+255),w,b
  4224  000FA2  21A3               	addwfc	(xSumMatches@data+1)& (0+255),w,b
  4225  000FA4  6EDA               	movwf	fsr2h,c
  4226  000FA6  0E00               	movlw	0
  4227  000FA8  6EDF               	movwf	indf2,c
  4228                           
  4229                           ; BSR set to: 0
  4230                           ;SlaveComm.c: 440: xsumRecieving = 1;
  4231  000FAA  0E01               	movlw	1
  4232  000FAC  6F9E               	movwf	xSumMatches@xsumRecieving& (0+255),b
  4233                           
  4234                           ; BSR set to: 0
  4235                           ;SlaveComm.c: 441: recXsumbuf[recXsumPointer] = '\0';
  4236  000FAE  0E8A               	movlw	low xSumMatches@recXsumbuf
  4237  000FB0  25A0               	addwf	xSumMatches@recXsumPointer& (0+255),w,b
  4238  000FB2  6ED9               	movwf	fsr2l,c
  4239  000FB4  0E00               	movlw	high xSumMatches@recXsumbuf
  4240  000FB6  21A1               	addwfc	(xSumMatches@recXsumPointer+1)& (0+255),w,b
  4241  000FB8  6EDA               	movwf	fsr2h,c
  4242  000FBA  0E00               	movlw	0
  4243  000FBC  6EDF               	movwf	indf2,c
  4244                           
  4245                           ; BSR set to: 0
  4246                           ;SlaveComm.c: 442: i++;
  4247  000FBE  4BA5               	infsnz	xSumMatches@i& (0+255),f,b
  4248  000FC0  2BA6               	incf	(xSumMatches@i+1)& (0+255),f,b
  4249                           
  4250                           ;SlaveComm.c: 443: }
  4251  000FC2  D004               	goto	l293
  4252  000FC4                     l292:
  4253                           
  4254                           ; BSR set to: 0
  4255                           ;SlaveComm.c: 444: else{
  4256                           ;SlaveComm.c: 445: xsum += currentData;
  4257                           
  4258                           ; BSR set to: 0
  4259  000FC4  51A4               	movf	xSumMatches@currentData& (0+255),w,b
  4260  000FC6  279A               	addwf	xSumMatches@xsum& (0+255),f,b
  4261  000FC8  0E00               	movlw	0
  4262  000FCA  239B               	addwfc	(xSumMatches@xsum+1)& (0+255),f,b
  4263  000FCC                     l293:
  4264                           
  4265                           ; BSR set to: 0
  4266                           
  4267                           ; BSR set to: 0
  4268                           
  4269                           ; BSR set to: 0
  4270  000FCC  0E2A               	movlw	42
  4271  000FCE  19A4               	xorwf	xSumMatches@currentData& (0+255),w,b
  4272  000FD0  A4D8               	btfss	status,2,c
  4273  000FD2  D7C1               	goto	l289
  4274                           
  4275                           ; BSR set to: 0
  4276                           ;SlaveComm.c: 446: }
  4277                           ;SlaveComm.c: 448: }
  4278                           ;SlaveComm.c: 450: }
  4279                           ;SlaveComm.c: 452: bool matches = 0;
  4280                           
  4281                           ; BSR set to: 0
  4282  000FD4  0E00               	movlw	0
  4283  000FD6  6F9F               	movwf	xSumMatches@matches& (0+255),b
  4284                           
  4285                           ; BSR set to: 0
  4286                           ;SlaveComm.c: 454: recXsum = atoi (recXsumbuf);
  4287  000FD8  0E8A               	movlw	low xSumMatches@recXsumbuf
  4288  000FDA  6E19               	movwf	atoi@s,c
  4289  000FDC  0E00               	movlw	high xSumMatches@recXsumbuf
  4290  000FDE  6E1A               	movwf	atoi@s+1,c
  4291  000FE0  EC02  F008         	call	_atoi	;wreg free
  4292  000FE4  C019  F09C         	movff	?_atoi,xSumMatches@recXsum
  4293  000FE8  C01A  F09D         	movff	?_atoi+1,xSumMatches@recXsum+1
  4294                           
  4295                           ;SlaveComm.c: 455: if (xsum == recXsum){
  4296  000FEC  0100               	movlb	0	; () banked
  4297  000FEE  519C               	movf	xSumMatches@recXsum& (0+255),w,b
  4298  000FF0  199A               	xorwf	xSumMatches@xsum& (0+255),w,b
  4299  000FF2  E106               	bnz	l295
  4300  000FF4  519D               	movf	(xSumMatches@recXsum+1)& (0+255),w,b
  4301  000FF6  199B               	xorwf	(xSumMatches@xsum+1)& (0+255),w,b
  4302  000FF8  A4D8               	btfss	status,2,c
  4303  000FFA  D002               	goto	l295
  4304                           
  4305                           ; BSR set to: 0
  4306                           ;SlaveComm.c: 456: matches = 1;
  4307  000FFC  0E01               	movlw	1
  4308  000FFE  6F9F               	movwf	xSumMatches@matches& (0+255),b
  4309  001000                     l295:
  4310                           
  4311                           ; BSR set to: 0
  4312                           ;SlaveComm.c: 457: }
  4313                           ;SlaveComm.c: 459: return matches;
  4314  001000  519F               	movf	xSumMatches@matches& (0+255),w,b
  4315  001002  0012               	return	
  4316  001004                     __end_of_xSumMatches:
  4317                           	opt stack 0
  4318                           tblptru	equ	0xFF8
  4319                           intcon	equ	0xFF2
  4320                           intcon2	equ	0xFF1
  4321                           intcon3	equ	0xFF0
  4322                           postinc0	equ	0xFEE
  4323                           plusw0	equ	0xFEB
  4324                           wreg	equ	0xFE8
  4325                           indf2	equ	0xFDF
  4326                           postinc2	equ	0xFDE
  4327                           postdec2	equ	0xFDD
  4328                           plusw2	equ	0xFDB
  4329                           fsr2h	equ	0xFDA
  4330                           fsr2l	equ	0xFD9
  4331                           status	equ	0xFD8
  4332                           
  4333 ;; *************** function _atoi *****************
  4334 ;; Defined at:
  4335 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atoi.c"
  4336 ;; Parameters:    Size  Location     Type
  4337 ;;  s               2   24[COMRAM] PTR const unsigned char 
  4338 ;;		 -> xSumMatches@recXsumbuf(16), 
  4339 ;; Auto vars:     Size  Location     Type
  4340 ;;  a               2   29[COMRAM] int 
  4341 ;;  sign            1   28[COMRAM] unsigned char 
  4342 ;; Return value:  Size  Location     Type
  4343 ;;                  2   24[COMRAM] int 
  4344 ;; Registers used:
  4345 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4346 ;; Tracked objects:
  4347 ;;		On entry : 0/0
  4348 ;;		On exit  : 0/0
  4349 ;;		Unchanged: 0/0
  4350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4351 ;;      Params:         2       0       0       0       0       0       0
  4352 ;;      Locals:         3       0       0       0       0       0       0
  4353 ;;      Temps:          2       0       0       0       0       0       0
  4354 ;;      Totals:         7       0       0       0       0       0       0
  4355 ;;Total ram usage:        7 bytes
  4356 ;; Hardware stack levels used:    1
  4357 ;; Hardware stack levels required when called:    2
  4358 ;; This function calls:
  4359 ;;		___wmul
  4360 ;;		_isdigit
  4361 ;; This function is called by:
  4362 ;;		_xSumMatches
  4363 ;; This function uses a non-reentrant model
  4364 ;;
  4365                           
  4366                           	psect	text29
  4367  001004                     __ptext29:
  4368                           	opt stack 0
  4369  001004                     _atoi:
  4370                           	opt stack 25
  4371                           
  4372                           ; BSR set to: 0
  4373                           ;incstack = 0
  4374  001004  D002               	goto	l767
  4375  001006  4A19               	infsnz	atoi@s,f,c
  4376  001008  2A1A               	incf	atoi@s+1,f,c
  4377  00100A                     l767:
  4378  00100A  C019  FFD9         	movff	atoi@s,fsr2l
  4379  00100E  C01A  FFDA         	movff	atoi@s+1,fsr2h
  4380  001012  0E20               	movlw	32
  4381  001014  18DE               	xorwf	postinc2,w,c
  4382  001016  B4D8               	btfsc	status,2,c
  4383  001018  D7F6               	goto	l768
  4384  00101A  C019  FFD9         	movff	atoi@s,fsr2l
  4385  00101E  C01A  FFDA         	movff	atoi@s+1,fsr2h
  4386  001022  0E09               	movlw	9
  4387  001024  18DE               	xorwf	postinc2,w,c
  4388  001026  B4D8               	btfsc	status,2,c
  4389  001028  D7EE               	goto	l768
  4390  00102A  0E00               	movlw	0
  4391  00102C  6E1F               	movwf	atoi@a+1,c
  4392  00102E  0E00               	movlw	0
  4393  001030  6E1E               	movwf	atoi@a,c
  4394  001032  0E00               	movlw	0
  4395  001034  6E1D               	movwf	atoi@sign,c
  4396  001036  C019  FFD9         	movff	atoi@s,fsr2l
  4397  00103A  C01A  FFDA         	movff	atoi@s+1,fsr2h
  4398  00103E  0E2D               	movlw	45
  4399  001040  18DE               	xorwf	postinc2,w,c
  4400  001042  A4D8               	btfss	status,2,c
  4401  001044  D002               	goto	l770
  4402  001046  2A1D               	incf	atoi@sign,f,c
  4403  001048  D024               	goto	l4129
  4404  00104A                     l770:
  4405  00104A  C019  FFD9         	movff	atoi@s,fsr2l
  4406  00104E  C01A  FFDA         	movff	atoi@s+1,fsr2h
  4407  001052  0E2B               	movlw	43
  4408  001054  18DE               	xorwf	postinc2,w,c
  4409  001056  A4D8               	btfss	status,2,c
  4410  001058  D01E               	goto	l773
  4411  00105A  D01B               	goto	l4129
  4412  00105C  C01E  F013         	movff	atoi@a,___wmul@multiplier
  4413  001060  C01F  F014         	movff	atoi@a+1,___wmul@multiplier+1
  4414  001064  0E00               	movlw	0
  4415  001066  6E16               	movwf	___wmul@multiplicand+1,c
  4416  001068  0E0A               	movlw	10
  4417  00106A  6E15               	movwf	___wmul@multiplicand,c
  4418  00106C  EC2E  F010         	call	___wmul	;wreg free
  4419  001070  C019  FFD9         	movff	atoi@s,fsr2l
  4420  001074  C01A  FFDA         	movff	atoi@s+1,fsr2h
  4421  001078  50DF               	movf	indf2,w,c
  4422  00107A  6E1B               	movwf	??_atoi& (0+255),c
  4423  00107C  6A1C               	clrf	(??_atoi+1)& (0+255),c
  4424  00107E  5013               	movf	?___wmul,w,c
  4425  001080  261B               	addwf	??_atoi,f,c
  4426  001082  5014               	movf	?___wmul+1,w,c
  4427  001084  221C               	addwfc	??_atoi+1,f,c
  4428  001086  0ED0               	movlw	208
  4429  001088  241B               	addwf	??_atoi,w,c
  4430  00108A  6E1E               	movwf	atoi@a,c
  4431  00108C  0EFF               	movlw	255
  4432  00108E  201C               	addwfc	??_atoi+1,w,c
  4433  001090  6E1F               	movwf	atoi@a+1,c
  4434  001092                     l4129:
  4435  001092  4A19               	infsnz	atoi@s,f,c
  4436  001094  2A1A               	incf	atoi@s+1,f,c
  4437  001096                     l773:
  4438  001096  C019  FFD9         	movff	atoi@s,fsr2l
  4439  00109A  C01A  FFDA         	movff	atoi@s+1,fsr2h
  4440  00109E  50DF               	movf	indf2,w,c
  4441  0010A0  EC6F  F010         	call	_isdigit
  4442  0010A4  B0D8               	btfsc	status,0,c
  4443  0010A6  D7DA               	goto	l774
  4444  0010A8  501D               	movf	atoi@sign,w,c
  4445  0010AA  B4D8               	btfsc	status,2,c
  4446  0010AC  D00D               	goto	l776
  4447  0010AE  C01E  F01B         	movff	atoi@a,??_atoi
  4448  0010B2  C01F  F01C         	movff	atoi@a+1,??_atoi+1
  4449  0010B6  1E1B               	comf	??_atoi,f,c
  4450  0010B8  1E1C               	comf	??_atoi+1,f,c
  4451  0010BA  4A1B               	infsnz	??_atoi,f,c
  4452  0010BC  2A1C               	incf	??_atoi+1,f,c
  4453  0010BE  C01B  F019         	movff	??_atoi,?_atoi
  4454  0010C2  C01C  F01A         	movff	??_atoi+1,?_atoi+1
  4455  0010C6  0012               	return	
  4456  0010C8                     l776:
  4457  0010C8  C01E  F019         	movff	atoi@a,?_atoi
  4458  0010CC  C01F  F01A         	movff	atoi@a+1,?_atoi+1
  4459  0010D0  0012               	return		;funcret
  4460  0010D2                     __end_of_atoi:
  4461                           	opt stack 0
  4462                           tblptru	equ	0xFF8
  4463                           intcon	equ	0xFF2
  4464                           intcon2	equ	0xFF1
  4465                           intcon3	equ	0xFF0
  4466                           postinc0	equ	0xFEE
  4467                           plusw0	equ	0xFEB
  4468                           wreg	equ	0xFE8
  4469                           indf2	equ	0xFDF
  4470                           postinc2	equ	0xFDE
  4471                           postdec2	equ	0xFDD
  4472                           plusw2	equ	0xFDB
  4473                           fsr2h	equ	0xFDA
  4474                           fsr2l	equ	0xFD9
  4475                           status	equ	0xFD8
  4476                           
  4477 ;; *************** function _send_data *****************
  4478 ;; Defined at:
  4479 ;;		line 558 in file "SlaveComm.c"
  4480 ;; Parameters:    Size  Location     Type
  4481 ;;  send_buffer     2   20[COMRAM] PTR struct buffer
  4482 ;;		 -> communications@send_buffer(42), 
  4483 ;; Auto vars:     Size  Location     Type
  4484 ;;  send_end        1   24[COMRAM] unsigned char 
  4485 ;; Return value:  Size  Location     Type
  4486 ;;                  1    wreg      unsigned char 
  4487 ;; Registers used:
  4488 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4489 ;; Tracked objects:
  4490 ;;		On entry : 0/0
  4491 ;;		On exit  : 0/0
  4492 ;;		Unchanged: 0/0
  4493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4494 ;;      Params:         2       0       0       0       0       0       0
  4495 ;;      Locals:         1       0       0       0       0       0       0
  4496 ;;      Temps:          2       0       0       0       0       0       0
  4497 ;;      Totals:         5       0       0       0       0       0       0
  4498 ;;Total ram usage:        5 bytes
  4499 ;; Hardware stack levels used:    1
  4500 ;; Hardware stack levels required when called:    2
  4501 ;; This function calls:
  4502 ;;		_SPI_send_data
  4503 ;; This function is called by:
  4504 ;;		_communications
  4505 ;; This function uses a non-reentrant model
  4506 ;;
  4507                           
  4508                           	psect	text30
  4509  001700                     __ptext30:
  4510                           	opt stack 0
  4511  001700                     _send_data:
  4512                           	opt stack 26
  4513                           
  4514                           ;SlaveComm.c: 560: bool send_end;
  4515                           ;SlaveComm.c: 562: if( send_buffer->read_position == send_buffer->write_position )
  4516                           
  4517                           ;incstack = 0
  4518  001700  EE20 F028          	lfsr	2,40
  4519  001704  5015               	movf	send_data@send_buffer,w,c
  4520  001706  26D9               	addwf	fsr2l,f,c
  4521  001708  5016               	movf	send_data@send_buffer+1,w,c
  4522  00170A  22DA               	addwfc	fsr2h,f,c
  4523  00170C  EE10 F029          	lfsr	1,41
  4524  001710  5015               	movf	send_data@send_buffer,w,c
  4525  001712  26E1               	addwf	fsr1l,f,c
  4526  001714  5016               	movf	send_data@send_buffer+1,w,c
  4527  001716  22E2               	addwfc	fsr1h,f,c
  4528  001718  50DE               	movf	postinc2,w,c
  4529  00171A  18E6               	xorwf	postinc1,w,c
  4530  00171C  A4D8               	btfss	status,2,c
  4531  00171E  D006               	goto	l324
  4532                           
  4533                           ;SlaveComm.c: 563: {
  4534                           ;SlaveComm.c: 564: send_end = 1;
  4535  001720  0E01               	movlw	1
  4536  001722  6E19               	movwf	send_data@send_end,c
  4537                           
  4538                           ;SlaveComm.c: 565: SPI_send_data( '\0' );
  4539  001724  0E00               	movlw	0
  4540  001726  EC41  F010         	call	_SPI_send_data
  4541                           
  4542                           ;SlaveComm.c: 566: }
  4543  00172A  D030               	goto	l327
  4544  00172C                     l324:
  4545                           
  4546                           ;SlaveComm.c: 567: else
  4547                           ;SlaveComm.c: 568: {
  4548                           ;SlaveComm.c: 569: send_end = 0;
  4549  00172C  0E00               	movlw	0
  4550  00172E  6E19               	movwf	send_data@send_end,c
  4551                           
  4552                           ;SlaveComm.c: 572: if( SPI_send_data( send_buffer->data_buffer[send_buffer->read_positio
      +                          n] ) == 1 )
  4553  001730  EE20 F029          	lfsr	2,41
  4554  001734  5015               	movf	send_data@send_buffer,w,c
  4555  001736  26D9               	addwf	fsr2l,f,c
  4556  001738  5016               	movf	send_data@send_buffer+1,w,c
  4557  00173A  22DA               	addwfc	fsr2h,f,c
  4558  00173C  50DF               	movf	indf2,w,c
  4559  00173E  6E17               	movwf	??_send_data& (0+255),c
  4560  001740  5017               	movf	??_send_data,w,c
  4561  001742  0D01               	mullw	1
  4562  001744  50F3               	movf	prodl,w,c
  4563  001746  2415               	addwf	send_data@send_buffer,w,c
  4564  001748  6ED9               	movwf	fsr2l,c
  4565  00174A  50F4               	movf	prodh,w,c
  4566  00174C  2016               	addwfc	send_data@send_buffer+1,w,c
  4567  00174E  6EDA               	movwf	fsr2h,c
  4568  001750  50DF               	movf	indf2,w,c
  4569  001752  EC41  F010         	call	_SPI_send_data
  4570  001756  06E8               	decf	wreg,f,c
  4571  001758  A4D8               	btfss	status,2,c
  4572  00175A  D018               	goto	l327
  4573                           
  4574                           ;SlaveComm.c: 573: {
  4575                           ;SlaveComm.c: 575: send_buffer->read_position++;
  4576  00175C  EE20 F029          	lfsr	2,41
  4577  001760  5015               	movf	send_data@send_buffer,w,c
  4578  001762  26D9               	addwf	fsr2l,f,c
  4579  001764  5016               	movf	send_data@send_buffer+1,w,c
  4580  001766  22DA               	addwfc	fsr2h,f,c
  4581  001768  2ADF               	incf	indf2,f,c
  4582                           
  4583                           ;SlaveComm.c: 576: if( send_buffer->read_position >= 40 )
  4584  00176A  EE20 F029          	lfsr	2,41
  4585  00176E  5015               	movf	send_data@send_buffer,w,c
  4586  001770  26D9               	addwf	fsr2l,f,c
  4587  001772  5016               	movf	send_data@send_buffer+1,w,c
  4588  001774  22DA               	addwfc	fsr2h,f,c
  4589  001776  0E27               	movlw	39
  4590  001778  64DF               	cpfsgt	indf2,c
  4591  00177A  D008               	goto	l327
  4592                           
  4593                           ;SlaveComm.c: 577: {
  4594                           ;SlaveComm.c: 578: send_buffer->read_position = 0;
  4595  00177C  EE20 F029          	lfsr	2,41
  4596  001780  5015               	movf	send_data@send_buffer,w,c
  4597  001782  26D9               	addwf	fsr2l,f,c
  4598  001784  5016               	movf	send_data@send_buffer+1,w,c
  4599  001786  22DA               	addwfc	fsr2h,f,c
  4600  001788  0E00               	movlw	0
  4601  00178A  6EDF               	movwf	indf2,c
  4602  00178C                     l327:
  4603                           
  4604                           ;SlaveComm.c: 579: }
  4605                           ;SlaveComm.c: 580: }
  4606                           ;SlaveComm.c: 581: }
  4607                           ;SlaveComm.c: 583: return send_end;
  4608  00178C  5019               	movf	send_data@send_end,w,c
  4609  00178E  0012               	return	
  4610  001790                     __end_of_send_data:
  4611                           	opt stack 0
  4612                           tblptru	equ	0xFF8
  4613                           prodh	equ	0xFF4
  4614                           prodl	equ	0xFF3
  4615                           intcon	equ	0xFF2
  4616                           intcon2	equ	0xFF1
  4617                           intcon3	equ	0xFF0
  4618                           postinc0	equ	0xFEE
  4619                           plusw0	equ	0xFEB
  4620                           wreg	equ	0xFE8
  4621                           postinc1	equ	0xFE6
  4622                           fsr1h	equ	0xFE2
  4623                           fsr1l	equ	0xFE1
  4624                           indf2	equ	0xFDF
  4625                           postinc2	equ	0xFDE
  4626                           postdec2	equ	0xFDD
  4627                           plusw2	equ	0xFDB
  4628                           fsr2h	equ	0xFDA
  4629                           fsr2l	equ	0xFD9
  4630                           status	equ	0xFD8
  4631                           
  4632 ;; *************** function _SPI_send_data *****************
  4633 ;; Defined at:
  4634 ;;		line 656 in file "SlaveComm.c"
  4635 ;; Parameters:    Size  Location     Type
  4636 ;;  data            1    wreg     unsigned char 
  4637 ;; Auto vars:     Size  Location     Type
  4638 ;;  data            1   18[COMRAM] unsigned char 
  4639 ;;  sendGood        1   19[COMRAM] unsigned char 
  4640 ;; Return value:  Size  Location     Type
  4641 ;;                  1    wreg      unsigned char 
  4642 ;; Registers used:
  4643 ;;		wreg, status,2
  4644 ;; Tracked objects:
  4645 ;;		On entry : 0/0
  4646 ;;		On exit  : 0/0
  4647 ;;		Unchanged: 0/0
  4648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4649 ;;      Params:         0       0       0       0       0       0       0
  4650 ;;      Locals:         2       0       0       0       0       0       0
  4651 ;;      Temps:          0       0       0       0       0       0       0
  4652 ;;      Totals:         2       0       0       0       0       0       0
  4653 ;;Total ram usage:        2 bytes
  4654 ;; Hardware stack levels used:    1
  4655 ;; Hardware stack levels required when called:    1
  4656 ;; This function calls:
  4657 ;;		Nothing
  4658 ;; This function is called by:
  4659 ;;		_send_data
  4660 ;; This function uses a non-reentrant model
  4661 ;;
  4662                           
  4663                           	psect	text31
  4664  002082                     __ptext31:
  4665                           	opt stack 0
  4666  002082                     _SPI_send_data:
  4667                           	opt stack 26
  4668                           
  4669                           ;incstack = 0
  4670                           ;SPI_send_data@data stored from wreg
  4671  002082  6E13               	movwf	SPI_send_data@data,c
  4672                           
  4673                           ;SlaveComm.c: 658: bool sendGood = 0;
  4674  002084  0E00               	movlw	0
  4675  002086  6E14               	movwf	SPI_send_data@sendGood,c
  4676                           
  4677                           ;SlaveComm.c: 660: if( SPI_transmit_wait == 0 )
  4678  002088  504C               	movf	_SPI_transmit_wait,w,c
  4679  00208A  A4D8               	btfss	status,2,c
  4680  00208C  D006               	goto	l355
  4681                           
  4682                           ;SlaveComm.c: 661: {
  4683                           ;SlaveComm.c: 662: SSP2BUF = data;
  4684  00208E  C013  FF6F         	movff	SPI_send_data@data,3951	;volatile
  4685                           
  4686                           ;SlaveComm.c: 663: SPI_transmit_wait = 1;
  4687  002092  0E01               	movlw	1
  4688  002094  6E4C               	movwf	_SPI_transmit_wait,c
  4689                           
  4690                           ;SlaveComm.c: 664: sendGood = 1;
  4691  002096  0E01               	movlw	1
  4692  002098  D001               	goto	L4
  4693  00209A                     l355:
  4694                           
  4695                           ;SlaveComm.c: 666: else
  4696                           ;SlaveComm.c: 667: {
  4697                           ;SlaveComm.c: 668: sendGood = 0;
  4698  00209A  0E00               	movlw	0
  4699  00209C                     L4:
  4700  00209C  6E14               	movwf	SPI_send_data@sendGood,c
  4701                           
  4702                           ;SlaveComm.c: 669: }
  4703                           ;SlaveComm.c: 671: return sendGood;
  4704  00209E  5014               	movf	SPI_send_data@sendGood,w,c
  4705  0020A0  0012               	return	
  4706  0020A2                     __end_of_SPI_send_data:
  4707                           	opt stack 0
  4708                           tblptru	equ	0xFF8
  4709                           prodh	equ	0xFF4
  4710                           prodl	equ	0xFF3
  4711                           intcon	equ	0xFF2
  4712                           intcon2	equ	0xFF1
  4713                           intcon3	equ	0xFF0
  4714                           postinc0	equ	0xFEE
  4715                           plusw0	equ	0xFEB
  4716                           wreg	equ	0xFE8
  4717                           postinc1	equ	0xFE6
  4718                           fsr1h	equ	0xFE2
  4719                           fsr1l	equ	0xFE1
  4720                           indf2	equ	0xFDF
  4721                           postinc2	equ	0xFDE
  4722                           postdec2	equ	0xFDD
  4723                           plusw2	equ	0xFDB
  4724                           fsr2h	equ	0xFDA
  4725                           fsr2l	equ	0xFD9
  4726                           status	equ	0xFD8
  4727                           
  4728 ;; *************** function _resetCommunications *****************
  4729 ;; Defined at:
  4730 ;;		line 184 in file "SlaveComm.c"
  4731 ;; Parameters:    Size  Location     Type
  4732 ;;  send_buffer     2   58[COMRAM] PTR struct buffer
  4733 ;;		 -> communications@send_buffer(42), 
  4734 ;; Auto vars:     Size  Location     Type
  4735 ;;		None
  4736 ;; Return value:  Size  Location     Type
  4737 ;;                  1    wreg      void 
  4738 ;; Registers used:
  4739 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4740 ;; Tracked objects:
  4741 ;;		On entry : 0/0
  4742 ;;		On exit  : 0/0
  4743 ;;		Unchanged: 0/0
  4744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4745 ;;      Params:         2       0       0       0       0       0       0
  4746 ;;      Locals:         0       0       0       0       0       0       0
  4747 ;;      Temps:          0       2       0       0       0       0       0
  4748 ;;      Totals:         2       2       0       0       0       0       0
  4749 ;;Total ram usage:        4 bytes
  4750 ;; Hardware stack levels used:    1
  4751 ;; Hardware stack levels required when called:    7
  4752 ;; This function calls:
  4753 ;;		_com_command_setEnergyUsed
  4754 ;;		_com_command_setPower
  4755 ;;		_com_command_setVersion
  4756 ;; This function is called by:
  4757 ;;		_communications
  4758 ;; This function uses a non-reentrant model
  4759 ;;
  4760                           
  4761                           	psect	text32
  4762  001536                     __ptext32:
  4763                           	opt stack 0
  4764  001536                     _resetCommunications:
  4765                           	opt stack 21
  4766                           
  4767                           ;SlaveComm.c: 187: static int commState = 0;
  4768                           ;SlaveComm.c: 190: SSP2CON1bits.SSPEN = 0;
  4769                           
  4770                           ;incstack = 0
  4771  001536  9A6C               	bcf	3948,5,c	;volatile
  4772                           
  4773                           ;SlaveComm.c: 191: _delay((unsigned long)((1)*(16000000UL/4000.0)));
  4774  001538  0E06               	movlw	6
  4775  00153A  0100               	movlb	0	; () banked
  4776  00153C  6F7C               	movwf	??_resetCommunications& (0+255),b
  4777  00153E  0E30               	movlw	48
  4778  001540                     u3657:
  4779  001540  2EE8               	decfsz	wreg,f,c
  4780  001542  D7FE               	bra	u3657
  4781  001544  2F7C               	decfsz	??_resetCommunications& (0+255),f,b
  4782  001546  D7FC               	bra	u3657
  4783  001548  F000               	nop	
  4784                           
  4785                           ;SlaveComm.c: 192: SSP2CON1bits.SSPEN = 1;
  4786  00154A  8A6C               	bsf	3948,5,c	;volatile
  4787                           
  4788                           ;SlaveComm.c: 194: SSP2CON1bits.WCOL = 0;
  4789  00154C  9E6C               	bcf	3948,7,c	;volatile
  4790                           
  4791                           ;SlaveComm.c: 195: SPI_transmit_wait = 0;
  4792  00154E  0E00               	movlw	0
  4793  001550  6E4C               	movwf	_SPI_transmit_wait,c
  4794                           
  4795                           ;SlaveComm.c: 197: send_buffer->read_position = 0;
  4796  001552  EE20 F029          	lfsr	2,41
  4797  001556  503B               	movf	resetCommunications@send_buffer,w,c
  4798  001558  26D9               	addwf	fsr2l,f,c
  4799  00155A  503C               	movf	resetCommunications@send_buffer+1,w,c
  4800  00155C  22DA               	addwfc	fsr2h,f,c
  4801  00155E  0E00               	movlw	0
  4802  001560  6EDF               	movwf	indf2,c
  4803                           
  4804                           ;SlaveComm.c: 198: send_buffer->write_position = 0;
  4805  001562  EE20 F028          	lfsr	2,40
  4806  001566  503B               	movf	resetCommunications@send_buffer,w,c
  4807  001568  26D9               	addwf	fsr2l,f,c
  4808  00156A  503C               	movf	resetCommunications@send_buffer+1,w,c
  4809  00156C  22DA               	addwfc	fsr2h,f,c
  4810  00156E  0E00               	movlw	0
  4811  001570  6EDF               	movwf	indf2,c
  4812                           
  4813                           ;SlaveComm.c: 203: commState++;
  4814  001572  4A47               	infsnz	resetCommunications@commState,f,c
  4815  001574  2A48               	incf	resetCommunications@commState+1,f,c
  4816                           
  4817                           ;SlaveComm.c: 204: switch( commState )
  4818  001576  D019               	goto	l224
  4819  001578                     
  4820                           ;SlaveComm.c: 207: com_command_setVersion( send_buffer );
  4821  001578  C03B  F039         	movff	resetCommunications@send_buffer,com_command_setVersion@send_buffer
  4822  00157C  C03C  F03A         	movff	resetCommunications@send_buffer+1,com_command_setVersion@send_buffer+1
  4823  001580  EC1B  F010         	call	_com_command_setVersion	;wreg free
  4824                           
  4825                           ;SlaveComm.c: 208: break;
  4826  001584  0012               	return	
  4827  001586                     
  4828                           ;SlaveComm.c: 210: com_command_setPower( send_buffer );
  4829  001586  C03B  F039         	movff	resetCommunications@send_buffer,com_command_setPower@send_buffer
  4830  00158A  C03C  F03A         	movff	resetCommunications@send_buffer+1,com_command_setPower@send_buffer+1
  4831  00158E  EC8D  F00E         	call	_com_command_setPower	;wreg free
  4832                           
  4833                           ;SlaveComm.c: 211: break;
  4834  001592  0012               	return	
  4835  001594                     
  4836                           ;SlaveComm.c: 213: com_command_setEnergyUsed( send_buffer );
  4837  001594  C03B  F039         	movff	resetCommunications@send_buffer,com_command_setEnergyUsed@send_buffer
  4838  001598  C03C  F03A         	movff	resetCommunications@send_buffer+1,com_command_setEnergyUsed@send_buffer+1
  4839  00159C  ECB2  F00E         	call	_com_command_setEnergyUsed	;wreg free
  4840  0015A0                     
  4841                           ;SlaveComm.c: 225: commState = 0;
  4842  0015A0  0E00               	movlw	0
  4843  0015A2  6E48               	movwf	resetCommunications@commState+1,c
  4844  0015A4  0E00               	movlw	0
  4845  0015A6  6E47               	movwf	resetCommunications@commState,c
  4846                           
  4847                           ;SlaveComm.c: 227: }
  4848                           
  4849                           ;SlaveComm.c: 226: break;
  4850  0015A8  0012               	return	
  4851  0015AA                     l224:
  4852  0015AA  C047  F07C         	movff	resetCommunications@commState,??_resetCommunications
  4853  0015AE  C048  F07D         	movff	resetCommunications@commState+1,??_resetCommunications+1
  4854                           
  4855                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4856                           ; Switch size 1, requested type "space"
  4857                           ; Number of cases is 1, Range of values is 0 to 0
  4858                           ; switch strategies available:
  4859                           ; Name         Instructions Cycles
  4860                           ; simple_byte            4     3 (average)
  4861                           ;	Chosen strategy is simple_byte
  4862  0015B2  0100               	movlb	0	; () banked
  4863  0015B4  517D               	movf	(??_resetCommunications+1)& (0+255),w,b
  4864  0015B6  0A00               	xorlw	0	; case 0
  4865  0015B8  A4D8               	btfss	status,2,c
  4866  0015BA  D7F2               	goto	l229
  4867                           
  4868                           ; BSR set to: 0
  4869                           ; Switch size 1, requested type "space"
  4870                           ; Number of cases is 3, Range of values is 1 to 3
  4871                           ; switch strategies available:
  4872                           ; Name         Instructions Cycles
  4873                           ; simple_byte           10     6 (average)
  4874                           ;	Chosen strategy is simple_byte
  4875  0015BC  517C               	movf	??_resetCommunications& (0+255),w,b
  4876  0015BE  0A01               	xorlw	1	; case 1
  4877  0015C0  B4D8               	btfsc	status,2,c
  4878  0015C2  D7DA               	goto	l225
  4879  0015C4  0A03               	xorlw	3	; case 2
  4880  0015C6  B4D8               	btfsc	status,2,c
  4881  0015C8  D7DE               	goto	l227
  4882  0015CA  0A01               	xorlw	1	; case 3
  4883  0015CC  B4D8               	btfsc	status,2,c
  4884  0015CE  D7E2               	goto	l228
  4885  0015D0  D7E7               	goto	l229
  4886  0015D2                     __end_of_resetCommunications:
  4887                           	opt stack 0
  4888                           tblptru	equ	0xFF8
  4889                           prodh	equ	0xFF4
  4890                           prodl	equ	0xFF3
  4891                           intcon	equ	0xFF2
  4892                           intcon2	equ	0xFF1
  4893                           intcon3	equ	0xFF0
  4894                           postinc0	equ	0xFEE
  4895                           plusw0	equ	0xFEB
  4896                           wreg	equ	0xFE8
  4897                           postinc1	equ	0xFE6
  4898                           fsr1h	equ	0xFE2
  4899                           fsr1l	equ	0xFE1
  4900                           indf2	equ	0xFDF
  4901                           postinc2	equ	0xFDE
  4902                           postdec2	equ	0xFDD
  4903                           plusw2	equ	0xFDB
  4904                           fsr2h	equ	0xFDA
  4905                           fsr2l	equ	0xFD9
  4906                           status	equ	0xFD8
  4907                           
  4908 ;; *************** function _com_command_setVersion *****************
  4909 ;; Defined at:
  4910 ;;		line 735 in file "SlaveComm.c"
  4911 ;; Parameters:    Size  Location     Type
  4912 ;;  send_buffer     2   56[COMRAM] PTR struct buffer
  4913 ;;		 -> communications@send_buffer(42), 
  4914 ;; Auto vars:     Size  Location     Type
  4915 ;;		None
  4916 ;; Return value:  Size  Location     Type
  4917 ;;                  1    wreg      void 
  4918 ;; Registers used:
  4919 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4920 ;; Tracked objects:
  4921 ;;		On entry : 0/0
  4922 ;;		On exit  : 0/0
  4923 ;;		Unchanged: 0/0
  4924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4925 ;;      Params:         2       0       0       0       0       0       0
  4926 ;;      Locals:         0       0       0       0       0       0       0
  4927 ;;      Temps:          0       0       0       0       0       0       0
  4928 ;;      Totals:         2       0       0       0       0       0       0
  4929 ;;Total ram usage:        2 bytes
  4930 ;; Hardware stack levels used:    1
  4931 ;; Hardware stack levels required when called:    6
  4932 ;; This function calls:
  4933 ;;		_command_builder3
  4934 ;; This function is called by:
  4935 ;;		_resetCommunications
  4936 ;; This function uses a non-reentrant model
  4937 ;;
  4938                           
  4939                           	psect	text33
  4940  002036                     __ptext33:
  4941                           	opt stack 0
  4942  002036                     _com_command_setVersion:
  4943                           	opt stack 21
  4944                           
  4945                           ;SlaveComm.c: 737: command_builder3( send_buffer, "Set", "PSVersion", "444" );
  4946                           
  4947                           ;incstack = 0
  4948  002036  C039  F02F         	movff	com_command_setVersion@send_buffer,command_builder3@send_buffer
  4949  00203A  C03A  F030         	movff	com_command_setVersion@send_buffer+1,command_builder3@send_buffer+1
  4950  00203E  0E4E               	movlw	low STR_2
  4951  002040  6E31               	movwf	command_builder3@data1,c
  4952  002042  0E06               	movlw	high STR_2
  4953  002044  6E32               	movwf	command_builder3@data1+1,c
  4954  002046  0E0D               	movlw	low STR_11
  4955  002048  6E33               	movwf	command_builder3@data2,c
  4956  00204A  0E06               	movlw	high STR_11
  4957  00204C  6E34               	movwf	command_builder3@data2+1,c
  4958  00204E  0E46               	movlw	low STR_29
  4959  002050  6E35               	movwf	command_builder3@data3,c
  4960  002052  0E06               	movlw	high STR_29
  4961  002054  6E36               	movwf	command_builder3@data3+1,c
  4962  002056  ECCA  F008         	call	_command_builder3	;wreg free
  4963  00205A  0012               	return	
  4964  00205C                     __end_of_com_command_setVersion:
  4965                           	opt stack 0
  4966                           tblptru	equ	0xFF8
  4967                           prodh	equ	0xFF4
  4968                           prodl	equ	0xFF3
  4969                           intcon	equ	0xFF2
  4970                           intcon2	equ	0xFF1
  4971                           intcon3	equ	0xFF0
  4972                           postinc0	equ	0xFEE
  4973                           plusw0	equ	0xFEB
  4974                           wreg	equ	0xFE8
  4975                           postinc1	equ	0xFE6
  4976                           fsr1h	equ	0xFE2
  4977                           fsr1l	equ	0xFE1
  4978                           indf2	equ	0xFDF
  4979                           postinc2	equ	0xFDE
  4980                           postdec2	equ	0xFDD
  4981                           plusw2	equ	0xFDB
  4982                           fsr2h	equ	0xFDA
  4983                           fsr2l	equ	0xFD9
  4984                           status	equ	0xFD8
  4985                           
  4986 ;; *************** function _com_command_setPower *****************
  4987 ;; Defined at:
  4988 ;;		line 691 in file "SlaveComm.c"
  4989 ;; Parameters:    Size  Location     Type
  4990 ;;  send_buffer     2   56[COMRAM] PTR struct buffer
  4991 ;;		 -> communications@send_buffer(42), 
  4992 ;; Auto vars:     Size  Location     Type
  4993 ;;  temp           12   16[BANK0 ] unsigned char [12]
  4994 ;; Return value:  Size  Location     Type
  4995 ;;                  1    wreg      void 
  4996 ;; Registers used:
  4997 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4998 ;; Tracked objects:
  4999 ;;		On entry : 0/0
  5000 ;;		On exit  : 0/0
  5001 ;;		Unchanged: 0/0
  5002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5003 ;;      Params:         2       0       0       0       0       0       0
  5004 ;;      Locals:         0      12       0       0       0       0       0
  5005 ;;      Temps:          0       0       0       0       0       0       0
  5006 ;;      Totals:         2      12       0       0       0       0       0
  5007 ;;Total ram usage:       14 bytes
  5008 ;; Hardware stack levels used:    1
  5009 ;; Hardware stack levels required when called:    6
  5010 ;; This function calls:
  5011 ;;		_command_builder3
  5012 ;;		_ultoa
  5013 ;; This function is called by:
  5014 ;;		_resetCommunications
  5015 ;; This function uses a non-reentrant model
  5016 ;;
  5017                           
  5018                           	psect	text34
  5019  001D1A                     __ptext34:
  5020                           	opt stack 0
  5021  001D1A                     _com_command_setPower:
  5022                           	opt stack 21
  5023                           
  5024                           ;SlaveComm.c: 695: char temp[12];
  5025                           ;SlaveComm.c: 697: ultoa( temp, meterWatts_global, 10 );
  5026                           
  5027                           ;incstack = 0
  5028  001D1A  0E70               	movlw	low com_command_setPower@temp
  5029  001D1C  6E20               	movwf	ultoa@buf,c
  5030  001D1E  0E00               	movlw	high com_command_setPower@temp
  5031  001D20  6E21               	movwf	ultoa@buf+1,c
  5032  001D22  C0F8  F022         	movff	_meterWatts_global,ultoa@val
  5033  001D26  C0F9  F023         	movff	_meterWatts_global+1,ultoa@val+1
  5034  001D2A  C0FA  F024         	movff	_meterWatts_global+2,ultoa@val+2
  5035  001D2E  C0FB  F025         	movff	_meterWatts_global+3,ultoa@val+3
  5036  001D32  0E00               	movlw	0
  5037  001D34  6E27               	movwf	ultoa@base+1,c
  5038  001D36  0E0A               	movlw	10
  5039  001D38  6E26               	movwf	ultoa@base,c
  5040  001D3A  EC26  F006         	call	_ultoa	;wreg free
  5041                           
  5042                           ;SlaveComm.c: 698: command_builder3( send_buffer, "Set", "Watts", temp );
  5043  001D3E  C039  F02F         	movff	com_command_setPower@send_buffer,command_builder3@send_buffer
  5044  001D42  C03A  F030         	movff	com_command_setPower@send_buffer+1,command_builder3@send_buffer+1
  5045  001D46  0E4E               	movlw	low STR_2
  5046  001D48  6E31               	movwf	command_builder3@data1,c
  5047  001D4A  0E06               	movlw	high STR_2
  5048  001D4C  6E32               	movwf	command_builder3@data1+1,c
  5049  001D4E  0E24               	movlw	low STR_7
  5050  001D50  6E33               	movwf	command_builder3@data2,c
  5051  001D52  0E06               	movlw	high STR_7
  5052  001D54  6E34               	movwf	command_builder3@data2+1,c
  5053  001D56  0E70               	movlw	low com_command_setPower@temp
  5054  001D58  6E35               	movwf	command_builder3@data3,c
  5055  001D5A  0E00               	movlw	high com_command_setPower@temp
  5056  001D5C  6E36               	movwf	command_builder3@data3+1,c
  5057  001D5E  ECCA  F008         	call	_command_builder3	;wreg free
  5058  001D62  0012               	return	
  5059  001D64                     __end_of_com_command_setPower:
  5060                           	opt stack 0
  5061                           tblptru	equ	0xFF8
  5062                           prodh	equ	0xFF4
  5063                           prodl	equ	0xFF3
  5064                           intcon	equ	0xFF2
  5065                           intcon2	equ	0xFF1
  5066                           intcon3	equ	0xFF0
  5067                           postinc0	equ	0xFEE
  5068                           plusw0	equ	0xFEB
  5069                           wreg	equ	0xFE8
  5070                           postinc1	equ	0xFE6
  5071                           fsr1h	equ	0xFE2
  5072                           fsr1l	equ	0xFE1
  5073                           indf2	equ	0xFDF
  5074                           postinc2	equ	0xFDE
  5075                           postdec2	equ	0xFDD
  5076                           plusw2	equ	0xFDB
  5077                           fsr2h	equ	0xFDA
  5078                           fsr2l	equ	0xFD9
  5079                           status	equ	0xFD8
  5080                           
  5081 ;; *************** function _receive_data *****************
  5082 ;; Defined at:
  5083 ;;		line 231 in file "SlaveComm.c"
  5084 ;; Parameters:    Size  Location     Type
  5085 ;;  receive_buff    2   21[COMRAM] PTR struct buffer
  5086 ;;		 -> communications@receive_buffer(42), 
  5087 ;; Auto vars:     Size  Location     Type
  5088 ;;  data            1   24[COMRAM] unsigned char 
  5089 ;; Return value:  Size  Location     Type
  5090 ;;                  1    wreg      enum E6750
  5091 ;; Registers used:
  5092 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5093 ;; Tracked objects:
  5094 ;;		On entry : 0/0
  5095 ;;		On exit  : 0/0
  5096 ;;		Unchanged: 0/0
  5097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5098 ;;      Params:         2       0       0       0       0       0       0
  5099 ;;      Locals:         1       0       0       0       0       0       0
  5100 ;;      Temps:          1       0       0       0       0       0       0
  5101 ;;      Totals:         4       0       0       0       0       0       0
  5102 ;;Total ram usage:        4 bytes
  5103 ;; Hardware stack levels used:    1
  5104 ;; Hardware stack levels required when called:    2
  5105 ;; This function calls:
  5106 ;;		_SPI_receive_data
  5107 ;; This function is called by:
  5108 ;;		_communications
  5109 ;; This function uses a non-reentrant model
  5110 ;;
  5111                           
  5112                           	psect	text35
  5113  001256                     __ptext35:
  5114                           	opt stack 0
  5115  001256                     _receive_data:
  5116                           	opt stack 26
  5117                           
  5118                           ;SlaveComm.c: 233: char data;
  5119                           ;SlaveComm.c: 235: static enum receive_status my_status = receive_waiting;
  5120                           ;SlaveComm.c: 237: if( my_status == receive_end_command )
  5121                           
  5122                           ;incstack = 0
  5123  001256  0E02               	movlw	2
  5124  001258  184B               	xorwf	receive_data@my_status,w,c
  5125  00125A  A4D8               	btfss	status,2,c
  5126  00125C  D002               	goto	l235
  5127                           
  5128                           ;SlaveComm.c: 238: {
  5129                           ;SlaveComm.c: 239: my_status = receive_waiting;
  5130  00125E  0E00               	movlw	0
  5131  001260  6E4B               	movwf	receive_data@my_status,c
  5132  001262                     l235:
  5133                           
  5134                           ;SlaveComm.c: 240: }
  5135                           ;SlaveComm.c: 242: if( SPI_receive_data( &data ) == 1 )
  5136  001262  0E19               	movlw	low receive_data@data
  5137  001264  6E13               	movwf	SPI_receive_data@data,c
  5138  001266  0E00               	movlw	high receive_data@data
  5139  001268  6E14               	movwf	SPI_receive_data@data+1,c
  5140  00126A  EC07  F010         	call	_SPI_receive_data	;wreg free
  5141  00126E  06E8               	decf	wreg,f,c
  5142  001270  A4D8               	btfss	status,2,c
  5143  001272  D04F               	goto	l240
  5144                           
  5145                           ;SlaveComm.c: 243: {
  5146                           ;SlaveComm.c: 244: if( (data == '!') && (my_status != receive_in_command) )
  5147  001274  0E21               	movlw	33
  5148  001276  1819               	xorwf	receive_data@data,w,c
  5149  001278  A4D8               	btfss	status,2,c
  5150  00127A  D015               	goto	l237
  5151  00127C  044B               	decf	receive_data@my_status,w,c
  5152  00127E  B4D8               	btfsc	status,2,c
  5153  001280  D012               	goto	l237
  5154                           
  5155                           ;SlaveComm.c: 245: {
  5156                           ;SlaveComm.c: 246: my_status = receive_in_command;
  5157  001282  0E01               	movlw	1
  5158  001284  6E4B               	movwf	receive_data@my_status,c
  5159                           
  5160                           ;SlaveComm.c: 247: receive_buffer->read_position = 0;
  5161  001286  EE20 F029          	lfsr	2,41
  5162  00128A  5016               	movf	receive_data@receive_buffer,w,c
  5163  00128C  26D9               	addwf	fsr2l,f,c
  5164  00128E  5017               	movf	receive_data@receive_buffer+1,w,c
  5165  001290  22DA               	addwfc	fsr2h,f,c
  5166  001292  0E00               	movlw	0
  5167  001294  6EDF               	movwf	indf2,c
  5168                           
  5169                           ;SlaveComm.c: 248: receive_buffer->write_position = 0;
  5170  001296  EE20 F028          	lfsr	2,40
  5171  00129A  5016               	movf	receive_data@receive_buffer,w,c
  5172  00129C  26D9               	addwf	fsr2l,f,c
  5173  00129E  5017               	movf	receive_data@receive_buffer+1,w,c
  5174  0012A0  22DA               	addwfc	fsr2h,f,c
  5175  0012A2  0E00               	movlw	0
  5176  0012A4  6EDF               	movwf	indf2,c
  5177  0012A6                     l237:
  5178                           
  5179                           ;SlaveComm.c: 249: }
  5180                           ;SlaveComm.c: 251: if( my_status == receive_in_command )
  5181  0012A6  044B               	decf	receive_data@my_status,w,c
  5182  0012A8  A4D8               	btfss	status,2,c
  5183  0012AA  D02A               	goto	l239
  5184                           
  5185                           ;SlaveComm.c: 252: {
  5186                           ;SlaveComm.c: 253: receive_buffer->data_buffer[ receive_buffer->write_position] = data;
  5187  0012AC  EE20 F028          	lfsr	2,40
  5188  0012B0  5016               	movf	receive_data@receive_buffer,w,c
  5189  0012B2  26D9               	addwf	fsr2l,f,c
  5190  0012B4  5017               	movf	receive_data@receive_buffer+1,w,c
  5191  0012B6  22DA               	addwfc	fsr2h,f,c
  5192  0012B8  50DF               	movf	indf2,w,c
  5193  0012BA  6E18               	movwf	??_receive_data& (0+255),c
  5194  0012BC  5018               	movf	??_receive_data,w,c
  5195  0012BE  0D01               	mullw	1
  5196  0012C0  50F3               	movf	prodl,w,c
  5197  0012C2  2416               	addwf	receive_data@receive_buffer,w,c
  5198  0012C4  6ED9               	movwf	fsr2l,c
  5199  0012C6  50F4               	movf	prodh,w,c
  5200  0012C8  2017               	addwfc	receive_data@receive_buffer+1,w,c
  5201  0012CA  6EDA               	movwf	fsr2h,c
  5202  0012CC  C019  FFDF         	movff	receive_data@data,indf2
  5203                           
  5204                           ;SlaveComm.c: 255: receive_buffer->write_position++;
  5205  0012D0  EE20 F028          	lfsr	2,40
  5206  0012D4  5016               	movf	receive_data@receive_buffer,w,c
  5207  0012D6  26D9               	addwf	fsr2l,f,c
  5208  0012D8  5017               	movf	receive_data@receive_buffer+1,w,c
  5209  0012DA  22DA               	addwfc	fsr2h,f,c
  5210  0012DC  2ADF               	incf	indf2,f,c
  5211                           
  5212                           ;SlaveComm.c: 256: if( receive_buffer->write_position >= 40 )
  5213  0012DE  EE20 F028          	lfsr	2,40
  5214  0012E2  5016               	movf	receive_data@receive_buffer,w,c
  5215  0012E4  26D9               	addwf	fsr2l,f,c
  5216  0012E6  5017               	movf	receive_data@receive_buffer+1,w,c
  5217  0012E8  22DA               	addwfc	fsr2h,f,c
  5218  0012EA  0E27               	movlw	39
  5219  0012EC  64DF               	cpfsgt	indf2,c
  5220  0012EE  D008               	goto	l239
  5221                           
  5222                           ;SlaveComm.c: 257: {
  5223                           ;SlaveComm.c: 258: receive_buffer->write_position = (40 - 1);
  5224  0012F0  EE20 F028          	lfsr	2,40
  5225  0012F4  5016               	movf	receive_data@receive_buffer,w,c
  5226  0012F6  26D9               	addwf	fsr2l,f,c
  5227  0012F8  5017               	movf	receive_data@receive_buffer+1,w,c
  5228  0012FA  22DA               	addwfc	fsr2h,f,c
  5229  0012FC  0E27               	movlw	39
  5230  0012FE  6EDF               	movwf	indf2,c
  5231  001300                     l239:
  5232                           
  5233                           ;SlaveComm.c: 259: }
  5234                           ;SlaveComm.c: 260: }
  5235                           ;SlaveComm.c: 262: if( (my_status == receive_in_command) && (data == '*') )
  5236  001300  044B               	decf	receive_data@my_status,w,c
  5237  001302  A4D8               	btfss	status,2,c
  5238  001304  D006               	goto	l240
  5239  001306  0E2A               	movlw	42
  5240  001308  1819               	xorwf	receive_data@data,w,c
  5241  00130A  A4D8               	btfss	status,2,c
  5242  00130C  D002               	goto	l240
  5243                           
  5244                           ;SlaveComm.c: 263: {
  5245                           ;SlaveComm.c: 264: my_status = receive_end_command;
  5246  00130E  0E02               	movlw	2
  5247  001310  6E4B               	movwf	receive_data@my_status,c
  5248  001312                     l240:
  5249                           
  5250                           ;SlaveComm.c: 265: }
  5251                           ;SlaveComm.c: 266: }
  5252                           ;SlaveComm.c: 268: return my_status;
  5253  001312  504B               	movf	receive_data@my_status,w,c
  5254  001314  0012               	return	
  5255  001316                     __end_of_receive_data:
  5256                           	opt stack 0
  5257                           tblptru	equ	0xFF8
  5258                           prodh	equ	0xFF4
  5259                           prodl	equ	0xFF3
  5260                           intcon	equ	0xFF2
  5261                           intcon2	equ	0xFF1
  5262                           intcon3	equ	0xFF0
  5263                           postinc0	equ	0xFEE
  5264                           plusw0	equ	0xFEB
  5265                           wreg	equ	0xFE8
  5266                           postinc1	equ	0xFE6
  5267                           fsr1h	equ	0xFE2
  5268                           fsr1l	equ	0xFE1
  5269                           indf2	equ	0xFDF
  5270                           postinc2	equ	0xFDE
  5271                           postdec2	equ	0xFDD
  5272                           plusw2	equ	0xFDB
  5273                           fsr2h	equ	0xFDA
  5274                           fsr2l	equ	0xFD9
  5275                           status	equ	0xFD8
  5276                           
  5277 ;; *************** function _SPI_receive_data *****************
  5278 ;; Defined at:
  5279 ;;		line 635 in file "SlaveComm.c"
  5280 ;; Parameters:    Size  Location     Type
  5281 ;;  data            2   18[COMRAM] PTR unsigned char 
  5282 ;;		 -> receive_data@data(1), 
  5283 ;; Auto vars:     Size  Location     Type
  5284 ;;  recvGood        1   20[COMRAM] unsigned char 
  5285 ;; Return value:  Size  Location     Type
  5286 ;;                  1    wreg      unsigned char 
  5287 ;; Registers used:
  5288 ;;		wreg, fsr2l, fsr2h, status,2
  5289 ;; Tracked objects:
  5290 ;;		On entry : 0/0
  5291 ;;		On exit  : 0/0
  5292 ;;		Unchanged: 0/0
  5293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5294 ;;      Params:         2       0       0       0       0       0       0
  5295 ;;      Locals:         1       0       0       0       0       0       0
  5296 ;;      Temps:          0       0       0       0       0       0       0
  5297 ;;      Totals:         3       0       0       0       0       0       0
  5298 ;;Total ram usage:        3 bytes
  5299 ;; Hardware stack levels used:    1
  5300 ;; Hardware stack levels required when called:    1
  5301 ;; This function calls:
  5302 ;;		Nothing
  5303 ;; This function is called by:
  5304 ;;		_receive_data
  5305 ;; This function uses a non-reentrant model
  5306 ;;
  5307                           
  5308                           	psect	text36
  5309  00200E                     __ptext36:
  5310                           	opt stack 0
  5311  00200E                     _SPI_receive_data:
  5312                           	opt stack 26
  5313                           
  5314                           ;SlaveComm.c: 638: bool recvGood = 0;
  5315                           
  5316                           ;incstack = 0
  5317  00200E  0E00               	movlw	0
  5318  002010  6E15               	movwf	SPI_receive_data@recvGood,c
  5319                           
  5320                           ;SlaveComm.c: 640: if( SSP2STATbits.BF == 1 )
  5321  002012  A06D               	btfss	3949,0,c	;volatile
  5322  002014  D00C               	goto	l350
  5323                           
  5324                           ;SlaveComm.c: 641: {
  5325                           ;SlaveComm.c: 642: *data = SSP2BUF;
  5326  002016  C013  FFD9         	movff	SPI_receive_data@data,fsr2l
  5327  00201A  C014  FFDA         	movff	SPI_receive_data@data+1,fsr2h
  5328  00201E  CF6F FFDF          	movff	3951,indf2	;volatile
  5329                           
  5330                           ;SlaveComm.c: 643: recvGood = 1;
  5331  002022  0E01               	movlw	1
  5332  002024  6E15               	movwf	SPI_receive_data@recvGood,c
  5333                           
  5334                           ;SlaveComm.c: 644: SSP2CON1bits.WCOL = 0;
  5335  002026  9E6C               	bcf	3948,7,c	;volatile
  5336                           
  5337                           ;SlaveComm.c: 645: SPI_transmit_wait = 0;
  5338  002028  0E00               	movlw	0
  5339  00202A  6E4C               	movwf	_SPI_transmit_wait,c
  5340                           
  5341                           ;SlaveComm.c: 646: }
  5342  00202C  D002               	goto	l351
  5343  00202E                     l350:
  5344                           
  5345                           ;SlaveComm.c: 647: else
  5346                           ;SlaveComm.c: 648: {
  5347                           ;SlaveComm.c: 649: recvGood = 0;
  5348  00202E  0E00               	movlw	0
  5349  002030  6E15               	movwf	SPI_receive_data@recvGood,c
  5350  002032                     l351:
  5351                           
  5352                           ;SlaveComm.c: 650: }
  5353                           ;SlaveComm.c: 652: return recvGood;
  5354  002032  5015               	movf	SPI_receive_data@recvGood,w,c
  5355  002034  0012               	return	
  5356  002036                     __end_of_SPI_receive_data:
  5357                           	opt stack 0
  5358                           tblptru	equ	0xFF8
  5359                           prodh	equ	0xFF4
  5360                           prodl	equ	0xFF3
  5361                           intcon	equ	0xFF2
  5362                           intcon2	equ	0xFF1
  5363                           intcon3	equ	0xFF0
  5364                           postinc0	equ	0xFEE
  5365                           plusw0	equ	0xFEB
  5366                           wreg	equ	0xFE8
  5367                           postinc1	equ	0xFE6
  5368                           fsr1h	equ	0xFE2
  5369                           fsr1l	equ	0xFE1
  5370                           indf2	equ	0xFDF
  5371                           postinc2	equ	0xFDE
  5372                           postdec2	equ	0xFDD
  5373                           plusw2	equ	0xFDB
  5374                           fsr2h	equ	0xFDA
  5375                           fsr2l	equ	0xFD9
  5376                           status	equ	0xFD8
  5377                           
  5378 ;; *************** function _process_data *****************
  5379 ;; Defined at:
  5380 ;;		line 271 in file "SlaveComm.c"
  5381 ;; Parameters:    Size  Location     Type
  5382 ;;  receive_buff    2   71[BANK0 ] PTR struct buffer
  5383 ;;		 -> communications@receive_buffer(42), 
  5384 ;;  send_buffer     2   73[BANK0 ] PTR struct buffer
  5385 ;;		 -> communications@send_buffer(42), 
  5386 ;;  xSumMatches     1   75[BANK0 ] unsigned char 
  5387 ;; Auto vars:     Size  Location     Type
  5388 ;;  parameters     50   76[BANK0 ] unsigned char [10][5]
  5389 ;;  end_of_trans    1  126[BANK0 ] unsigned char 
  5390 ;; Return value:  Size  Location     Type
  5391 ;;                  1    wreg      unsigned char 
  5392 ;; Registers used:
  5393 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5394 ;; Tracked objects:
  5395 ;;		On entry : 0/0
  5396 ;;		On exit  : 0/0
  5397 ;;		Unchanged: 0/0
  5398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5399 ;;      Params:         0       5       0       0       0       0       0
  5400 ;;      Locals:         0      51       0       0       0       0       0
  5401 ;;      Temps:          0       0       0       0       0       0       0
  5402 ;;      Totals:         0      56       0       0       0       0       0
  5403 ;;Total ram usage:       56 bytes
  5404 ;; Hardware stack levels used:    1
  5405 ;; Hardware stack levels required when called:    8
  5406 ;; This function calls:
  5407 ;;		_process_data_parameterize
  5408 ;;		_process_data_parameters
  5409 ;; This function is called by:
  5410 ;;		_communications
  5411 ;; This function uses a non-reentrant model
  5412 ;;
  5413                           
  5414                           	psect	text37
  5415  001EB8                     __ptext37:
  5416                           	opt stack 0
  5417  001EB8                     _process_data:
  5418                           	opt stack 20
  5419                           
  5420                           ;SlaveComm.c: 273: bool end_of_transmission_received;
  5421                           ;SlaveComm.c: 278: char parameters[5][10];
  5422                           ;SlaveComm.c: 280: process_data_parameterize( parameters, receive_buffer );
  5423                           
  5424                           ;incstack = 0
  5425  001EB8  0EAC               	movlw	low process_data@parameters
  5426  001EBA  6E19               	movwf	process_data_parameterize@parameters,c
  5427  001EBC  0E00               	movlw	high process_data@parameters
  5428  001EBE  6E1A               	movwf	process_data_parameterize@parameters+1,c
  5429  001EC0  C0A7  F01B         	movff	process_data@receive_buffer,process_data_parameterize@buffer_to_parameterize
  5430  001EC4  C0A8  F01C         	movff	process_data@receive_buffer+1,process_data_parameterize@buffer_to_parameterize+1
  5431  001EC8  ECD0  F004         	call	_process_data_parameterize	;wreg free
  5432                           
  5433                           ;SlaveComm.c: 282: if (xSumMatches){
  5434  001ECC  0100               	movlb	0	; () banked
  5435  001ECE  51AB               	movf	process_data@xSumMatches& (0+255),w,b
  5436  001ED0  B4D8               	btfsc	status,2,c
  5437  001ED2  D00C               	goto	l244
  5438                           
  5439                           ; BSR set to: 0
  5440                           ;SlaveComm.c: 283: end_of_transmission_received = process_data_parameters( parameters, s
      +                          end_buffer );
  5441  001ED4  0EAC               	movlw	low process_data@parameters
  5442  001ED6  6F7C               	movwf	process_data_parameters@parameters& (0+255),b
  5443  001ED8  0E00               	movlw	high process_data@parameters
  5444  001EDA  6F7D               	movwf	(process_data_parameters@parameters+1)& (0+255),b
  5445  001EDC  C0A9  F07E         	movff	process_data@send_buffer,process_data_parameters@send_buffer
  5446  001EE0  C0AA  F07F         	movff	process_data@send_buffer+1,process_data_parameters@send_buffer+1
  5447  001EE4  EC2A  F003         	call	_process_data_parameters	;wreg free
  5448  001EE8  0100               	movlb	0	; () banked
  5449  001EEA  D001               	goto	L5
  5450  001EEC                     l244:
  5451                           
  5452                           ; BSR set to: 0
  5453                           ;SlaveComm.c: 285: else{
  5454                           ;SlaveComm.c: 286: end_of_transmission_received = 1;
  5455                           
  5456                           ; BSR set to: 0
  5457  001EEC  0E01               	movlw	1
  5458  001EEE                     L5:
  5459  001EEE  6FDE               	movwf	process_data@end_of_transmission_received& (0+255),b
  5460                           
  5461                           ; BSR set to: 0
  5462                           ;SlaveComm.c: 287: }
  5463                           ;SlaveComm.c: 289: return end_of_transmission_received;
  5464  001EF0  51DE               	movf	process_data@end_of_transmission_received& (0+255),w,b
  5465  001EF2  0012               	return	
  5466  001EF4                     __end_of_process_data:
  5467                           	opt stack 0
  5468                           tblptru	equ	0xFF8
  5469                           prodh	equ	0xFF4
  5470                           prodl	equ	0xFF3
  5471                           intcon	equ	0xFF2
  5472                           intcon2	equ	0xFF1
  5473                           intcon3	equ	0xFF0
  5474                           postinc0	equ	0xFEE
  5475                           plusw0	equ	0xFEB
  5476                           wreg	equ	0xFE8
  5477                           postinc1	equ	0xFE6
  5478                           fsr1h	equ	0xFE2
  5479                           fsr1l	equ	0xFE1
  5480                           indf2	equ	0xFDF
  5481                           postinc2	equ	0xFDE
  5482                           postdec2	equ	0xFDD
  5483                           plusw2	equ	0xFDB
  5484                           fsr2h	equ	0xFDA
  5485                           fsr2l	equ	0xFD9
  5486                           status	equ	0xFD8
  5487                           
  5488 ;; *************** function _process_data_parameters *****************
  5489 ;; Defined at:
  5490 ;;		line 352 in file "SlaveComm.c"
  5491 ;; Parameters:    Size  Location     Type
  5492 ;;  parameters      2   28[BANK0 ] PTR unsigned char [10]
  5493 ;;		 -> process_data@parameters(50), 
  5494 ;;  send_buffer     2   30[BANK0 ] PTR struct buffer
  5495 ;;		 -> communications@send_buffer(42), 
  5496 ;; Auto vars:     Size  Location     Type
  5497 ;;  end_of_trans    1   58[COMRAM] unsigned char 
  5498 ;; Return value:  Size  Location     Type
  5499 ;;                  1    wreg      unsigned char 
  5500 ;; Registers used:
  5501 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5502 ;; Tracked objects:
  5503 ;;		On entry : 0/0
  5504 ;;		On exit  : 0/0
  5505 ;;		Unchanged: 0/0
  5506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5507 ;;      Params:         0       4       0       0       0       0       0
  5508 ;;      Locals:         1       0       0       0       0       0       0
  5509 ;;      Temps:          0       0       0       0       0       0       0
  5510 ;;      Totals:         1       4       0       0       0       0       0
  5511 ;;Total ram usage:        5 bytes
  5512 ;; Hardware stack levels used:    1
  5513 ;; Hardware stack levels required when called:    7
  5514 ;; This function calls:
  5515 ;;		_atol
  5516 ;;		_com_command_setEnergyUsed
  5517 ;;		_send_end_of_transmission
  5518 ;;		_strmatch
  5519 ;; This function is called by:
  5520 ;;		_process_data
  5521 ;; This function uses a non-reentrant model
  5522 ;;
  5523                           
  5524                           	psect	text38
  5525  000654                     __ptext38:
  5526                           	opt stack 0
  5527  000654                     _process_data_parameters:
  5528                           	opt stack 20
  5529                           
  5530                           ;SlaveComm.c: 354: bool end_of_transmission_received = 0;
  5531                           
  5532                           ; BSR set to: 0
  5533                           ;incstack = 0
  5534  000654  0E00               	movlw	0
  5535  000656  6E3B               	movwf	process_data_parameters@end_of_transmission_received,c
  5536                           
  5537                           ;SlaveComm.c: 357: if( strmatch( parameters[0], "END" ) == 1 )
  5538  000658  C07C  F01E         	movff	process_data_parameters@parameters,strmatch@a
  5539  00065C  C07D  F01F         	movff	process_data_parameters@parameters+1,strmatch@a+1
  5540  000660  0E4A               	movlw	low STR_1
  5541  000662  6E20               	movwf	strmatch@b,c
  5542  000664  0E06               	movlw	high STR_1
  5543  000666  6E21               	movwf	strmatch@b+1,c
  5544  000668  ECC5  F00F         	call	_strmatch	;wreg free
  5545  00066C  06E8               	decf	wreg,f,c
  5546  00066E  A4D8               	btfss	status,2,c
  5547  000670  D003               	goto	l266
  5548                           
  5549                           ;SlaveComm.c: 358: {
  5550                           ;SlaveComm.c: 359: end_of_transmission_received = 1;
  5551  000672  0E01               	movlw	1
  5552  000674  6E3B               	movwf	process_data_parameters@end_of_transmission_received,c
  5553                           
  5554                           ;SlaveComm.c: 360: }
  5555  000676  D0D1               	goto	l284
  5556  000678                     l266:
  5557                           
  5558                           ;SlaveComm.c: 361: else if( strmatch( parameters[0], "Set" ) == 1 )
  5559  000678  C07C  F01E         	movff	process_data_parameters@parameters,strmatch@a
  5560  00067C  C07D  F01F         	movff	process_data_parameters@parameters+1,strmatch@a+1
  5561  000680  0E4E               	movlw	low STR_2
  5562  000682  6E20               	movwf	strmatch@b,c
  5563  000684  0E06               	movlw	high STR_2
  5564  000686  6E21               	movwf	strmatch@b+1,c
  5565  000688  ECC5  F00F         	call	_strmatch	;wreg free
  5566  00068C  06E8               	decf	wreg,f,c
  5567  00068E  A4D8               	btfss	status,2,c
  5568  000690  D038               	goto	l268
  5569                           
  5570                           ;SlaveComm.c: 362: {
  5571                           ;SlaveComm.c: 363: if( strmatch( parameters[1], "Calibration" ) == 1 )
  5572  000692  0E0A               	movlw	10
  5573  000694  0100               	movlb	0	; () banked
  5574  000696  257C               	addwf	process_data_parameters@parameters& (0+255),w,b
  5575  000698  6E1E               	movwf	strmatch@a,c
  5576  00069A  0E00               	movlw	0
  5577  00069C  217D               	addwfc	(process_data_parameters@parameters+1)& (0+255),w,b
  5578  00069E  6E1F               	movwf	strmatch@a+1,c
  5579  0006A0  0E01               	movlw	low STR_3
  5580  0006A2  6E20               	movwf	strmatch@b,c
  5581  0006A4  0E06               	movlw	high STR_3
  5582  0006A6  6E21               	movwf	strmatch@b+1,c
  5583  0006A8  ECC5  F00F         	call	_strmatch	;wreg free
  5584  0006AC  06E8               	decf	wreg,f,c
  5585  0006AE  B4D8               	btfsc	status,2,c
  5586  0006B0  D0B4               	goto	l284
  5587                           
  5588                           ;SlaveComm.c: 367: else if( strmatch( parameters[1], "EnUsed" ) == 1 )
  5589                           
  5590                           ;SlaveComm.c: 364: {
  5591                           ;SlaveComm.c: 366: }
  5592  0006B2  0E0A               	movlw	10
  5593  0006B4  0100               	movlb	0	; () banked
  5594  0006B6  257C               	addwf	process_data_parameters@parameters& (0+255),w,b
  5595  0006B8  6E1E               	movwf	strmatch@a,c
  5596  0006BA  0E00               	movlw	0
  5597  0006BC  217D               	addwfc	(process_data_parameters@parameters+1)& (0+255),w,b
  5598  0006BE  6E1F               	movwf	strmatch@a+1,c
  5599  0006C0  0E17               	movlw	low STR_4
  5600  0006C2  6E20               	movwf	strmatch@b,c
  5601  0006C4  0E06               	movlw	high STR_4
  5602  0006C6  6E21               	movwf	strmatch@b+1,c
  5603  0006C8  ECC5  F00F         	call	_strmatch	;wreg free
  5604  0006CC  06E8               	decf	wreg,f,c
  5605  0006CE  A4D8               	btfss	status,2,c
  5606  0006D0  D0A4               	goto	l284
  5607                           
  5608                           ;SlaveComm.c: 368: {
  5609                           ;SlaveComm.c: 373: meterEnergyUsed_global = atol( parameters[2] );
  5610  0006D2  0E14               	movlw	20
  5611  0006D4  0100               	movlb	0	; () banked
  5612  0006D6  257C               	addwf	process_data_parameters@parameters& (0+255),w,b
  5613  0006D8  6E1F               	movwf	atol@s,c
  5614  0006DA  0E00               	movlw	0
  5615  0006DC  217D               	addwfc	(process_data_parameters@parameters+1)& (0+255),w,b
  5616  0006DE  6E20               	movwf	atol@s+1,c
  5617  0006E0  ECA1  F006         	call	_atol	;wreg free
  5618  0006E4  C01F  F03D         	movff	?_atol,_meterEnergyUsed_global
  5619  0006E8  C020  F03E         	movff	?_atol+1,_meterEnergyUsed_global+1
  5620  0006EC  C021  F03F         	movff	?_atol+2,_meterEnergyUsed_global+2
  5621  0006F0  C022  F040         	movff	?_atol+3,_meterEnergyUsed_global+3
  5622                           
  5623                           ;SlaveComm.c: 374: com_command_setEnergyUsed( send_buffer );
  5624  0006F4  C07E  F039         	movff	process_data_parameters@send_buffer,com_command_setEnergyUsed@send_buffer
  5625  0006F8  C07F  F03A         	movff	process_data_parameters@send_buffer+1,com_command_setEnergyUsed@send_buffer+1
  5626  0006FC  ECB2  F00E         	call	_com_command_setEnergyUsed	;wreg free
  5627                           
  5628                           ;SlaveComm.c: 375: }
  5629                           ;SlaveComm.c: 376: }
  5630  000700  D08C               	goto	l284
  5631  000702                     l268:
  5632                           
  5633                           ;SlaveComm.c: 377: else if( strmatch( parameters[0], "Read" ) == 1 )
  5634  000702  C07C  F01E         	movff	process_data_parameters@parameters,strmatch@a
  5635  000706  C07D  F01F         	movff	process_data_parameters@parameters+1,strmatch@a+1
  5636  00070A  0E2F               	movlw	low STR_5
  5637  00070C  6E20               	movwf	strmatch@b,c
  5638  00070E  0E06               	movlw	high STR_5
  5639  000710  6E21               	movwf	strmatch@b+1,c
  5640  000712  ECC5  F00F         	call	_strmatch	;wreg free
  5641  000716  06E8               	decf	wreg,f,c
  5642  000718  B4D8               	btfsc	status,2,c
  5643  00071A  D07F               	goto	l284
  5644                           
  5645                           ;SlaveComm.c: 382: else if( strmatch( parameters[0], "Conf" ) == 1 )
  5646                           
  5647                           ;SlaveComm.c: 378: {
  5648                           ;SlaveComm.c: 381: }
  5649  00071C  C07C  F01E         	movff	process_data_parameters@parameters,strmatch@a
  5650  000720  C07D  F01F         	movff	process_data_parameters@parameters+1,strmatch@a+1
  5651  000724  0E34               	movlw	low STR_6
  5652  000726  6E20               	movwf	strmatch@b,c
  5653  000728  0E06               	movlw	high STR_6
  5654  00072A  6E21               	movwf	strmatch@b+1,c
  5655  00072C  ECC5  F00F         	call	_strmatch	;wreg free
  5656  000730  06E8               	decf	wreg,f,c
  5657  000732  A4D8               	btfss	status,2,c
  5658  000734  D072               	goto	l284
  5659                           
  5660                           ;SlaveComm.c: 383: {
  5661                           ;SlaveComm.c: 384: if( strmatch( parameters[1], "Watts" ) == 1 )
  5662  000736  0E0A               	movlw	10
  5663  000738  0100               	movlb	0	; () banked
  5664  00073A  257C               	addwf	process_data_parameters@parameters& (0+255),w,b
  5665  00073C  6E1E               	movwf	strmatch@a,c
  5666  00073E  0E00               	movlw	0
  5667  000740  217D               	addwfc	(process_data_parameters@parameters+1)& (0+255),w,b
  5668  000742  6E1F               	movwf	strmatch@a+1,c
  5669  000744  0E24               	movlw	low STR_7
  5670  000746  6E20               	movwf	strmatch@b,c
  5671  000748  0E06               	movlw	high STR_7
  5672  00074A  6E21               	movwf	strmatch@b+1,c
  5673  00074C  ECC5  F00F         	call	_strmatch	;wreg free
  5674  000750  06E8               	decf	wreg,f,c
  5675  000752  A4D8               	btfss	status,2,c
  5676  000754  D007               	goto	l276
  5677                           
  5678                           ;SlaveComm.c: 385: {
  5679                           ;SlaveComm.c: 386: send_end_of_transmission( send_buffer );
  5680  000756  C07E  F035         	movff	process_data_parameters@send_buffer,send_end_of_transmission@send_buffer
  5681  00075A  C07F  F036         	movff	process_data_parameters@send_buffer+1,send_end_of_transmission@send_buffer+1
  5682  00075E  EC97  F010         	call	_send_end_of_transmission	;wreg free
  5683                           
  5684                           ;SlaveComm.c: 387: }
  5685  000762  D05B               	goto	l284
  5686  000764                     l276:
  5687                           
  5688                           ;SlaveComm.c: 388: else if( strmatch( parameters[1], "EnUsed" ) == 1 )
  5689  000764  0E0A               	movlw	10
  5690  000766  0100               	movlb	0	; () banked
  5691  000768  257C               	addwf	process_data_parameters@parameters& (0+255),w,b
  5692  00076A  6E1E               	movwf	strmatch@a,c
  5693  00076C  0E00               	movlw	0
  5694  00076E  217D               	addwfc	(process_data_parameters@parameters+1)& (0+255),w,b
  5695  000770  6E1F               	movwf	strmatch@a+1,c
  5696  000772  0E17               	movlw	low STR_4
  5697  000774  6E20               	movwf	strmatch@b,c
  5698  000776  0E06               	movlw	high STR_4
  5699  000778  6E21               	movwf	strmatch@b+1,c
  5700  00077A  ECC5  F00F         	call	_strmatch	;wreg free
  5701  00077E  06E8               	decf	wreg,f,c
  5702  000780  A4D8               	btfss	status,2,c
  5703  000782  D007               	goto	l278
  5704                           
  5705                           ;SlaveComm.c: 389: {
  5706                           ;SlaveComm.c: 390: send_end_of_transmission( send_buffer );
  5707  000784  C07E  F035         	movff	process_data_parameters@send_buffer,send_end_of_transmission@send_buffer
  5708  000788  C07F  F036         	movff	process_data_parameters@send_buffer+1,send_end_of_transmission@send_buffer+1
  5709  00078C  EC97  F010         	call	_send_end_of_transmission	;wreg free
  5710                           
  5711                           ;SlaveComm.c: 391: }
  5712  000790  D044               	goto	l284
  5713  000792                     l278:
  5714                           
  5715                           ;SlaveComm.c: 392: else if( strmatch( parameters[1], "Volts" ) == 1 )
  5716  000792  0E0A               	movlw	10
  5717  000794  0100               	movlb	0	; () banked
  5718  000796  257C               	addwf	process_data_parameters@parameters& (0+255),w,b
  5719  000798  6E1E               	movwf	strmatch@a,c
  5720  00079A  0E00               	movlw	0
  5721  00079C  217D               	addwfc	(process_data_parameters@parameters+1)& (0+255),w,b
  5722  00079E  6E1F               	movwf	strmatch@a+1,c
  5723  0007A0  0E1E               	movlw	low STR_9
  5724  0007A2  6E20               	movwf	strmatch@b,c
  5725  0007A4  0E06               	movlw	high STR_9
  5726  0007A6  6E21               	movwf	strmatch@b+1,c
  5727  0007A8  ECC5  F00F         	call	_strmatch	;wreg free
  5728  0007AC  06E8               	decf	wreg,f,c
  5729  0007AE  A4D8               	btfss	status,2,c
  5730  0007B0  D007               	goto	l280
  5731                           
  5732                           ;SlaveComm.c: 393: {
  5733                           ;SlaveComm.c: 394: send_end_of_transmission( send_buffer );
  5734  0007B2  C07E  F035         	movff	process_data_parameters@send_buffer,send_end_of_transmission@send_buffer
  5735  0007B6  C07F  F036         	movff	process_data_parameters@send_buffer+1,send_end_of_transmission@send_buffer+1
  5736  0007BA  EC97  F010         	call	_send_end_of_transmission	;wreg free
  5737                           
  5738                           ;SlaveComm.c: 395: }
  5739  0007BE  D02D               	goto	l284
  5740  0007C0                     l280:
  5741                           
  5742                           ;SlaveComm.c: 396: else if( strmatch( parameters[1], "Amps" ) == 1 )
  5743  0007C0  0E0A               	movlw	10
  5744  0007C2  0100               	movlb	0	; () banked
  5745  0007C4  257C               	addwf	process_data_parameters@parameters& (0+255),w,b
  5746  0007C6  6E1E               	movwf	strmatch@a,c
  5747  0007C8  0E00               	movlw	0
  5748  0007CA  217D               	addwfc	(process_data_parameters@parameters+1)& (0+255),w,b
  5749  0007CC  6E1F               	movwf	strmatch@a+1,c
  5750  0007CE  0E39               	movlw	low STR_10
  5751  0007D0  6E20               	movwf	strmatch@b,c
  5752  0007D2  0E06               	movlw	high STR_10
  5753  0007D4  6E21               	movwf	strmatch@b+1,c
  5754  0007D6  ECC5  F00F         	call	_strmatch	;wreg free
  5755  0007DA  06E8               	decf	wreg,f,c
  5756  0007DC  A4D8               	btfss	status,2,c
  5757  0007DE  D007               	goto	l282
  5758                           
  5759                           ;SlaveComm.c: 397: {
  5760                           ;SlaveComm.c: 398: send_end_of_transmission( send_buffer );
  5761  0007E0  C07E  F035         	movff	process_data_parameters@send_buffer,send_end_of_transmission@send_buffer
  5762  0007E4  C07F  F036         	movff	process_data_parameters@send_buffer+1,send_end_of_transmission@send_buffer+1
  5763  0007E8  EC97  F010         	call	_send_end_of_transmission	;wreg free
  5764                           
  5765                           ;SlaveComm.c: 399: }
  5766  0007EC  D016               	goto	l284
  5767  0007EE                     l282:
  5768                           
  5769                           ;SlaveComm.c: 400: else if( strmatch( parameters[1], "PSVersion" ) == 1 )
  5770  0007EE  0E0A               	movlw	10
  5771  0007F0  0100               	movlb	0	; () banked
  5772  0007F2  257C               	addwf	process_data_parameters@parameters& (0+255),w,b
  5773  0007F4  6E1E               	movwf	strmatch@a,c
  5774  0007F6  0E00               	movlw	0
  5775  0007F8  217D               	addwfc	(process_data_parameters@parameters+1)& (0+255),w,b
  5776  0007FA  6E1F               	movwf	strmatch@a+1,c
  5777  0007FC  0E0D               	movlw	low STR_11
  5778  0007FE  6E20               	movwf	strmatch@b,c
  5779  000800  0E06               	movlw	high STR_11
  5780  000802  6E21               	movwf	strmatch@b+1,c
  5781  000804  ECC5  F00F         	call	_strmatch	;wreg free
  5782  000808  06E8               	decf	wreg,f,c
  5783  00080A  A4D8               	btfss	status,2,c
  5784  00080C  D006               	goto	l284
  5785                           
  5786                           ;SlaveComm.c: 401: {
  5787                           ;SlaveComm.c: 402: send_end_of_transmission( send_buffer );
  5788  00080E  C07E  F035         	movff	process_data_parameters@send_buffer,send_end_of_transmission@send_buffer
  5789  000812  C07F  F036         	movff	process_data_parameters@send_buffer+1,send_end_of_transmission@send_buffer+1
  5790  000816  EC97  F010         	call	_send_end_of_transmission	;wreg free
  5791  00081A                     l284:
  5792                           
  5793                           ;SlaveComm.c: 403: }
  5794                           ;SlaveComm.c: 404: }
  5795                           ;SlaveComm.c: 410: return end_of_transmission_received;
  5796  00081A  503B               	movf	process_data_parameters@end_of_transmission_received,w,c
  5797  00081C  0012               	return	
  5798  00081E                     __end_of_process_data_parameters:
  5799                           	opt stack 0
  5800                           tblptru	equ	0xFF8
  5801                           prodh	equ	0xFF4
  5802                           prodl	equ	0xFF3
  5803                           intcon	equ	0xFF2
  5804                           intcon2	equ	0xFF1
  5805                           intcon3	equ	0xFF0
  5806                           postinc0	equ	0xFEE
  5807                           plusw0	equ	0xFEB
  5808                           wreg	equ	0xFE8
  5809                           postinc1	equ	0xFE6
  5810                           fsr1h	equ	0xFE2
  5811                           fsr1l	equ	0xFE1
  5812                           indf2	equ	0xFDF
  5813                           postinc2	equ	0xFDE
  5814                           postdec2	equ	0xFDD
  5815                           plusw2	equ	0xFDB
  5816                           fsr2h	equ	0xFDA
  5817                           fsr2l	equ	0xFD9
  5818                           status	equ	0xFD8
  5819                           
  5820 ;; *************** function _strmatch *****************
  5821 ;; Defined at:
  5822 ;;		line 586 in file "SlaveComm.c"
  5823 ;; Parameters:    Size  Location     Type
  5824 ;;  a               2   29[COMRAM] PTR unsigned char 
  5825 ;;		 -> process_data@parameters(50), 
  5826 ;;  b               2   31[COMRAM] PTR unsigned char 
  5827 ;;		 -> STR_11(10), STR_10(5), STR_9(6), STR_8(7), 
  5828 ;;		 -> STR_7(6), STR_6(5), STR_5(5), STR_4(7), 
  5829 ;;		 -> STR_3(12), STR_2(4), STR_1(4), 
  5830 ;; Auto vars:     Size  Location     Type
  5831 ;;  result          2   33[COMRAM] int 
  5832 ;;  match           1   35[COMRAM] unsigned char 
  5833 ;; Return value:  Size  Location     Type
  5834 ;;                  1    wreg      unsigned char 
  5835 ;; Registers used:
  5836 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5837 ;; Tracked objects:
  5838 ;;		On entry : 0/0
  5839 ;;		On exit  : 0/0
  5840 ;;		Unchanged: 0/0
  5841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5842 ;;      Params:         4       0       0       0       0       0       0
  5843 ;;      Locals:         3       0       0       0       0       0       0
  5844 ;;      Temps:          0       0       0       0       0       0       0
  5845 ;;      Totals:         7       0       0       0       0       0       0
  5846 ;;Total ram usage:        7 bytes
  5847 ;; Hardware stack levels used:    1
  5848 ;; Hardware stack levels required when called:    2
  5849 ;; This function calls:
  5850 ;;		_strcmp2
  5851 ;; This function is called by:
  5852 ;;		_process_data_parameters
  5853 ;; This function uses a non-reentrant model
  5854 ;;
  5855                           
  5856                           	psect	text39
  5857  001F8A                     __ptext39:
  5858                           	opt stack 0
  5859  001F8A                     _strmatch:
  5860                           	opt stack 24
  5861                           
  5862                           ;SlaveComm.c: 588: int result;
  5863                           ;SlaveComm.c: 589: bool match;
  5864                           ;SlaveComm.c: 591: result = strcmp2( a, b );
  5865                           
  5866                           ;incstack = 0
  5867  001F8A  C01E  F013         	movff	strmatch@a,strcmp2@a
  5868  001F8E  C01F  F014         	movff	strmatch@a+1,strcmp2@a+1
  5869  001F92  C020  F015         	movff	strmatch@b,strcmp2@b
  5870  001F96  C021  F016         	movff	strmatch@b+1,strcmp2@b+1
  5871  001F9A  EC90  F005         	call	_strcmp2	;wreg free
  5872  001F9E  C013  F022         	movff	?_strcmp2,strmatch@result
  5873  001FA2  C014  F023         	movff	?_strcmp2+1,strmatch@result+1
  5874                           
  5875                           ;SlaveComm.c: 593: match = (result == 0) ? 1 : 0;
  5876  001FA6  5022               	movf	strmatch@result,w,c
  5877  001FA8  1023               	iorwf	strmatch@result+1,w,c
  5878  001FAA  A4D8               	btfss	status,2,c
  5879  001FAC  D002               	goto	u2780
  5880  001FAE  0E01               	movlw	1
  5881  001FB0  D001               	goto	u2790
  5882  001FB2                     u2780:
  5883  001FB2  0E00               	movlw	0
  5884  001FB4                     u2790:
  5885  001FB4  6E24               	movwf	strmatch@match,c
  5886                           
  5887                           ;SlaveComm.c: 595: return match;
  5888  001FB6  5024               	movf	strmatch@match,w,c
  5889  001FB8  0012               	return	
  5890  001FBA                     __end_of_strmatch:
  5891                           	opt stack 0
  5892                           tblptru	equ	0xFF8
  5893                           prodh	equ	0xFF4
  5894                           prodl	equ	0xFF3
  5895                           intcon	equ	0xFF2
  5896                           intcon2	equ	0xFF1
  5897                           intcon3	equ	0xFF0
  5898                           postinc0	equ	0xFEE
  5899                           plusw0	equ	0xFEB
  5900                           wreg	equ	0xFE8
  5901                           postinc1	equ	0xFE6
  5902                           fsr1h	equ	0xFE2
  5903                           fsr1l	equ	0xFE1
  5904                           indf2	equ	0xFDF
  5905                           postinc2	equ	0xFDE
  5906                           postdec2	equ	0xFDD
  5907                           plusw2	equ	0xFDB
  5908                           fsr2h	equ	0xFDA
  5909                           fsr2l	equ	0xFD9
  5910                           status	equ	0xFD8
  5911                           
  5912 ;; *************** function _strcmp2 *****************
  5913 ;; Defined at:
  5914 ;;		line 598 in file "SlaveComm.c"
  5915 ;; Parameters:    Size  Location     Type
  5916 ;;  a               2   18[COMRAM] PTR unsigned char 
  5917 ;;		 -> process_data@parameters(50), 
  5918 ;;  b               2   20[COMRAM] PTR unsigned char 
  5919 ;;		 -> STR_11(10), STR_10(5), STR_9(6), STR_8(7), 
  5920 ;;		 -> STR_7(6), STR_6(5), STR_5(5), STR_4(7), 
  5921 ;;		 -> STR_3(12), STR_2(4), STR_1(4), 
  5922 ;; Auto vars:     Size  Location     Type
  5923 ;;  inx             2   27[COMRAM] int 
  5924 ;;  match           2   25[COMRAM] int 
  5925 ;; Return value:  Size  Location     Type
  5926 ;;                  2   18[COMRAM] int 
  5927 ;; Registers used:
  5928 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  5929 ;; Tracked objects:
  5930 ;;		On entry : 0/0
  5931 ;;		On exit  : 0/0
  5932 ;;		Unchanged: 0/0
  5933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5934 ;;      Params:         4       0       0       0       0       0       0
  5935 ;;      Locals:         4       0       0       0       0       0       0
  5936 ;;      Temps:          3       0       0       0       0       0       0
  5937 ;;      Totals:        11       0       0       0       0       0       0
  5938 ;;Total ram usage:       11 bytes
  5939 ;; Hardware stack levels used:    1
  5940 ;; Hardware stack levels required when called:    1
  5941 ;; This function calls:
  5942 ;;		Nothing
  5943 ;; This function is called by:
  5944 ;;		_strmatch
  5945 ;; This function uses a non-reentrant model
  5946 ;;
  5947                           
  5948                           	psect	text40
  5949  000B20                     __ptext40:
  5950                           	opt stack 0
  5951  000B20                     _strcmp2:
  5952                           	opt stack 24
  5953                           
  5954                           ;SlaveComm.c: 600: int inx = 0;
  5955                           
  5956                           ;incstack = 0
  5957  000B20  0E00               	movlw	0
  5958  000B22  6E1D               	movwf	strcmp2@inx+1,c
  5959  000B24  0E00               	movlw	0
  5960  000B26  6E1C               	movwf	strcmp2@inx,c
  5961                           
  5962                           ;SlaveComm.c: 601: int match = 0;
  5963  000B28  0E00               	movlw	0
  5964  000B2A  6E1B               	movwf	strcmp2@match+1,c
  5965  000B2C  0E00               	movlw	0
  5966  000B2E  6E1A               	movwf	strcmp2@match,c
  5967                           
  5968                           ;SlaveComm.c: 603: while( (a[inx] != '\0') && (b[inx] != '\0') && (match == 0) )
  5969  000B30  D035               	goto	l334
  5970  000B32                     
  5971                           ;SlaveComm.c: 604: {
  5972                           ;SlaveComm.c: 605: if( a[inx] > b[inx] )
  5973  000B32  501C               	movf	strcmp2@inx,w,c
  5974  000B34  2413               	addwf	strcmp2@a,w,c
  5975  000B36  6ED9               	movwf	fsr2l,c
  5976  000B38  501D               	movf	strcmp2@inx+1,w,c
  5977  000B3A  2014               	addwfc	strcmp2@a+1,w,c
  5978  000B3C  6EDA               	movwf	fsr2h,c
  5979  000B3E  501C               	movf	strcmp2@inx,w,c
  5980  000B40  2415               	addwf	strcmp2@b,w,c
  5981  000B42  6E18               	movwf	(??_strcmp2+1)& (0+255),c
  5982  000B44  501D               	movf	strcmp2@inx+1,w,c
  5983  000B46  2016               	addwfc	strcmp2@b+1,w,c
  5984  000B48  6E19               	movwf	(??_strcmp2+2)& (0+255),c
  5985  000B4A  C018  FFF6         	movff	??_strcmp2+1,tblptrl
  5986  000B4E  C019  FFF7         	movff	??_strcmp2+2,tblptrh
  5987  000B52                     	if	0	;tblptru may be non-zero
  5988  000B52                     	endif
  5989  000B52                     	if	0	;tblptru may be non-zero
  5990  000B52                     	endif
  5991  000B52  50DE               	movf	postinc2,w,c
  5992  000B54  0009               	tblrd		*+
  5993  000B56  5CF5               	subwf	tablat,w,c
  5994  000B58  B0D8               	btfsc	status,0,c
  5995  000B5A  D005               	goto	l336
  5996                           
  5997                           ;SlaveComm.c: 606: {
  5998                           ;SlaveComm.c: 607: match = 1;
  5999  000B5C  0E00               	movlw	0
  6000  000B5E  6E1B               	movwf	strcmp2@match+1,c
  6001  000B60  0E01               	movlw	1
  6002  000B62  6E1A               	movwf	strcmp2@match,c
  6003                           
  6004                           ;SlaveComm.c: 608: }
  6005  000B64  D019               	goto	l338
  6006  000B66                     l336:
  6007                           
  6008                           ;SlaveComm.c: 609: else if( a[inx] < b[inx] )
  6009  000B66  501C               	movf	strcmp2@inx,w,c
  6010  000B68  2413               	addwf	strcmp2@a,w,c
  6011  000B6A  6ED9               	movwf	fsr2l,c
  6012  000B6C  501D               	movf	strcmp2@inx+1,w,c
  6013  000B6E  2014               	addwfc	strcmp2@a+1,w,c
  6014  000B70  6EDA               	movwf	fsr2h,c
  6015  000B72  50DF               	movf	indf2,w,c
  6016  000B74  6E17               	movwf	??_strcmp2& (0+255),c
  6017  000B76  501C               	movf	strcmp2@inx,w,c
  6018  000B78  2415               	addwf	strcmp2@b,w,c
  6019  000B7A  6E18               	movwf	(??_strcmp2+1)& (0+255),c
  6020  000B7C  501D               	movf	strcmp2@inx+1,w,c
  6021  000B7E  2016               	addwfc	strcmp2@b+1,w,c
  6022  000B80  6E19               	movwf	(??_strcmp2+2)& (0+255),c
  6023  000B82  C018  FFF6         	movff	??_strcmp2+1,tblptrl
  6024  000B86  C019  FFF7         	movff	??_strcmp2+2,tblptrh
  6025  000B8A                     	if	0	;tblptru may be non-zero
  6026  000B8A                     	endif
  6027  000B8A                     	if	0	;tblptru may be non-zero
  6028  000B8A                     	endif
  6029  000B8A  0008               	tblrd		*
  6030  000B8C  50F5               	movf	tablat,w,c
  6031  000B8E  5C17               	subwf	??_strcmp2,w,c
  6032  000B90  B0D8               	btfsc	status,0,c
  6033  000B92  D002               	goto	l338
  6034                           
  6035                           ;SlaveComm.c: 610: {
  6036                           ;SlaveComm.c: 611: match = -1;
  6037  000B94  681A               	setf	strcmp2@match,c
  6038  000B96  681B               	setf	strcmp2@match+1,c
  6039  000B98                     l338:
  6040                           
  6041                           ;SlaveComm.c: 616: }
  6042                           ;SlaveComm.c: 618: inx++;
  6043                           
  6044                           ;SlaveComm.c: 614: {
  6045  000B98  4A1C               	infsnz	strcmp2@inx,f,c
  6046  000B9A  2A1D               	incf	strcmp2@inx+1,f,c
  6047  000B9C                     l334:
  6048  000B9C  501C               	movf	strcmp2@inx,w,c
  6049  000B9E  2413               	addwf	strcmp2@a,w,c
  6050  000BA0  6ED9               	movwf	fsr2l,c
  6051  000BA2  501D               	movf	strcmp2@inx+1,w,c
  6052  000BA4  2014               	addwfc	strcmp2@a+1,w,c
  6053  000BA6  6EDA               	movwf	fsr2h,c
  6054  000BA8  50DF               	movf	indf2,w,c
  6055  000BAA  B4D8               	btfsc	status,2,c
  6056  000BAC  D013               	goto	u2630
  6057  000BAE  501C               	movf	strcmp2@inx,w,c
  6058  000BB0  2415               	addwf	strcmp2@b,w,c
  6059  000BB2  6E17               	movwf	??_strcmp2& (0+255),c
  6060  000BB4  501D               	movf	strcmp2@inx+1,w,c
  6061  000BB6  2016               	addwfc	strcmp2@b+1,w,c
  6062  000BB8  6E18               	movwf	(??_strcmp2+1)& (0+255),c
  6063  000BBA  C017  FFF6         	movff	??_strcmp2,tblptrl
  6064  000BBE  C018  FFF7         	movff	??_strcmp2+1,tblptrh
  6065  000BC2                     	if	0	;tblptru may be non-zero
  6066  000BC2                     	endif
  6067  000BC2                     	if	0	;tblptru may be non-zero
  6068  000BC2                     	endif
  6069  000BC2  0008               	tblrd		*
  6070  000BC4  50F5               	movf	tablat,w,c
  6071  000BC6  0900               	iorlw	0
  6072  000BC8  B4D8               	btfsc	status,2,c
  6073  000BCA  D004               	goto	u2630
  6074  000BCC  501A               	movf	strcmp2@match,w,c
  6075  000BCE  101B               	iorwf	strcmp2@match+1,w,c
  6076  000BD0  B4D8               	btfsc	status,2,c
  6077  000BD2  D7AF               	goto	l335
  6078  000BD4                     u2630:
  6079                           
  6080                           ;SlaveComm.c: 619: }
  6081                           ;SlaveComm.c: 622: if( (a[inx] == '\0') && (b[inx] != '\0') )
  6082  000BD4  501C               	movf	strcmp2@inx,w,c
  6083  000BD6  2413               	addwf	strcmp2@a,w,c
  6084  000BD8  6ED9               	movwf	fsr2l,c
  6085  000BDA  501D               	movf	strcmp2@inx+1,w,c
  6086  000BDC  2014               	addwfc	strcmp2@a+1,w,c
  6087  000BDE  6EDA               	movwf	fsr2h,c
  6088  000BE0  50DF               	movf	indf2,w,c
  6089  000BE2  A4D8               	btfss	status,2,c
  6090  000BE4  D012               	goto	l344
  6091  000BE6  501C               	movf	strcmp2@inx,w,c
  6092  000BE8  2415               	addwf	strcmp2@b,w,c
  6093  000BEA  6E17               	movwf	??_strcmp2& (0+255),c
  6094  000BEC  501D               	movf	strcmp2@inx+1,w,c
  6095  000BEE  2016               	addwfc	strcmp2@b+1,w,c
  6096  000BF0  6E18               	movwf	(??_strcmp2+1)& (0+255),c
  6097  000BF2  C017  FFF6         	movff	??_strcmp2,tblptrl
  6098  000BF6  C018  FFF7         	movff	??_strcmp2+1,tblptrh
  6099  000BFA                     	if	0	;tblptru may be non-zero
  6100  000BFA                     	endif
  6101  000BFA                     	if	0	;tblptru may be non-zero
  6102  000BFA                     	endif
  6103  000BFA  0008               	tblrd		*
  6104  000BFC  50F5               	movf	tablat,w,c
  6105  000BFE  0900               	iorlw	0
  6106  000C00  B4D8               	btfsc	status,2,c
  6107  000C02  D003               	goto	l344
  6108                           
  6109                           ;SlaveComm.c: 623: {
  6110                           ;SlaveComm.c: 624: match = -1;
  6111  000C04  681A               	setf	strcmp2@match,c
  6112  000C06  681B               	setf	strcmp2@match+1,c
  6113                           
  6114                           ;SlaveComm.c: 625: }
  6115  000C08  D01C               	goto	l346
  6116  000C0A                     l344:
  6117                           
  6118                           ;SlaveComm.c: 626: else if( (a[inx] != '\0') && (b[inx] == '\0') )
  6119  000C0A  501C               	movf	strcmp2@inx,w,c
  6120  000C0C  2413               	addwf	strcmp2@a,w,c
  6121  000C0E  6ED9               	movwf	fsr2l,c
  6122  000C10  501D               	movf	strcmp2@inx+1,w,c
  6123  000C12  2014               	addwfc	strcmp2@a+1,w,c
  6124  000C14  6EDA               	movwf	fsr2h,c
  6125  000C16  50DF               	movf	indf2,w,c
  6126  000C18  B4D8               	btfsc	status,2,c
  6127  000C1A  D013               	goto	l346
  6128  000C1C  501C               	movf	strcmp2@inx,w,c
  6129  000C1E  2415               	addwf	strcmp2@b,w,c
  6130  000C20  6E17               	movwf	??_strcmp2& (0+255),c
  6131  000C22  501D               	movf	strcmp2@inx+1,w,c
  6132  000C24  2016               	addwfc	strcmp2@b+1,w,c
  6133  000C26  6E18               	movwf	(??_strcmp2+1)& (0+255),c
  6134  000C28  C017  FFF6         	movff	??_strcmp2,tblptrl
  6135  000C2C  C018  FFF7         	movff	??_strcmp2+1,tblptrh
  6136  000C30                     	if	0	;tblptru may be non-zero
  6137  000C30                     	endif
  6138  000C30                     	if	0	;tblptru may be non-zero
  6139  000C30                     	endif
  6140  000C30  0008               	tblrd		*
  6141  000C32  50F5               	movf	tablat,w,c
  6142  000C34  0900               	iorlw	0
  6143  000C36  A4D8               	btfss	status,2,c
  6144  000C38  D004               	goto	l346
  6145                           
  6146                           ;SlaveComm.c: 627: {
  6147                           ;SlaveComm.c: 628: match = 1;
  6148  000C3A  0E00               	movlw	0
  6149  000C3C  6E1B               	movwf	strcmp2@match+1,c
  6150  000C3E  0E01               	movlw	1
  6151  000C40  6E1A               	movwf	strcmp2@match,c
  6152  000C42                     l346:
  6153                           
  6154                           ;SlaveComm.c: 629: }
  6155                           ;SlaveComm.c: 631: return match;
  6156  000C42  C01A  F013         	movff	strcmp2@match,?_strcmp2
  6157  000C46  C01B  F014         	movff	strcmp2@match+1,?_strcmp2+1
  6158  000C4A  0012               	return	
  6159  000C4C                     __end_of_strcmp2:
  6160                           	opt stack 0
  6161                           tblptru	equ	0xFF8
  6162                           tblptrh	equ	0xFF7
  6163                           tblptrl	equ	0xFF6
  6164                           tablat	equ	0xFF5
  6165                           prodh	equ	0xFF4
  6166                           prodl	equ	0xFF3
  6167                           intcon	equ	0xFF2
  6168                           intcon2	equ	0xFF1
  6169                           intcon3	equ	0xFF0
  6170                           postinc0	equ	0xFEE
  6171                           plusw0	equ	0xFEB
  6172                           wreg	equ	0xFE8
  6173                           postinc1	equ	0xFE6
  6174                           fsr1h	equ	0xFE2
  6175                           fsr1l	equ	0xFE1
  6176                           indf2	equ	0xFDF
  6177                           postinc2	equ	0xFDE
  6178                           postdec2	equ	0xFDD
  6179                           plusw2	equ	0xFDB
  6180                           fsr2h	equ	0xFDA
  6181                           fsr2l	equ	0xFD9
  6182                           status	equ	0xFD8
  6183                           
  6184 ;; *************** function _send_end_of_transmission *****************
  6185 ;; Defined at:
  6186 ;;		line 677 in file "SlaveComm.c"
  6187 ;; Parameters:    Size  Location     Type
  6188 ;;  send_buffer     2   52[COMRAM] PTR struct buffer
  6189 ;;		 -> communications@send_buffer(42), 
  6190 ;; Auto vars:     Size  Location     Type
  6191 ;;		None
  6192 ;; Return value:  Size  Location     Type
  6193 ;;                  1    wreg      void 
  6194 ;; Registers used:
  6195 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6196 ;; Tracked objects:
  6197 ;;		On entry : 0/0
  6198 ;;		On exit  : 0/0
  6199 ;;		Unchanged: 0/0
  6200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6201 ;;      Params:         2       0       0       0       0       0       0
  6202 ;;      Locals:         0       0       0       0       0       0       0
  6203 ;;      Temps:          0       0       0       0       0       0       0
  6204 ;;      Totals:         2       0       0       0       0       0       0
  6205 ;;Total ram usage:        2 bytes
  6206 ;; Hardware stack levels used:    1
  6207 ;; Hardware stack levels required when called:    6
  6208 ;; This function calls:
  6209 ;;		_command_builder1
  6210 ;; This function is called by:
  6211 ;;		_process_data_parameters
  6212 ;; This function uses a non-reentrant model
  6213 ;;
  6214                           
  6215                           	psect	text41
  6216  00212E                     __ptext41:
  6217                           	opt stack 0
  6218  00212E                     _send_end_of_transmission:
  6219                           	opt stack 20
  6220                           
  6221                           ;SlaveComm.c: 679: command_builder1( send_buffer, "END" );
  6222                           
  6223                           ;incstack = 0
  6224  00212E  C035  F02F         	movff	send_end_of_transmission@send_buffer,command_builder1@send_buffer
  6225  002132  C036  F030         	movff	send_end_of_transmission@send_buffer+1,command_builder1@send_buffer+1
  6226  002136  0E4A               	movlw	low STR_1
  6227  002138  6E31               	movwf	command_builder1@data1,c
  6228  00213A  0E06               	movlw	high STR_1
  6229  00213C  6E32               	movwf	command_builder1@data1+1,c
  6230  00213E  ECC0  F00D         	call	_command_builder1	;wreg free
  6231  002142  0012               	return	
  6232  002144                     __end_of_send_end_of_transmission:
  6233                           	opt stack 0
  6234                           tblptru	equ	0xFF8
  6235                           tblptrh	equ	0xFF7
  6236                           tblptrl	equ	0xFF6
  6237                           tablat	equ	0xFF5
  6238                           prodh	equ	0xFF4
  6239                           prodl	equ	0xFF3
  6240                           intcon	equ	0xFF2
  6241                           intcon2	equ	0xFF1
  6242                           intcon3	equ	0xFF0
  6243                           postinc0	equ	0xFEE
  6244                           plusw0	equ	0xFEB
  6245                           wreg	equ	0xFE8
  6246                           postinc1	equ	0xFE6
  6247                           fsr1h	equ	0xFE2
  6248                           fsr1l	equ	0xFE1
  6249                           indf2	equ	0xFDF
  6250                           postinc2	equ	0xFDE
  6251                           postdec2	equ	0xFDD
  6252                           plusw2	equ	0xFDB
  6253                           fsr2h	equ	0xFDA
  6254                           fsr2l	equ	0xFD9
  6255                           status	equ	0xFD8
  6256                           
  6257 ;; *************** function _command_builder1 *****************
  6258 ;; Defined at:
  6259 ;;		line 462 in file "SlaveComm.c"
  6260 ;; Parameters:    Size  Location     Type
  6261 ;;  send_buffer     2   46[COMRAM] PTR struct buffer
  6262 ;;		 -> communications@send_buffer(42), 
  6263 ;;  data1           2   48[COMRAM] PTR unsigned char 
  6264 ;;		 -> STR_12(4), 
  6265 ;; Auto vars:     Size  Location     Type
  6266 ;;  xsum            2   50[COMRAM] int 
  6267 ;; Return value:  Size  Location     Type
  6268 ;;                  1    wreg      void 
  6269 ;; Registers used:
  6270 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6271 ;; Tracked objects:
  6272 ;;		On entry : 0/0
  6273 ;;		On exit  : 0/0
  6274 ;;		Unchanged: 0/0
  6275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6276 ;;      Params:         4       0       0       0       0       0       0
  6277 ;;      Locals:         2       0       0       0       0       0       0
  6278 ;;      Temps:          0       0       0       0       0       0       0
  6279 ;;      Totals:         6       0       0       0       0       0       0
  6280 ;;Total ram usage:        6 bytes
  6281 ;; Hardware stack levels used:    1
  6282 ;; Hardware stack levels required when called:    5
  6283 ;; This function calls:
  6284 ;;		_command_builder_add_char
  6285 ;;		_command_builder_add_string
  6286 ;;		_xsum_builder
  6287 ;; This function is called by:
  6288 ;;		_send_end_of_transmission
  6289 ;; This function uses a non-reentrant model
  6290 ;;
  6291                           
  6292                           	psect	text42
  6293  001B80                     __ptext42:
  6294                           	opt stack 0
  6295  001B80                     _command_builder1:
  6296                           	opt stack 20
  6297                           
  6298                           ;SlaveComm.c: 464: command_builder_add_char( send_buffer, '#' );
  6299                           
  6300                           ;incstack = 0
  6301  001B80  C02F  F013         	movff	command_builder1@send_buffer,command_builder_add_char@send_buffer
  6302  001B84  C030  F014         	movff	command_builder1@send_buffer+1,command_builder_add_char@send_buffer+1
  6303  001B88  0E23               	movlw	35
  6304  001B8A  6E15               	movwf	command_builder_add_char@data,c
  6305  001B8C  EC92  F00D         	call	_command_builder_add_char	;wreg free
  6306                           
  6307                           ;SlaveComm.c: 465: command_builder_add_char( send_buffer, '!' );
  6308  001B90  C02F  F013         	movff	command_builder1@send_buffer,command_builder_add_char@send_buffer
  6309  001B94  C030  F014         	movff	command_builder1@send_buffer+1,command_builder_add_char@send_buffer+1
  6310  001B98  0E21               	movlw	33
  6311  001B9A  6E15               	movwf	command_builder_add_char@data,c
  6312  001B9C  EC92  F00D         	call	_command_builder_add_char	;wreg free
  6313                           
  6314                           ;SlaveComm.c: 466: int xsum = 0;
  6315  001BA0  0E00               	movlw	0
  6316  001BA2  6E34               	movwf	command_builder1@xsum+1,c
  6317  001BA4  0E00               	movlw	0
  6318  001BA6  6E33               	movwf	command_builder1@xsum,c
  6319                           
  6320                           ;SlaveComm.c: 467: xsum += command_builder_add_string( send_buffer, data1 );
  6321  001BA8  C02F  F017         	movff	command_builder1@send_buffer,command_builder_add_string@send_buffer
  6322  001BAC  C030  F018         	movff	command_builder1@send_buffer+1,command_builder_add_string@send_buffer+1
  6323  001BB0  C031  F019         	movff	command_builder1@data1,command_builder_add_string@data_string
  6324  001BB4  C032  F01A         	movff	command_builder1@data1+1,command_builder_add_string@data_string+1
  6325  001BB8  EC36  F00B         	call	_command_builder_add_string	;wreg free
  6326  001BBC  5017               	movf	?_command_builder_add_string,w,c
  6327  001BBE  2633               	addwf	command_builder1@xsum,f,c
  6328  001BC0  5018               	movf	?_command_builder_add_string+1,w,c
  6329  001BC2  2234               	addwfc	command_builder1@xsum+1,f,c
  6330                           
  6331                           ;SlaveComm.c: 468: xsum_builder( send_buffer, xsum );
  6332  001BC4  C02F  F02B         	movff	command_builder1@send_buffer,xsum_builder@send_buffer
  6333  001BC8  C030  F02C         	movff	command_builder1@send_buffer+1,xsum_builder@send_buffer+1
  6334  001BCC  C033  F02D         	movff	command_builder1@xsum,xsum_builder@xsum
  6335  001BD0  C034  F02E         	movff	command_builder1@xsum+1,xsum_builder@xsum+1
  6336  001BD4  EC61  F00D         	call	_xsum_builder	;wreg free
  6337  001BD8  0012               	return	
  6338  001BDA                     __end_of_command_builder1:
  6339                           	opt stack 0
  6340                           tblptru	equ	0xFF8
  6341                           tblptrh	equ	0xFF7
  6342                           tblptrl	equ	0xFF6
  6343                           tablat	equ	0xFF5
  6344                           prodh	equ	0xFF4
  6345                           prodl	equ	0xFF3
  6346                           intcon	equ	0xFF2
  6347                           intcon2	equ	0xFF1
  6348                           intcon3	equ	0xFF0
  6349                           postinc0	equ	0xFEE
  6350                           plusw0	equ	0xFEB
  6351                           wreg	equ	0xFE8
  6352                           postinc1	equ	0xFE6
  6353                           fsr1h	equ	0xFE2
  6354                           fsr1l	equ	0xFE1
  6355                           indf2	equ	0xFDF
  6356                           postinc2	equ	0xFDE
  6357                           postdec2	equ	0xFDD
  6358                           plusw2	equ	0xFDB
  6359                           fsr2h	equ	0xFDA
  6360                           fsr2l	equ	0xFD9
  6361                           status	equ	0xFD8
  6362                           
  6363 ;; *************** function _com_command_setEnergyUsed *****************
  6364 ;; Defined at:
  6365 ;;		line 703 in file "SlaveComm.c"
  6366 ;; Parameters:    Size  Location     Type
  6367 ;;  send_buffer     2   56[COMRAM] PTR struct buffer
  6368 ;;		 -> communications@send_buffer(42), 
  6369 ;; Auto vars:     Size  Location     Type
  6370 ;;  temp           12   16[BANK0 ] unsigned char [12]
  6371 ;; Return value:  Size  Location     Type
  6372 ;;                  1    wreg      void 
  6373 ;; Registers used:
  6374 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6375 ;; Tracked objects:
  6376 ;;		On entry : 0/0
  6377 ;;		On exit  : 0/0
  6378 ;;		Unchanged: 0/0
  6379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6380 ;;      Params:         2       0       0       0       0       0       0
  6381 ;;      Locals:         0      12       0       0       0       0       0
  6382 ;;      Temps:          0       0       0       0       0       0       0
  6383 ;;      Totals:         2      12       0       0       0       0       0
  6384 ;;Total ram usage:       14 bytes
  6385 ;; Hardware stack levels used:    1
  6386 ;; Hardware stack levels required when called:    6
  6387 ;; This function calls:
  6388 ;;		_command_builder3
  6389 ;;		_ultoa
  6390 ;; This function is called by:
  6391 ;;		_resetCommunications
  6392 ;;		_process_data_parameters
  6393 ;; This function uses a non-reentrant model
  6394 ;;
  6395                           
  6396                           	psect	text43
  6397  001D64                     __ptext43:
  6398                           	opt stack 0
  6399  001D64                     _com_command_setEnergyUsed:
  6400                           	opt stack 21
  6401                           
  6402                           ;SlaveComm.c: 705: char temp[12];
  6403                           ;SlaveComm.c: 707: ultoa( temp, meterEnergyUsed_global, 10 );
  6404                           
  6405                           ;incstack = 0
  6406  001D64  0E70               	movlw	low com_command_setEnergyUsed@temp
  6407  001D66  6E20               	movwf	ultoa@buf,c
  6408  001D68  0E00               	movlw	high com_command_setEnergyUsed@temp
  6409  001D6A  6E21               	movwf	ultoa@buf+1,c
  6410  001D6C  C03D  F022         	movff	_meterEnergyUsed_global,ultoa@val
  6411  001D70  C03E  F023         	movff	_meterEnergyUsed_global+1,ultoa@val+1
  6412  001D74  C03F  F024         	movff	_meterEnergyUsed_global+2,ultoa@val+2
  6413  001D78  C040  F025         	movff	_meterEnergyUsed_global+3,ultoa@val+3
  6414  001D7C  0E00               	movlw	0
  6415  001D7E  6E27               	movwf	ultoa@base+1,c
  6416  001D80  0E0A               	movlw	10
  6417  001D82  6E26               	movwf	ultoa@base,c
  6418  001D84  EC26  F006         	call	_ultoa	;wreg free
  6419                           
  6420                           ;SlaveComm.c: 709: command_builder3( send_buffer, "Set", "EnUsed", temp );
  6421  001D88  C039  F02F         	movff	com_command_setEnergyUsed@send_buffer,command_builder3@send_buffer
  6422  001D8C  C03A  F030         	movff	com_command_setEnergyUsed@send_buffer+1,command_builder3@send_buffer+1
  6423  001D90  0E4E               	movlw	low STR_2
  6424  001D92  6E31               	movwf	command_builder3@data1,c
  6425  001D94  0E06               	movlw	high STR_2
  6426  001D96  6E32               	movwf	command_builder3@data1+1,c
  6427  001D98  0E17               	movlw	low STR_4
  6428  001D9A  6E33               	movwf	command_builder3@data2,c
  6429  001D9C  0E06               	movlw	high STR_4
  6430  001D9E  6E34               	movwf	command_builder3@data2+1,c
  6431  001DA0  0E70               	movlw	low com_command_setEnergyUsed@temp
  6432  001DA2  6E35               	movwf	command_builder3@data3,c
  6433  001DA4  0E00               	movlw	high com_command_setEnergyUsed@temp
  6434  001DA6  6E36               	movwf	command_builder3@data3+1,c
  6435  001DA8  ECCA  F008         	call	_command_builder3	;wreg free
  6436  001DAC  0012               	return	
  6437  001DAE                     __end_of_com_command_setEnergyUsed:
  6438                           	opt stack 0
  6439                           tblptru	equ	0xFF8
  6440                           tblptrh	equ	0xFF7
  6441                           tblptrl	equ	0xFF6
  6442                           tablat	equ	0xFF5
  6443                           prodh	equ	0xFF4
  6444                           prodl	equ	0xFF3
  6445                           intcon	equ	0xFF2
  6446                           intcon2	equ	0xFF1
  6447                           intcon3	equ	0xFF0
  6448                           postinc0	equ	0xFEE
  6449                           plusw0	equ	0xFEB
  6450                           wreg	equ	0xFE8
  6451                           postinc1	equ	0xFE6
  6452                           fsr1h	equ	0xFE2
  6453                           fsr1l	equ	0xFE1
  6454                           indf2	equ	0xFDF
  6455                           postinc2	equ	0xFDE
  6456                           postdec2	equ	0xFDD
  6457                           plusw2	equ	0xFDB
  6458                           fsr2h	equ	0xFDA
  6459                           fsr2l	equ	0xFD9
  6460                           status	equ	0xFD8
  6461                           
  6462 ;; *************** function _ultoa *****************
  6463 ;; Defined at:
  6464 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ltoa.c"
  6465 ;; Parameters:    Size  Location     Type
  6466 ;;  buf             2   31[COMRAM] PTR unsigned char 
  6467 ;;		 -> com_command_setEnergyUsed@temp(12), com_command_setPower@temp(12), 
  6468 ;;  val             4   33[COMRAM] unsigned long 
  6469 ;;  base            2   37[COMRAM] int 
  6470 ;; Auto vars:     Size  Location     Type
  6471 ;;  v               4   39[COMRAM] unsigned long 
  6472 ;;  c               1   43[COMRAM] unsigned char 
  6473 ;; Return value:  Size  Location     Type
  6474 ;;                  2   31[COMRAM] PTR unsigned char 
  6475 ;; Registers used:
  6476 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6477 ;; Tracked objects:
  6478 ;;		On entry : 0/0
  6479 ;;		On exit  : 0/0
  6480 ;;		Unchanged: 0/0
  6481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6482 ;;      Params:         8       0       0       0       0       0       0
  6483 ;;      Locals:         5       0       0       0       0       0       0
  6484 ;;      Temps:          0       0       0       0       0       0       0
  6485 ;;      Totals:        13       0       0       0       0       0       0
  6486 ;;Total ram usage:       13 bytes
  6487 ;; Hardware stack levels used:    1
  6488 ;; Hardware stack levels required when called:    2
  6489 ;; This function calls:
  6490 ;;		___lldiv
  6491 ;;		___llmod
  6492 ;; This function is called by:
  6493 ;;		_com_command_setPower
  6494 ;;		_com_command_setEnergyUsed
  6495 ;; This function uses a non-reentrant model
  6496 ;;
  6497                           
  6498                           	psect	text44
  6499  000C4C                     __ptext44:
  6500                           	opt stack 0
  6501  000C4C                     _ultoa:
  6502                           	opt stack 24
  6503                           
  6504                           ;incstack = 0
  6505  000C4C  C022  F028         	movff	ultoa@val,ultoa@v
  6506  000C50  C023  F029         	movff	ultoa@val+1,ultoa@v+1
  6507  000C54  C024  F02A         	movff	ultoa@val+2,ultoa@v+2
  6508  000C58  C025  F02B         	movff	ultoa@val+3,ultoa@v+3
  6509  000C5C  C028  F013         	movff	ultoa@v,___lldiv@dividend
  6510  000C60  C029  F014         	movff	ultoa@v+1,___lldiv@dividend+1
  6511  000C64  C02A  F015         	movff	ultoa@v+2,___lldiv@dividend+2
  6512  000C68  C02B  F016         	movff	ultoa@v+3,___lldiv@dividend+3
  6513  000C6C  C026  F017         	movff	ultoa@base,___lldiv@divisor
  6514  000C70  C027  F018         	movff	ultoa@base+1,___lldiv@divisor+1
  6515  000C74  0E00               	movlw	0
  6516  000C76  BE18               	btfsc	___lldiv@divisor+1,7,c
  6517  000C78  0EFF               	movlw	-1
  6518  000C7A  6E19               	movwf	___lldiv@divisor+2,c
  6519  000C7C  6E1A               	movwf	___lldiv@divisor+3,c
  6520  000C7E  EC0A  F00C         	call	___lldiv	;wreg free
  6521  000C82  C013  F028         	movff	?___lldiv,ultoa@v
  6522  000C86  C014  F029         	movff	?___lldiv+1,ultoa@v+1
  6523  000C8A  C015  F02A         	movff	?___lldiv+2,ultoa@v+2
  6524  000C8E  C016  F02B         	movff	?___lldiv+3,ultoa@v+3
  6525  000C92  4A20               	infsnz	ultoa@buf,f,c
  6526  000C94  2A21               	incf	ultoa@buf+1,f,c
  6527  000C96  5028               	movf	ultoa@v,w,c
  6528  000C98  1029               	iorwf	ultoa@v+1,w,c
  6529  000C9A  102A               	iorwf	ultoa@v+2,w,c
  6530  000C9C  102B               	iorwf	ultoa@v+3,w,c
  6531  000C9E  A4D8               	btfss	status,2,c
  6532  000CA0  D7DD               	goto	l1055
  6533  000CA2  C020  FFD9         	movff	ultoa@buf,fsr2l
  6534  000CA6  C021  FFDA         	movff	ultoa@buf+1,fsr2h
  6535  000CAA  0E00               	movlw	0
  6536  000CAC  6EDF               	movwf	indf2,c
  6537  000CAE  0620               	decf	ultoa@buf,f,c
  6538  000CB0  A0D8               	btfss	status,0,c
  6539  000CB2  0621               	decf	ultoa@buf+1,f,c
  6540  000CB4  C022  F013         	movff	ultoa@val,___llmod@dividend
  6541  000CB8  C023  F014         	movff	ultoa@val+1,___llmod@dividend+1
  6542  000CBC  C024  F015         	movff	ultoa@val+2,___llmod@dividend+2
  6543  000CC0  C025  F016         	movff	ultoa@val+3,___llmod@dividend+3
  6544  000CC4  C026  F017         	movff	ultoa@base,___llmod@divisor
  6545  000CC8  C027  F018         	movff	ultoa@base+1,___llmod@divisor+1
  6546  000CCC  0E00               	movlw	0
  6547  000CCE  BE18               	btfsc	___llmod@divisor+1,7,c
  6548  000CD0  0EFF               	movlw	-1
  6549  000CD2  6E19               	movwf	___llmod@divisor+2,c
  6550  000CD4  6E1A               	movwf	___llmod@divisor+3,c
  6551  000CD6  ECFC  F00C         	call	___llmod	;wreg free
  6552  000CDA  5013               	movf	?___llmod,w,c
  6553  000CDC  6E2C               	movwf	ultoa@c,c
  6554  000CDE  C022  F013         	movff	ultoa@val,___lldiv@dividend
  6555  000CE2  C023  F014         	movff	ultoa@val+1,___lldiv@dividend+1
  6556  000CE6  C024  F015         	movff	ultoa@val+2,___lldiv@dividend+2
  6557  000CEA  C025  F016         	movff	ultoa@val+3,___lldiv@dividend+3
  6558  000CEE  C026  F017         	movff	ultoa@base,___lldiv@divisor
  6559  000CF2  C027  F018         	movff	ultoa@base+1,___lldiv@divisor+1
  6560  000CF6  0E00               	movlw	0
  6561  000CF8  BE18               	btfsc	___lldiv@divisor+1,7,c
  6562  000CFA  0EFF               	movlw	-1
  6563  000CFC  6E19               	movwf	___lldiv@divisor+2,c
  6564  000CFE  6E1A               	movwf	___lldiv@divisor+3,c
  6565  000D00  EC0A  F00C         	call	___lldiv	;wreg free
  6566  000D04  C013  F022         	movff	?___lldiv,ultoa@val
  6567  000D08  C014  F023         	movff	?___lldiv+1,ultoa@val+1
  6568  000D0C  C015  F024         	movff	?___lldiv+2,ultoa@val+2
  6569  000D10  C016  F025         	movff	?___lldiv+3,ultoa@val+3
  6570  000D14  0E09               	movlw	9
  6571  000D16  642C               	cpfsgt	ultoa@c,c
  6572  000D18  D002               	goto	l1058
  6573  000D1A  0E07               	movlw	7
  6574  000D1C  262C               	addwf	ultoa@c,f,c
  6575  000D1E                     l1058:
  6576  000D1E  0E30               	movlw	48
  6577  000D20  262C               	addwf	ultoa@c,f,c
  6578  000D22  C020  FFD9         	movff	ultoa@buf,fsr2l
  6579  000D26  C021  FFDA         	movff	ultoa@buf+1,fsr2h
  6580  000D2A  C02C  FFDF         	movff	ultoa@c,indf2
  6581  000D2E  0620               	decf	ultoa@buf,f,c
  6582  000D30  A0D8               	btfss	status,0,c
  6583  000D32  0621               	decf	ultoa@buf+1,f,c
  6584  000D34  5022               	movf	ultoa@val,w,c
  6585  000D36  1023               	iorwf	ultoa@val+1,w,c
  6586  000D38  1024               	iorwf	ultoa@val+2,w,c
  6587  000D3A  1025               	iorwf	ultoa@val+3,w,c
  6588  000D3C  B4D8               	btfsc	status,2,c
  6589  000D3E  0012               	return	
  6590  000D40  D7B9               	goto	l1057
  6591  000D42                     __end_of_ultoa:
  6592                           	opt stack 0
  6593                           tblptru	equ	0xFF8
  6594                           tblptrh	equ	0xFF7
  6595                           tblptrl	equ	0xFF6
  6596                           tablat	equ	0xFF5
  6597                           prodh	equ	0xFF4
  6598                           prodl	equ	0xFF3
  6599                           intcon	equ	0xFF2
  6600                           intcon2	equ	0xFF1
  6601                           intcon3	equ	0xFF0
  6602                           postinc0	equ	0xFEE
  6603                           plusw0	equ	0xFEB
  6604                           wreg	equ	0xFE8
  6605                           postinc1	equ	0xFE6
  6606                           fsr1h	equ	0xFE2
  6607                           fsr1l	equ	0xFE1
  6608                           indf2	equ	0xFDF
  6609                           postinc2	equ	0xFDE
  6610                           postdec2	equ	0xFDD
  6611                           plusw2	equ	0xFDB
  6612                           fsr2h	equ	0xFDA
  6613                           fsr2l	equ	0xFD9
  6614                           status	equ	0xFD8
  6615                           
  6616 ;; *************** function ___llmod *****************
  6617 ;; Defined at:
  6618 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  6619 ;; Parameters:    Size  Location     Type
  6620 ;;  dividend        4   18[COMRAM] unsigned long 
  6621 ;;  divisor         4   22[COMRAM] unsigned long 
  6622 ;; Auto vars:     Size  Location     Type
  6623 ;;  counter         1   26[COMRAM] unsigned char 
  6624 ;; Return value:  Size  Location     Type
  6625 ;;                  4   18[COMRAM] unsigned long 
  6626 ;; Registers used:
  6627 ;;		wreg, status,2, status,0
  6628 ;; Tracked objects:
  6629 ;;		On entry : 0/0
  6630 ;;		On exit  : 0/0
  6631 ;;		Unchanged: 0/0
  6632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6633 ;;      Params:         8       0       0       0       0       0       0
  6634 ;;      Locals:         1       0       0       0       0       0       0
  6635 ;;      Temps:          0       0       0       0       0       0       0
  6636 ;;      Totals:         9       0       0       0       0       0       0
  6637 ;;Total ram usage:        9 bytes
  6638 ;; Hardware stack levels used:    1
  6639 ;; Hardware stack levels required when called:    1
  6640 ;; This function calls:
  6641 ;;		Nothing
  6642 ;; This function is called by:
  6643 ;;		_main
  6644 ;;		_ultoa
  6645 ;; This function uses a non-reentrant model
  6646 ;;
  6647                           
  6648                           	psect	text45
  6649  0019F8                     __ptext45:
  6650                           	opt stack 0
  6651  0019F8                     ___llmod:
  6652                           	opt stack 24
  6653                           
  6654                           ;incstack = 0
  6655  0019F8  5017               	movf	___llmod@divisor,w,c
  6656  0019FA  1018               	iorwf	___llmod@divisor+1,w,c
  6657  0019FC  1019               	iorwf	___llmod@divisor+2,w,c
  6658  0019FE  101A               	iorwf	___llmod@divisor+3,w,c
  6659  001A00  B4D8               	btfsc	status,2,c
  6660  001A02  D024               	goto	l1017
  6661  001A04  0E01               	movlw	1
  6662  001A06  6E1B               	movwf	___llmod@counter,c
  6663  001A08  D006               	goto	l1012
  6664  001A0A  90D8               	bcf	status,0,c
  6665  001A0C  3617               	rlcf	___llmod@divisor,f,c
  6666  001A0E  3618               	rlcf	___llmod@divisor+1,f,c
  6667  001A10  3619               	rlcf	___llmod@divisor+2,f,c
  6668  001A12  361A               	rlcf	___llmod@divisor+3,f,c
  6669  001A14  2A1B               	incf	___llmod@counter,f,c
  6670  001A16                     l1012:
  6671  001A16  AE1A               	btfss	___llmod@divisor+3,7,c
  6672  001A18  D7F8               	goto	l1013
  6673  001A1A                     u2570:
  6674  001A1A  5017               	movf	___llmod@divisor,w,c
  6675  001A1C  5C13               	subwf	___llmod@dividend,w,c
  6676  001A1E  5018               	movf	___llmod@divisor+1,w,c
  6677  001A20  5814               	subwfb	___llmod@dividend+1,w,c
  6678  001A22  5019               	movf	___llmod@divisor+2,w,c
  6679  001A24  5815               	subwfb	___llmod@dividend+2,w,c
  6680  001A26  501A               	movf	___llmod@divisor+3,w,c
  6681  001A28  5816               	subwfb	___llmod@dividend+3,w,c
  6682  001A2A  A0D8               	btfss	status,0,c
  6683  001A2C  D008               	goto	l1016
  6684  001A2E  5017               	movf	___llmod@divisor,w,c
  6685  001A30  5E13               	subwf	___llmod@dividend,f,c
  6686  001A32  5018               	movf	___llmod@divisor+1,w,c
  6687  001A34  5A14               	subwfb	___llmod@dividend+1,f,c
  6688  001A36  5019               	movf	___llmod@divisor+2,w,c
  6689  001A38  5A15               	subwfb	___llmod@dividend+2,f,c
  6690  001A3A  501A               	movf	___llmod@divisor+3,w,c
  6691  001A3C  5A16               	subwfb	___llmod@dividend+3,f,c
  6692  001A3E                     l1016:
  6693  001A3E  90D8               	bcf	status,0,c
  6694  001A40  321A               	rrcf	___llmod@divisor+3,f,c
  6695  001A42  3219               	rrcf	___llmod@divisor+2,f,c
  6696  001A44  3218               	rrcf	___llmod@divisor+1,f,c
  6697  001A46  3217               	rrcf	___llmod@divisor,f,c
  6698  001A48  2E1B               	decfsz	___llmod@counter,f,c
  6699  001A4A  D7E7               	goto	u2570
  6700  001A4C                     l1017:
  6701  001A4C  C013  F013         	movff	___llmod@dividend,?___llmod
  6702  001A50  C014  F014         	movff	___llmod@dividend+1,?___llmod+1
  6703  001A54  C015  F015         	movff	___llmod@dividend+2,?___llmod+2
  6704  001A58  C016  F016         	movff	___llmod@dividend+3,?___llmod+3
  6705  001A5C  0012               	return		;funcret
  6706  001A5E                     __end_of___llmod:
  6707                           	opt stack 0
  6708                           tblptru	equ	0xFF8
  6709                           tblptrh	equ	0xFF7
  6710                           tblptrl	equ	0xFF6
  6711                           tablat	equ	0xFF5
  6712                           prodh	equ	0xFF4
  6713                           prodl	equ	0xFF3
  6714                           intcon	equ	0xFF2
  6715                           intcon2	equ	0xFF1
  6716                           intcon3	equ	0xFF0
  6717                           postinc0	equ	0xFEE
  6718                           plusw0	equ	0xFEB
  6719                           wreg	equ	0xFE8
  6720                           postinc1	equ	0xFE6
  6721                           fsr1h	equ	0xFE2
  6722                           fsr1l	equ	0xFE1
  6723                           indf2	equ	0xFDF
  6724                           postinc2	equ	0xFDE
  6725                           postdec2	equ	0xFDD
  6726                           plusw2	equ	0xFDB
  6727                           fsr2h	equ	0xFDA
  6728                           fsr2l	equ	0xFD9
  6729                           status	equ	0xFD8
  6730                           
  6731 ;; *************** function ___lldiv *****************
  6732 ;; Defined at:
  6733 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  6734 ;; Parameters:    Size  Location     Type
  6735 ;;  dividend        4   18[COMRAM] unsigned long 
  6736 ;;  divisor         4   22[COMRAM] unsigned long 
  6737 ;; Auto vars:     Size  Location     Type
  6738 ;;  quotient        4   26[COMRAM] unsigned long 
  6739 ;;  counter         1   30[COMRAM] unsigned char 
  6740 ;; Return value:  Size  Location     Type
  6741 ;;                  4   18[COMRAM] unsigned long 
  6742 ;; Registers used:
  6743 ;;		wreg, status,2, status,0
  6744 ;; Tracked objects:
  6745 ;;		On entry : 0/0
  6746 ;;		On exit  : 0/0
  6747 ;;		Unchanged: 0/0
  6748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6749 ;;      Params:         8       0       0       0       0       0       0
  6750 ;;      Locals:         5       0       0       0       0       0       0
  6751 ;;      Temps:          0       0       0       0       0       0       0
  6752 ;;      Totals:        13       0       0       0       0       0       0
  6753 ;;Total ram usage:       13 bytes
  6754 ;; Hardware stack levels used:    1
  6755 ;; Hardware stack levels required when called:    1
  6756 ;; This function calls:
  6757 ;;		Nothing
  6758 ;; This function is called by:
  6759 ;;		_powerCalculateWatts
  6760 ;;		_powerReduction
  6761 ;;		_ultoa
  6762 ;; This function uses a non-reentrant model
  6763 ;;
  6764                           
  6765                           	psect	text46
  6766  001814                     __ptext46:
  6767                           	opt stack 0
  6768  001814                     ___lldiv:
  6769                           	opt stack 27
  6770                           
  6771                           ;incstack = 0
  6772  001814  0E00               	movlw	0
  6773  001816  6E1B               	movwf	___lldiv@quotient,c
  6774  001818  0E00               	movlw	0
  6775  00181A  6E1C               	movwf	___lldiv@quotient+1,c
  6776  00181C  0E00               	movlw	0
  6777  00181E  6E1D               	movwf	___lldiv@quotient+2,c
  6778  001820  0E00               	movlw	0
  6779  001822  6E1E               	movwf	___lldiv@quotient+3,c
  6780  001824  5017               	movf	___lldiv@divisor,w,c
  6781  001826  1018               	iorwf	___lldiv@divisor+1,w,c
  6782  001828  1019               	iorwf	___lldiv@divisor+2,w,c
  6783  00182A  101A               	iorwf	___lldiv@divisor+3,w,c
  6784  00182C  B4D8               	btfsc	status,2,c
  6785  00182E  D02A               	goto	l1007
  6786  001830  0E01               	movlw	1
  6787  001832  6E1F               	movwf	___lldiv@counter,c
  6788  001834  D006               	goto	l1002
  6789  001836  90D8               	bcf	status,0,c
  6790  001838  3617               	rlcf	___lldiv@divisor,f,c
  6791  00183A  3618               	rlcf	___lldiv@divisor+1,f,c
  6792  00183C  3619               	rlcf	___lldiv@divisor+2,f,c
  6793  00183E  361A               	rlcf	___lldiv@divisor+3,f,c
  6794  001840  2A1F               	incf	___lldiv@counter,f,c
  6795  001842                     l1002:
  6796  001842  AE1A               	btfss	___lldiv@divisor+3,7,c
  6797  001844  D7F8               	goto	l1003
  6798  001846                     u2540:
  6799  001846  90D8               	bcf	status,0,c
  6800  001848  361B               	rlcf	___lldiv@quotient,f,c
  6801  00184A  361C               	rlcf	___lldiv@quotient+1,f,c
  6802  00184C  361D               	rlcf	___lldiv@quotient+2,f,c
  6803  00184E  361E               	rlcf	___lldiv@quotient+3,f,c
  6804  001850  5017               	movf	___lldiv@divisor,w,c
  6805  001852  5C13               	subwf	___lldiv@dividend,w,c
  6806  001854  5018               	movf	___lldiv@divisor+1,w,c
  6807  001856  5814               	subwfb	___lldiv@dividend+1,w,c
  6808  001858  5019               	movf	___lldiv@divisor+2,w,c
  6809  00185A  5815               	subwfb	___lldiv@dividend+2,w,c
  6810  00185C  501A               	movf	___lldiv@divisor+3,w,c
  6811  00185E  5816               	subwfb	___lldiv@dividend+3,w,c
  6812  001860  A0D8               	btfss	status,0,c
  6813  001862  D009               	goto	l1006
  6814  001864  5017               	movf	___lldiv@divisor,w,c
  6815  001866  5E13               	subwf	___lldiv@dividend,f,c
  6816  001868  5018               	movf	___lldiv@divisor+1,w,c
  6817  00186A  5A14               	subwfb	___lldiv@dividend+1,f,c
  6818  00186C  5019               	movf	___lldiv@divisor+2,w,c
  6819  00186E  5A15               	subwfb	___lldiv@dividend+2,f,c
  6820  001870  501A               	movf	___lldiv@divisor+3,w,c
  6821  001872  5A16               	subwfb	___lldiv@dividend+3,f,c
  6822  001874  801B               	bsf	___lldiv@quotient,0,c
  6823  001876                     l1006:
  6824  001876  90D8               	bcf	status,0,c
  6825  001878  321A               	rrcf	___lldiv@divisor+3,f,c
  6826  00187A  3219               	rrcf	___lldiv@divisor+2,f,c
  6827  00187C  3218               	rrcf	___lldiv@divisor+1,f,c
  6828  00187E  3217               	rrcf	___lldiv@divisor,f,c
  6829  001880  2E1F               	decfsz	___lldiv@counter,f,c
  6830  001882  D7E1               	goto	u2540
  6831  001884                     l1007:
  6832  001884  C01B  F013         	movff	___lldiv@quotient,?___lldiv
  6833  001888  C01C  F014         	movff	___lldiv@quotient+1,?___lldiv+1
  6834  00188C  C01D  F015         	movff	___lldiv@quotient+2,?___lldiv+2
  6835  001890  C01E  F016         	movff	___lldiv@quotient+3,?___lldiv+3
  6836  001894  0012               	return		;funcret
  6837  001896                     __end_of___lldiv:
  6838                           	opt stack 0
  6839                           tblptru	equ	0xFF8
  6840                           tblptrh	equ	0xFF7
  6841                           tblptrl	equ	0xFF6
  6842                           tablat	equ	0xFF5
  6843                           prodh	equ	0xFF4
  6844                           prodl	equ	0xFF3
  6845                           intcon	equ	0xFF2
  6846                           intcon2	equ	0xFF1
  6847                           intcon3	equ	0xFF0
  6848                           postinc0	equ	0xFEE
  6849                           plusw0	equ	0xFEB
  6850                           wreg	equ	0xFE8
  6851                           postinc1	equ	0xFE6
  6852                           fsr1h	equ	0xFE2
  6853                           fsr1l	equ	0xFE1
  6854                           indf2	equ	0xFDF
  6855                           postinc2	equ	0xFDE
  6856                           postdec2	equ	0xFDD
  6857                           plusw2	equ	0xFDB
  6858                           fsr2h	equ	0xFDA
  6859                           fsr2l	equ	0xFD9
  6860                           status	equ	0xFD8
  6861                           
  6862 ;; *************** function _command_builder3 *****************
  6863 ;; Defined at:
  6864 ;;		line 487 in file "SlaveComm.c"
  6865 ;; Parameters:    Size  Location     Type
  6866 ;;  send_buffer     2   46[COMRAM] PTR struct buffer
  6867 ;;		 -> communications@send_buffer(42), 
  6868 ;;  data1           2   48[COMRAM] PTR unsigned char 
  6869 ;;		 -> STR_27(4), STR_22(4), STR_19(4), STR_17(4), 
  6870 ;;		 -> STR_15(4), 
  6871 ;;  data2           2   50[COMRAM] PTR unsigned char 
  6872 ;;		 -> STR_28(10), STR_23(5), STR_20(6), STR_18(7), 
  6873 ;;		 -> STR_16(6), 
  6874 ;;  data3           2   52[COMRAM] PTR unsigned char 
  6875 ;;		 -> STR_29(4), STR_24(4), STR_21(4), com_command_setEnergyUsed@temp(12), 
  6876 ;;		 -> com_command_setPower@temp(12), 
  6877 ;; Auto vars:     Size  Location     Type
  6878 ;;  xsum            2   54[COMRAM] int 
  6879 ;; Return value:  Size  Location     Type
  6880 ;;                  1    wreg      void 
  6881 ;; Registers used:
  6882 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6883 ;; Tracked objects:
  6884 ;;		On entry : 0/0
  6885 ;;		On exit  : 0/0
  6886 ;;		Unchanged: 0/0
  6887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6888 ;;      Params:         8       0       0       0       0       0       0
  6889 ;;      Locals:         2       0       0       0       0       0       0
  6890 ;;      Temps:          0       0       0       0       0       0       0
  6891 ;;      Totals:        10       0       0       0       0       0       0
  6892 ;;Total ram usage:       10 bytes
  6893 ;; Hardware stack levels used:    1
  6894 ;; Hardware stack levels required when called:    5
  6895 ;; This function calls:
  6896 ;;		_command_builder_add_char
  6897 ;;		_command_builder_add_string
  6898 ;;		_xsum_builder
  6899 ;; This function is called by:
  6900 ;;		_com_command_setPower
  6901 ;;		_com_command_setEnergyUsed
  6902 ;;		_com_command_setVersion
  6903 ;;		_com_command_setVolts
  6904 ;;		_com_command_setAmps
  6905 ;; This function uses a non-reentrant model
  6906 ;;
  6907                           
  6908                           	psect	text47
  6909  001194                     __ptext47:
  6910                           	opt stack 0
  6911  001194                     _command_builder3:
  6912                           	opt stack 21
  6913                           
  6914                           ;SlaveComm.c: 489: command_builder_add_char( send_buffer, '#' );
  6915                           
  6916                           ;incstack = 0
  6917  001194  C02F  F013         	movff	command_builder3@send_buffer,command_builder_add_char@send_buffer
  6918  001198  C030  F014         	movff	command_builder3@send_buffer+1,command_builder_add_char@send_buffer+1
  6919  00119C  0E23               	movlw	35
  6920  00119E  6E15               	movwf	command_builder_add_char@data,c
  6921  0011A0  EC92  F00D         	call	_command_builder_add_char	;wreg free
  6922                           
  6923                           ;SlaveComm.c: 490: command_builder_add_char( send_buffer, '!' );
  6924  0011A4  C02F  F013         	movff	command_builder3@send_buffer,command_builder_add_char@send_buffer
  6925  0011A8  C030  F014         	movff	command_builder3@send_buffer+1,command_builder_add_char@send_buffer+1
  6926  0011AC  0E21               	movlw	33
  6927  0011AE  6E15               	movwf	command_builder_add_char@data,c
  6928  0011B0  EC92  F00D         	call	_command_builder_add_char	;wreg free
  6929                           
  6930                           ;SlaveComm.c: 491: int xsum = 0;
  6931  0011B4  0E00               	movlw	0
  6932  0011B6  6E38               	movwf	command_builder3@xsum+1,c
  6933  0011B8  0E00               	movlw	0
  6934  0011BA  6E37               	movwf	command_builder3@xsum,c
  6935                           
  6936                           ;SlaveComm.c: 492: xsum += command_builder_add_string( send_buffer, data1 );
  6937  0011BC  C02F  F017         	movff	command_builder3@send_buffer,command_builder_add_string@send_buffer
  6938  0011C0  C030  F018         	movff	command_builder3@send_buffer+1,command_builder_add_string@send_buffer+1
  6939  0011C4  C031  F019         	movff	command_builder3@data1,command_builder_add_string@data_string
  6940  0011C8  C032  F01A         	movff	command_builder3@data1+1,command_builder_add_string@data_string+1
  6941  0011CC  EC36  F00B         	call	_command_builder_add_string	;wreg free
  6942  0011D0  5017               	movf	?_command_builder_add_string,w,c
  6943  0011D2  2637               	addwf	command_builder3@xsum,f,c
  6944  0011D4  5018               	movf	?_command_builder_add_string+1,w,c
  6945  0011D6  2238               	addwfc	command_builder3@xsum+1,f,c
  6946                           
  6947                           ;SlaveComm.c: 493: xsum += command_builder_add_char( send_buffer, ';' );
  6948  0011D8  C02F  F013         	movff	command_builder3@send_buffer,command_builder_add_char@send_buffer
  6949  0011DC  C030  F014         	movff	command_builder3@send_buffer+1,command_builder_add_char@send_buffer+1
  6950  0011E0  0E3B               	movlw	59
  6951  0011E2  6E15               	movwf	command_builder_add_char@data,c
  6952  0011E4  EC92  F00D         	call	_command_builder_add_char	;wreg free
  6953  0011E8  5013               	movf	?_command_builder_add_char,w,c
  6954  0011EA  2637               	addwf	command_builder3@xsum,f,c
  6955  0011EC  5014               	movf	?_command_builder_add_char+1,w,c
  6956  0011EE  2238               	addwfc	command_builder3@xsum+1,f,c
  6957                           
  6958                           ;SlaveComm.c: 494: xsum += command_builder_add_string( send_buffer, data2 );
  6959  0011F0  C02F  F017         	movff	command_builder3@send_buffer,command_builder_add_string@send_buffer
  6960  0011F4  C030  F018         	movff	command_builder3@send_buffer+1,command_builder_add_string@send_buffer+1
  6961  0011F8  C033  F019         	movff	command_builder3@data2,command_builder_add_string@data_string
  6962  0011FC  C034  F01A         	movff	command_builder3@data2+1,command_builder_add_string@data_string+1
  6963  001200  EC36  F00B         	call	_command_builder_add_string	;wreg free
  6964  001204  5017               	movf	?_command_builder_add_string,w,c
  6965  001206  2637               	addwf	command_builder3@xsum,f,c
  6966  001208  5018               	movf	?_command_builder_add_string+1,w,c
  6967  00120A  2238               	addwfc	command_builder3@xsum+1,f,c
  6968                           
  6969                           ;SlaveComm.c: 495: xsum += command_builder_add_char( send_buffer, ';' );
  6970  00120C  C02F  F013         	movff	command_builder3@send_buffer,command_builder_add_char@send_buffer
  6971  001210  C030  F014         	movff	command_builder3@send_buffer+1,command_builder_add_char@send_buffer+1
  6972  001214  0E3B               	movlw	59
  6973  001216  6E15               	movwf	command_builder_add_char@data,c
  6974  001218  EC92  F00D         	call	_command_builder_add_char	;wreg free
  6975  00121C  5013               	movf	?_command_builder_add_char,w,c
  6976  00121E  2637               	addwf	command_builder3@xsum,f,c
  6977  001220  5014               	movf	?_command_builder_add_char+1,w,c
  6978  001222  2238               	addwfc	command_builder3@xsum+1,f,c
  6979                           
  6980                           ;SlaveComm.c: 496: xsum += command_builder_add_string( send_buffer, data3 );
  6981  001224  C02F  F017         	movff	command_builder3@send_buffer,command_builder_add_string@send_buffer
  6982  001228  C030  F018         	movff	command_builder3@send_buffer+1,command_builder_add_string@send_buffer+1
  6983  00122C  C035  F019         	movff	command_builder3@data3,command_builder_add_string@data_string
  6984  001230  C036  F01A         	movff	command_builder3@data3+1,command_builder_add_string@data_string+1
  6985  001234  EC36  F00B         	call	_command_builder_add_string	;wreg free
  6986  001238  5017               	movf	?_command_builder_add_string,w,c
  6987  00123A  2637               	addwf	command_builder3@xsum,f,c
  6988  00123C  5018               	movf	?_command_builder_add_string+1,w,c
  6989  00123E  2238               	addwfc	command_builder3@xsum+1,f,c
  6990                           
  6991                           ;SlaveComm.c: 497: xsum_builder( send_buffer, xsum );
  6992  001240  C02F  F02B         	movff	command_builder3@send_buffer,xsum_builder@send_buffer
  6993  001244  C030  F02C         	movff	command_builder3@send_buffer+1,xsum_builder@send_buffer+1
  6994  001248  C037  F02D         	movff	command_builder3@xsum,xsum_builder@xsum
  6995  00124C  C038  F02E         	movff	command_builder3@xsum+1,xsum_builder@xsum+1
  6996  001250  EC61  F00D         	call	_xsum_builder	;wreg free
  6997  001254  0012               	return	
  6998  001256                     __end_of_command_builder3:
  6999                           	opt stack 0
  7000                           tblptru	equ	0xFF8
  7001                           tblptrh	equ	0xFF7
  7002                           tblptrl	equ	0xFF6
  7003                           tablat	equ	0xFF5
  7004                           prodh	equ	0xFF4
  7005                           prodl	equ	0xFF3
  7006                           intcon	equ	0xFF2
  7007                           intcon2	equ	0xFF1
  7008                           intcon3	equ	0xFF0
  7009                           postinc0	equ	0xFEE
  7010                           plusw0	equ	0xFEB
  7011                           wreg	equ	0xFE8
  7012                           postinc1	equ	0xFE6
  7013                           fsr1h	equ	0xFE2
  7014                           fsr1l	equ	0xFE1
  7015                           indf2	equ	0xFDF
  7016                           postinc2	equ	0xFDE
  7017                           postdec2	equ	0xFDD
  7018                           plusw2	equ	0xFDB
  7019                           fsr2h	equ	0xFDA
  7020                           fsr2l	equ	0xFD9
  7021                           status	equ	0xFD8
  7022                           
  7023 ;; *************** function _xsum_builder *****************
  7024 ;; Defined at:
  7025 ;;		line 519 in file "SlaveComm.c"
  7026 ;; Parameters:    Size  Location     Type
  7027 ;;  send_buffer     2   42[COMRAM] PTR struct buffer
  7028 ;;		 -> communications@send_buffer(42), 
  7029 ;;  xsum            2   44[COMRAM] int 
  7030 ;; Auto vars:     Size  Location     Type
  7031 ;;  xsumBuf        16    0[BANK0 ] unsigned char [16]
  7032 ;; Return value:  Size  Location     Type
  7033 ;;                  1    wreg      void 
  7034 ;; Registers used:
  7035 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7036 ;; Tracked objects:
  7037 ;;		On entry : 0/0
  7038 ;;		On exit  : 0/0
  7039 ;;		Unchanged: 0/0
  7040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7041 ;;      Params:         4       0       0       0       0       0       0
  7042 ;;      Locals:         0      16       0       0       0       0       0
  7043 ;;      Temps:          0       0       0       0       0       0       0
  7044 ;;      Totals:         4      16       0       0       0       0       0
  7045 ;;Total ram usage:       20 bytes
  7046 ;; Hardware stack levels used:    1
  7047 ;; Hardware stack levels required when called:    4
  7048 ;; This function calls:
  7049 ;;		_command_builder_add_char
  7050 ;;		_command_builder_add_string
  7051 ;;		_itoa
  7052 ;; This function is called by:
  7053 ;;		_command_builder1
  7054 ;;		_command_builder3
  7055 ;;		_command_builder2
  7056 ;;		_command_builder4
  7057 ;; This function uses a non-reentrant model
  7058 ;;
  7059                           
  7060                           	psect	text48
  7061  001AC2                     __ptext48:
  7062                           	opt stack 0
  7063  001AC2                     _xsum_builder:
  7064                           	opt stack 21
  7065                           
  7066                           ;SlaveComm.c: 522: command_builder_add_char( send_buffer, ';' );
  7067                           
  7068                           ;incstack = 0
  7069  001AC2  C02B  F013         	movff	xsum_builder@send_buffer,command_builder_add_char@send_buffer
  7070  001AC6  C02C  F014         	movff	xsum_builder@send_buffer+1,command_builder_add_char@send_buffer+1
  7071  001ACA  0E3B               	movlw	59
  7072  001ACC  6E15               	movwf	command_builder_add_char@data,c
  7073  001ACE  EC92  F00D         	call	_command_builder_add_char	;wreg free
  7074                           
  7075                           ;SlaveComm.c: 523: command_builder_add_char( send_buffer, '$' );
  7076  001AD2  C02B  F013         	movff	xsum_builder@send_buffer,command_builder_add_char@send_buffer
  7077  001AD6  C02C  F014         	movff	xsum_builder@send_buffer+1,command_builder_add_char@send_buffer+1
  7078  001ADA  0E24               	movlw	36
  7079  001ADC  6E15               	movwf	command_builder_add_char@data,c
  7080  001ADE  EC92  F00D         	call	_command_builder_add_char	;wreg free
  7081                           
  7082                           ;SlaveComm.c: 524: char xsumBuf[16];
  7083                           ;SlaveComm.c: 525: itoa( xsumBuf, xsum, 10 );
  7084  001AE2  0E60               	movlw	low xsum_builder@xsumBuf
  7085  001AE4  6E23               	movwf	itoa@buf,c
  7086  001AE6  0E00               	movlw	high xsum_builder@xsumBuf
  7087  001AE8  6E24               	movwf	itoa@buf+1,c
  7088  001AEA  C02D  F025         	movff	xsum_builder@xsum,itoa@val
  7089  001AEE  C02E  F026         	movff	xsum_builder@xsum+1,itoa@val+1
  7090  001AF2  0E00               	movlw	0
  7091  001AF4  6E28               	movwf	itoa@base+1,c
  7092  001AF6  0E0A               	movlw	10
  7093  001AF8  6E27               	movwf	itoa@base,c
  7094  001AFA  ECFB  F00E         	call	_itoa	;wreg free
  7095                           
  7096                           ;SlaveComm.c: 526: command_builder_add_string( send_buffer, xsumBuf );
  7097  001AFE  C02B  F017         	movff	xsum_builder@send_buffer,command_builder_add_string@send_buffer
  7098  001B02  C02C  F018         	movff	xsum_builder@send_buffer+1,command_builder_add_string@send_buffer+1
  7099  001B06  0E60               	movlw	low xsum_builder@xsumBuf
  7100  001B08  6E19               	movwf	command_builder_add_string@data_string,c
  7101  001B0A  0E00               	movlw	high xsum_builder@xsumBuf
  7102  001B0C  6E1A               	movwf	command_builder_add_string@data_string+1,c
  7103  001B0E  EC36  F00B         	call	_command_builder_add_string	;wreg free
  7104                           
  7105                           ;SlaveComm.c: 528: command_builder_add_char( send_buffer, '*' );
  7106  001B12  C02B  F013         	movff	xsum_builder@send_buffer,command_builder_add_char@send_buffer
  7107  001B16  C02C  F014         	movff	xsum_builder@send_buffer+1,command_builder_add_char@send_buffer+1
  7108  001B1A  0E2A               	movlw	42
  7109  001B1C  6E15               	movwf	command_builder_add_char@data,c
  7110  001B1E  EC92  F00D         	call	_command_builder_add_char	;wreg free
  7111  001B22  0012               	return	
  7112  001B24                     __end_of_xsum_builder:
  7113                           	opt stack 0
  7114                           tblptru	equ	0xFF8
  7115                           tblptrh	equ	0xFF7
  7116                           tblptrl	equ	0xFF6
  7117                           tablat	equ	0xFF5
  7118                           prodh	equ	0xFF4
  7119                           prodl	equ	0xFF3
  7120                           intcon	equ	0xFF2
  7121                           intcon2	equ	0xFF1
  7122                           intcon3	equ	0xFF0
  7123                           postinc0	equ	0xFEE
  7124                           plusw0	equ	0xFEB
  7125                           wreg	equ	0xFE8
  7126                           postinc1	equ	0xFE6
  7127                           fsr1h	equ	0xFE2
  7128                           fsr1l	equ	0xFE1
  7129                           indf2	equ	0xFDF
  7130                           postinc2	equ	0xFDE
  7131                           postdec2	equ	0xFDD
  7132                           plusw2	equ	0xFDB
  7133                           fsr2h	equ	0xFDA
  7134                           fsr2l	equ	0xFD9
  7135                           status	equ	0xFD8
  7136                           
  7137 ;; *************** function _itoa *****************
  7138 ;; Defined at:
  7139 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
  7140 ;; Parameters:    Size  Location     Type
  7141 ;;  buf             2   34[COMRAM] PTR unsigned char 
  7142 ;;		 -> xsum_builder@xsumBuf(16), 
  7143 ;;  val             2   36[COMRAM] int 
  7144 ;;  base            2   38[COMRAM] int 
  7145 ;; Auto vars:     Size  Location     Type
  7146 ;;  cp              2   40[COMRAM] PTR unsigned char 
  7147 ;;		 -> xsum_builder@xsumBuf(16), 
  7148 ;; Return value:  Size  Location     Type
  7149 ;;                  2   34[COMRAM] PTR unsigned char 
  7150 ;; Registers used:
  7151 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7152 ;; Tracked objects:
  7153 ;;		On entry : 0/0
  7154 ;;		On exit  : 0/0
  7155 ;;		Unchanged: 0/0
  7156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7157 ;;      Params:         6       0       0       0       0       0       0
  7158 ;;      Locals:         2       0       0       0       0       0       0
  7159 ;;      Temps:          0       0       0       0       0       0       0
  7160 ;;      Totals:         8       0       0       0       0       0       0
  7161 ;;Total ram usage:        8 bytes
  7162 ;; Hardware stack levels used:    1
  7163 ;; Hardware stack levels required when called:    3
  7164 ;; This function calls:
  7165 ;;		_utoa
  7166 ;; This function is called by:
  7167 ;;		_xsum_builder
  7168 ;; This function uses a non-reentrant model
  7169 ;;
  7170                           
  7171                           	psect	text49
  7172  001DF6                     __ptext49:
  7173                           	opt stack 0
  7174  001DF6                     _itoa:
  7175                           	opt stack 21
  7176                           
  7177                           ;incstack = 0
  7178  001DF6  C023  F029         	movff	itoa@buf,itoa@cp
  7179  001DFA  C024  F02A         	movff	itoa@buf+1,itoa@cp+1
  7180  001DFE  AE26               	btfss	itoa@val+1,7,c
  7181  001E00  D00C               	goto	l968
  7182  001E02  C023  FFD9         	movff	itoa@buf,fsr2l
  7183  001E06  C024  FFDA         	movff	itoa@buf+1,fsr2h
  7184  001E0A  0E2D               	movlw	45
  7185  001E0C  6EDF               	movwf	indf2,c
  7186  001E0E  4A23               	infsnz	itoa@buf,f,c
  7187  001E10  2A24               	incf	itoa@buf+1,f,c
  7188  001E12  6C25               	negf	itoa@val,c
  7189  001E14  1E26               	comf	itoa@val+1,f,c
  7190  001E16  B0D8               	btfsc	status,0,c
  7191  001E18  2A26               	incf	itoa@val+1,f,c
  7192  001E1A                     l968:
  7193  001E1A  C023  F01A         	movff	itoa@buf,utoa@buf
  7194  001E1E  C024  F01B         	movff	itoa@buf+1,utoa@buf+1
  7195  001E22  C025  F01C         	movff	itoa@val,utoa@val
  7196  001E26  C026  F01D         	movff	itoa@val+1,utoa@val+1
  7197  001E2A  C027  F01E         	movff	itoa@base,utoa@base
  7198  001E2E  C028  F01F         	movff	itoa@base+1,utoa@base+1
  7199  001E32  EC49  F00A         	call	_utoa	;wreg free
  7200  001E36  0012               	return	
  7201  001E38                     __end_of_itoa:
  7202                           	opt stack 0
  7203                           tblptru	equ	0xFF8
  7204                           tblptrh	equ	0xFF7
  7205                           tblptrl	equ	0xFF6
  7206                           tablat	equ	0xFF5
  7207                           prodh	equ	0xFF4
  7208                           prodl	equ	0xFF3
  7209                           intcon	equ	0xFF2
  7210                           intcon2	equ	0xFF1
  7211                           intcon3	equ	0xFF0
  7212                           postinc0	equ	0xFEE
  7213                           plusw0	equ	0xFEB
  7214                           wreg	equ	0xFE8
  7215                           postinc1	equ	0xFE6
  7216                           fsr1h	equ	0xFE2
  7217                           fsr1l	equ	0xFE1
  7218                           indf2	equ	0xFDF
  7219                           postinc2	equ	0xFDE
  7220                           postdec2	equ	0xFDD
  7221                           plusw2	equ	0xFDB
  7222                           fsr2h	equ	0xFDA
  7223                           fsr2l	equ	0xFD9
  7224                           status	equ	0xFD8
  7225                           
  7226 ;; *************** function _utoa *****************
  7227 ;; Defined at:
  7228 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
  7229 ;; Parameters:    Size  Location     Type
  7230 ;;  buf             2   25[COMRAM] PTR unsigned char 
  7231 ;;		 -> xsum_builder@xsumBuf(16), 
  7232 ;;  val             2   27[COMRAM] unsigned int 
  7233 ;;  base            2   29[COMRAM] int 
  7234 ;; Auto vars:     Size  Location     Type
  7235 ;;  v               2   31[COMRAM] unsigned int 
  7236 ;;  c               1   33[COMRAM] unsigned char 
  7237 ;; Return value:  Size  Location     Type
  7238 ;;                  2   25[COMRAM] PTR unsigned char 
  7239 ;; Registers used:
  7240 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7241 ;; Tracked objects:
  7242 ;;		On entry : 0/0
  7243 ;;		On exit  : 0/0
  7244 ;;		Unchanged: 0/0
  7245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7246 ;;      Params:         6       0       0       0       0       0       0
  7247 ;;      Locals:         3       0       0       0       0       0       0
  7248 ;;      Temps:          0       0       0       0       0       0       0
  7249 ;;      Totals:         9       0       0       0       0       0       0
  7250 ;;Total ram usage:        9 bytes
  7251 ;; Hardware stack levels used:    1
  7252 ;; Hardware stack levels required when called:    2
  7253 ;; This function calls:
  7254 ;;		___lwdiv
  7255 ;;		___lwmod
  7256 ;; This function is called by:
  7257 ;;		_itoa
  7258 ;; This function uses a non-reentrant model
  7259 ;;
  7260                           
  7261                           	psect	text50
  7262  001492                     __ptext50:
  7263                           	opt stack 0
  7264  001492                     _utoa:
  7265                           	opt stack 21
  7266                           
  7267                           ;incstack = 0
  7268  001492  C01C  F020         	movff	utoa@val,utoa@v
  7269  001496  C01D  F021         	movff	utoa@val+1,utoa@v+1
  7270  00149A  C020  F013         	movff	utoa@v,___lwdiv@dividend
  7271  00149E  C021  F014         	movff	utoa@v+1,___lwdiv@dividend+1
  7272  0014A2  C01E  F015         	movff	utoa@base,___lwdiv@divisor
  7273  0014A6  C01F  F016         	movff	utoa@base+1,___lwdiv@divisor+1
  7274  0014AA  EC18  F00E         	call	___lwdiv	;wreg free
  7275  0014AE  C013  F020         	movff	?___lwdiv,utoa@v
  7276  0014B2  C014  F021         	movff	?___lwdiv+1,utoa@v+1
  7277  0014B6  4A1A               	infsnz	utoa@buf,f,c
  7278  0014B8  2A1B               	incf	utoa@buf+1,f,c
  7279  0014BA  5020               	movf	utoa@v,w,c
  7280  0014BC  1021               	iorwf	utoa@v+1,w,c
  7281  0014BE  A4D8               	btfss	status,2,c
  7282  0014C0  D7EC               	goto	l972
  7283  0014C2  C01A  FFD9         	movff	utoa@buf,fsr2l
  7284  0014C6  C01B  FFDA         	movff	utoa@buf+1,fsr2h
  7285  0014CA  0E00               	movlw	0
  7286  0014CC  6EDF               	movwf	indf2,c
  7287  0014CE  061A               	decf	utoa@buf,f,c
  7288  0014D0  A0D8               	btfss	status,0,c
  7289  0014D2  061B               	decf	utoa@buf+1,f,c
  7290  0014D4  C01C  F013         	movff	utoa@val,___lwmod@dividend
  7291  0014D8  C01D  F014         	movff	utoa@val+1,___lwmod@dividend+1
  7292  0014DC  C01E  F015         	movff	utoa@base,___lwmod@divisor
  7293  0014E0  C01F  F016         	movff	utoa@base+1,___lwmod@divisor+1
  7294  0014E4  EC1C  F00F         	call	___lwmod	;wreg free
  7295  0014E8  5013               	movf	?___lwmod,w,c
  7296  0014EA  6E22               	movwf	utoa@c,c
  7297  0014EC  C01C  F013         	movff	utoa@val,___lwdiv@dividend
  7298  0014F0  C01D  F014         	movff	utoa@val+1,___lwdiv@dividend+1
  7299  0014F4  C01E  F015         	movff	utoa@base,___lwdiv@divisor
  7300  0014F8  C01F  F016         	movff	utoa@base+1,___lwdiv@divisor+1
  7301  0014FC  EC18  F00E         	call	___lwdiv	;wreg free
  7302  001500  C013  F01C         	movff	?___lwdiv,utoa@val
  7303  001504  C014  F01D         	movff	?___lwdiv+1,utoa@val+1
  7304  001508  0E09               	movlw	9
  7305  00150A  6422               	cpfsgt	utoa@c,c
  7306  00150C  D002               	goto	l975
  7307  00150E  0E07               	movlw	7
  7308  001510  2622               	addwf	utoa@c,f,c
  7309  001512                     l975:
  7310  001512  0E30               	movlw	48
  7311  001514  2622               	addwf	utoa@c,f,c
  7312  001516  C01A  FFD9         	movff	utoa@buf,fsr2l
  7313  00151A  C01B  FFDA         	movff	utoa@buf+1,fsr2h
  7314  00151E  C022  FFDF         	movff	utoa@c,indf2
  7315  001522  061A               	decf	utoa@buf,f,c
  7316  001524  A0D8               	btfss	status,0,c
  7317  001526  061B               	decf	utoa@buf+1,f,c
  7318  001528  501C               	movf	utoa@val,w,c
  7319  00152A  101D               	iorwf	utoa@val+1,w,c
  7320  00152C  A4D8               	btfss	status,2,c
  7321  00152E  D7D2               	goto	l974
  7322                           
  7323                           ;	Return value of _utoa is never used
  7324  001530  4A1A               	infsnz	utoa@buf,f,c
  7325  001532  2A1B               	incf	utoa@buf+1,f,c
  7326  001534  0012               	return	
  7327  001536                     __end_of_utoa:
  7328                           	opt stack 0
  7329                           tblptru	equ	0xFF8
  7330                           tblptrh	equ	0xFF7
  7331                           tblptrl	equ	0xFF6
  7332                           tablat	equ	0xFF5
  7333                           prodh	equ	0xFF4
  7334                           prodl	equ	0xFF3
  7335                           intcon	equ	0xFF2
  7336                           intcon2	equ	0xFF1
  7337                           intcon3	equ	0xFF0
  7338                           postinc0	equ	0xFEE
  7339                           plusw0	equ	0xFEB
  7340                           wreg	equ	0xFE8
  7341                           postinc1	equ	0xFE6
  7342                           fsr1h	equ	0xFE2
  7343                           fsr1l	equ	0xFE1
  7344                           indf2	equ	0xFDF
  7345                           postinc2	equ	0xFDE
  7346                           postdec2	equ	0xFDD
  7347                           plusw2	equ	0xFDB
  7348                           fsr2h	equ	0xFDA
  7349                           fsr2l	equ	0xFD9
  7350                           status	equ	0xFD8
  7351                           
  7352 ;; *************** function ___lwmod *****************
  7353 ;; Defined at:
  7354 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  7355 ;; Parameters:    Size  Location     Type
  7356 ;;  dividend        2   18[COMRAM] unsigned int 
  7357 ;;  divisor         2   20[COMRAM] unsigned int 
  7358 ;; Auto vars:     Size  Location     Type
  7359 ;;  counter         1   22[COMRAM] unsigned char 
  7360 ;; Return value:  Size  Location     Type
  7361 ;;                  2   18[COMRAM] unsigned int 
  7362 ;; Registers used:
  7363 ;;		wreg, status,2, status,0
  7364 ;; Tracked objects:
  7365 ;;		On entry : 0/0
  7366 ;;		On exit  : 0/0
  7367 ;;		Unchanged: 0/0
  7368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7369 ;;      Params:         4       0       0       0       0       0       0
  7370 ;;      Locals:         1       0       0       0       0       0       0
  7371 ;;      Temps:          0       0       0       0       0       0       0
  7372 ;;      Totals:         5       0       0       0       0       0       0
  7373 ;;Total ram usage:        5 bytes
  7374 ;; Hardware stack levels used:    1
  7375 ;; Hardware stack levels required when called:    1
  7376 ;; This function calls:
  7377 ;;		Nothing
  7378 ;; This function is called by:
  7379 ;;		_utoa
  7380 ;; This function uses a non-reentrant model
  7381 ;;
  7382                           
  7383                           	psect	text51
  7384  001E38                     __ptext51:
  7385                           	opt stack 0
  7386  001E38                     ___lwmod:
  7387                           	opt stack 21
  7388                           
  7389                           ;incstack = 0
  7390  001E38  5015               	movf	___lwmod@divisor,w,c
  7391  001E3A  1016               	iorwf	___lwmod@divisor+1,w,c
  7392  001E3C  B4D8               	btfsc	status,2,c
  7393  001E3E  D018               	goto	l1084
  7394  001E40  0E01               	movlw	1
  7395  001E42  6E17               	movwf	___lwmod@counter,c
  7396  001E44  D004               	goto	l1079
  7397  001E46  90D8               	bcf	status,0,c
  7398  001E48  3615               	rlcf	___lwmod@divisor,f,c
  7399  001E4A  3616               	rlcf	___lwmod@divisor+1,f,c
  7400  001E4C  2A17               	incf	___lwmod@counter,f,c
  7401  001E4E                     l1079:
  7402  001E4E  AE16               	btfss	___lwmod@divisor+1,7,c
  7403  001E50  D7FA               	goto	l1080
  7404  001E52                     u2430:
  7405  001E52  5015               	movf	___lwmod@divisor,w,c
  7406  001E54  5C13               	subwf	___lwmod@dividend,w,c
  7407  001E56  5016               	movf	___lwmod@divisor+1,w,c
  7408  001E58  5814               	subwfb	___lwmod@dividend+1,w,c
  7409  001E5A  A0D8               	btfss	status,0,c
  7410  001E5C  D004               	goto	l1083
  7411  001E5E  5015               	movf	___lwmod@divisor,w,c
  7412  001E60  5E13               	subwf	___lwmod@dividend,f,c
  7413  001E62  5016               	movf	___lwmod@divisor+1,w,c
  7414  001E64  5A14               	subwfb	___lwmod@dividend+1,f,c
  7415  001E66                     l1083:
  7416  001E66  90D8               	bcf	status,0,c
  7417  001E68  3216               	rrcf	___lwmod@divisor+1,f,c
  7418  001E6A  3215               	rrcf	___lwmod@divisor,f,c
  7419  001E6C  2E17               	decfsz	___lwmod@counter,f,c
  7420  001E6E  D7F1               	goto	u2430
  7421  001E70                     l1084:
  7422  001E70  C013  F013         	movff	___lwmod@dividend,?___lwmod
  7423  001E74  C014  F014         	movff	___lwmod@dividend+1,?___lwmod+1
  7424  001E78  0012               	return		;funcret
  7425  001E7A                     __end_of___lwmod:
  7426                           	opt stack 0
  7427                           tblptru	equ	0xFF8
  7428                           tblptrh	equ	0xFF7
  7429                           tblptrl	equ	0xFF6
  7430                           tablat	equ	0xFF5
  7431                           prodh	equ	0xFF4
  7432                           prodl	equ	0xFF3
  7433                           intcon	equ	0xFF2
  7434                           intcon2	equ	0xFF1
  7435                           intcon3	equ	0xFF0
  7436                           postinc0	equ	0xFEE
  7437                           plusw0	equ	0xFEB
  7438                           wreg	equ	0xFE8
  7439                           postinc1	equ	0xFE6
  7440                           fsr1h	equ	0xFE2
  7441                           fsr1l	equ	0xFE1
  7442                           indf2	equ	0xFDF
  7443                           postinc2	equ	0xFDE
  7444                           postdec2	equ	0xFDD
  7445                           plusw2	equ	0xFDB
  7446                           fsr2h	equ	0xFDA
  7447                           fsr2l	equ	0xFD9
  7448                           status	equ	0xFD8
  7449                           
  7450 ;; *************** function ___lwdiv *****************
  7451 ;; Defined at:
  7452 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  7453 ;; Parameters:    Size  Location     Type
  7454 ;;  dividend        2   18[COMRAM] unsigned int 
  7455 ;;  divisor         2   20[COMRAM] unsigned int 
  7456 ;; Auto vars:     Size  Location     Type
  7457 ;;  quotient        2   23[COMRAM] unsigned int 
  7458 ;;  counter         1   22[COMRAM] unsigned char 
  7459 ;; Return value:  Size  Location     Type
  7460 ;;                  2   18[COMRAM] unsigned int 
  7461 ;; Registers used:
  7462 ;;		wreg, status,2, status,0
  7463 ;; Tracked objects:
  7464 ;;		On entry : 0/0
  7465 ;;		On exit  : 0/0
  7466 ;;		Unchanged: 0/0
  7467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7468 ;;      Params:         4       0       0       0       0       0       0
  7469 ;;      Locals:         3       0       0       0       0       0       0
  7470 ;;      Temps:          0       0       0       0       0       0       0
  7471 ;;      Totals:         7       0       0       0       0       0       0
  7472 ;;Total ram usage:        7 bytes
  7473 ;; Hardware stack levels used:    1
  7474 ;; Hardware stack levels required when called:    1
  7475 ;; This function calls:
  7476 ;;		Nothing
  7477 ;; This function is called by:
  7478 ;;		_utoa
  7479 ;; This function uses a non-reentrant model
  7480 ;;
  7481                           
  7482                           	psect	text52
  7483  001C30                     __ptext52:
  7484                           	opt stack 0
  7485  001C30                     ___lwdiv:
  7486                           	opt stack 21
  7487                           
  7488                           ;incstack = 0
  7489  001C30  0E00               	movlw	0
  7490  001C32  6E19               	movwf	___lwdiv@quotient+1,c
  7491  001C34  0E00               	movlw	0
  7492  001C36  6E18               	movwf	___lwdiv@quotient,c
  7493  001C38  5015               	movf	___lwdiv@divisor,w,c
  7494  001C3A  1016               	iorwf	___lwdiv@divisor+1,w,c
  7495  001C3C  B4D8               	btfsc	status,2,c
  7496  001C3E  D01C               	goto	l1074
  7497  001C40  0E01               	movlw	1
  7498  001C42  6E17               	movwf	___lwdiv@counter,c
  7499  001C44  D004               	goto	l1069
  7500  001C46  90D8               	bcf	status,0,c
  7501  001C48  3615               	rlcf	___lwdiv@divisor,f,c
  7502  001C4A  3616               	rlcf	___lwdiv@divisor+1,f,c
  7503  001C4C  2A17               	incf	___lwdiv@counter,f,c
  7504  001C4E                     l1069:
  7505  001C4E  AE16               	btfss	___lwdiv@divisor+1,7,c
  7506  001C50  D7FA               	goto	l1070
  7507  001C52                     u2400:
  7508  001C52  90D8               	bcf	status,0,c
  7509  001C54  3618               	rlcf	___lwdiv@quotient,f,c
  7510  001C56  3619               	rlcf	___lwdiv@quotient+1,f,c
  7511  001C58  5015               	movf	___lwdiv@divisor,w,c
  7512  001C5A  5C13               	subwf	___lwdiv@dividend,w,c
  7513  001C5C  5016               	movf	___lwdiv@divisor+1,w,c
  7514  001C5E  5814               	subwfb	___lwdiv@dividend+1,w,c
  7515  001C60  A0D8               	btfss	status,0,c
  7516  001C62  D005               	goto	l1073
  7517  001C64  5015               	movf	___lwdiv@divisor,w,c
  7518  001C66  5E13               	subwf	___lwdiv@dividend,f,c
  7519  001C68  5016               	movf	___lwdiv@divisor+1,w,c
  7520  001C6A  5A14               	subwfb	___lwdiv@dividend+1,f,c
  7521  001C6C  8018               	bsf	___lwdiv@quotient,0,c
  7522  001C6E                     l1073:
  7523  001C6E  90D8               	bcf	status,0,c
  7524  001C70  3216               	rrcf	___lwdiv@divisor+1,f,c
  7525  001C72  3215               	rrcf	___lwdiv@divisor,f,c
  7526  001C74  2E17               	decfsz	___lwdiv@counter,f,c
  7527  001C76  D7ED               	goto	u2400
  7528  001C78                     l1074:
  7529  001C78  C018  F013         	movff	___lwdiv@quotient,?___lwdiv
  7530  001C7C  C019  F014         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7531  001C80  0012               	return		;funcret
  7532  001C82                     __end_of___lwdiv:
  7533                           	opt stack 0
  7534                           tblptru	equ	0xFF8
  7535                           tblptrh	equ	0xFF7
  7536                           tblptrl	equ	0xFF6
  7537                           tablat	equ	0xFF5
  7538                           prodh	equ	0xFF4
  7539                           prodl	equ	0xFF3
  7540                           intcon	equ	0xFF2
  7541                           intcon2	equ	0xFF1
  7542                           intcon3	equ	0xFF0
  7543                           postinc0	equ	0xFEE
  7544                           plusw0	equ	0xFEB
  7545                           wreg	equ	0xFE8
  7546                           postinc1	equ	0xFE6
  7547                           fsr1h	equ	0xFE2
  7548                           fsr1l	equ	0xFE1
  7549                           indf2	equ	0xFDF
  7550                           postinc2	equ	0xFDE
  7551                           postdec2	equ	0xFDD
  7552                           plusw2	equ	0xFDB
  7553                           fsr2h	equ	0xFDA
  7554                           fsr2l	equ	0xFD9
  7555                           status	equ	0xFD8
  7556                           
  7557 ;; *************** function _command_builder_add_string *****************
  7558 ;; Defined at:
  7559 ;;		line 546 in file "SlaveComm.c"
  7560 ;; Parameters:    Size  Location     Type
  7561 ;;  send_buffer     2   22[COMRAM] PTR struct buffer
  7562 ;;		 -> communications@send_buffer(42), 
  7563 ;;  data_string     2   24[COMRAM] PTR unsigned char 
  7564 ;;		 -> STR_29(4), STR_28(10), STR_27(4), STR_26(12), 
  7565 ;;		 -> STR_25(5), STR_24(4), STR_23(5), STR_22(4), 
  7566 ;;		 -> STR_21(4), STR_20(6), STR_19(4), STR_18(7), 
  7567 ;;		 -> STR_17(4), com_command_setEnergyUsed@temp(12), STR_16(6), STR_15(4), 
  7568 ;;		 -> com_command_setPower@temp(12), STR_14(5), STR_13(5), STR_12(4), 
  7569 ;;		 -> xsum_builder@xsumBuf(16), 
  7570 ;; Auto vars:     Size  Location     Type
  7571 ;;  inx             2   30[COMRAM] int 
  7572 ;;  xsumAdd         2   28[COMRAM] int 
  7573 ;; Return value:  Size  Location     Type
  7574 ;;                  2   22[COMRAM] int 
  7575 ;; Registers used:
  7576 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7577 ;; Tracked objects:
  7578 ;;		On entry : 0/0
  7579 ;;		On exit  : 0/0
  7580 ;;		Unchanged: 0/0
  7581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7582 ;;      Params:         4       0       0       0       0       0       0
  7583 ;;      Locals:         4       0       0       0       0       0       0
  7584 ;;      Temps:          2       0       0       0       0       0       0
  7585 ;;      Totals:        10       0       0       0       0       0       0
  7586 ;;Total ram usage:       10 bytes
  7587 ;; Hardware stack levels used:    1
  7588 ;; Hardware stack levels required when called:    2
  7589 ;; This function calls:
  7590 ;;		_command_builder_add_char
  7591 ;; This function is called by:
  7592 ;;		_command_builder1
  7593 ;;		_command_builder3
  7594 ;;		_xsum_builder
  7595 ;;		_command_builder2
  7596 ;;		_command_builder4
  7597 ;; This function uses a non-reentrant model
  7598 ;;
  7599                           
  7600                           	psect	text53
  7601  00166C                     __ptext53:
  7602                           	opt stack 0
  7603  00166C                     _command_builder_add_string:
  7604                           	opt stack 22
  7605                           
  7606                           ;SlaveComm.c: 548: int xsumAdd = 0;
  7607                           
  7608                           ;incstack = 0
  7609  00166C  0E00               	movlw	0
  7610  00166E  6E1E               	movwf	command_builder_add_string@xsumAdd+1,c
  7611  001670  0E00               	movlw	0
  7612  001672  6E1D               	movwf	command_builder_add_string@xsumAdd,c
  7613                           
  7614                           ;SlaveComm.c: 550: for( int inx = 0; data_string[inx] != '\0'; inx++ )
  7615  001674  0E00               	movlw	0
  7616  001676  6E20               	movwf	command_builder_add_string@inx+1,c
  7617  001678  0E00               	movlw	0
  7618  00167A  6E1F               	movwf	command_builder_add_string@inx,c
  7619  00167C  D023               	goto	l318
  7620  00167E                     
  7621                           ;SlaveComm.c: 551: {
  7622                           ;SlaveComm.c: 552: xsumAdd += command_builder_add_char( send_buffer, data_string[inx] );
  7623  00167E  C017  F013         	movff	command_builder_add_string@send_buffer,command_builder_add_char@send_buffer
  7624  001682  C018  F014         	movff	command_builder_add_string@send_buffer+1,command_builder_add_char@send_buffer+1
  7625  001686  501F               	movf	command_builder_add_string@inx,w,c
  7626  001688  2419               	addwf	command_builder_add_string@data_string,w,c
  7627  00168A  6E1B               	movwf	??_command_builder_add_string& (0+255),c
  7628  00168C  5020               	movf	command_builder_add_string@inx+1,w,c
  7629  00168E  201A               	addwfc	command_builder_add_string@data_string+1,w,c
  7630  001690  6E1C               	movwf	(??_command_builder_add_string+1)& (0+255),c
  7631  001692  C01B  FFF6         	movff	??_command_builder_add_string,tblptrl
  7632  001696  C01C  FFF7         	movff	??_command_builder_add_string+1,tblptrh
  7633  00169A  6AF8               	clrf	tblptru,c
  7634  00169C  0E05               	movlw	(high __ramtop+-1)
  7635  00169E  64F7               	cpfsgt	tblptrh,c
  7636  0016A0  D003               	bra	u2497
  7637  0016A2  0008               	tblrd		*
  7638  0016A4  50F5               	movf	tablat,w,c
  7639  0016A6  D005               	bra	u2490
  7640  0016A8                     u2497:
  7641  0016A8  CFF6 FFE9          	movff	tblptrl,fsr0l
  7642  0016AC  CFF7 FFEA          	movff	tblptrh,fsr0h
  7643  0016B0  50EF               	movf	indf0,w,c
  7644  0016B2                     u2490:
  7645  0016B2  6E15               	movwf	command_builder_add_char@data,c
  7646  0016B4  EC92  F00D         	call	_command_builder_add_char	;wreg free
  7647  0016B8  5013               	movf	?_command_builder_add_char,w,c
  7648  0016BA  261D               	addwf	command_builder_add_string@xsumAdd,f,c
  7649  0016BC  5014               	movf	?_command_builder_add_char+1,w,c
  7650  0016BE  221E               	addwfc	command_builder_add_string@xsumAdd+1,f,c
  7651  0016C0  4A1F               	infsnz	command_builder_add_string@inx,f,c
  7652  0016C2  2A20               	incf	command_builder_add_string@inx+1,f,c
  7653  0016C4                     l318:
  7654  0016C4  501F               	movf	command_builder_add_string@inx,w,c
  7655  0016C6  2419               	addwf	command_builder_add_string@data_string,w,c
  7656  0016C8  6E1B               	movwf	??_command_builder_add_string& (0+255),c
  7657  0016CA  5020               	movf	command_builder_add_string@inx+1,w,c
  7658  0016CC  201A               	addwfc	command_builder_add_string@data_string+1,w,c
  7659  0016CE  6E1C               	movwf	(??_command_builder_add_string+1)& (0+255),c
  7660  0016D0  C01B  FFF6         	movff	??_command_builder_add_string,tblptrl
  7661  0016D4  C01C  FFF7         	movff	??_command_builder_add_string+1,tblptrh
  7662  0016D8  6AF8               	clrf	tblptru,c
  7663  0016DA  0E05               	movlw	(high __ramtop+-1)
  7664  0016DC  64F7               	cpfsgt	tblptrh,c
  7665  0016DE  D003               	bra	u2507
  7666  0016E0  0008               	tblrd		*
  7667  0016E2  50F5               	movf	tablat,w,c
  7668  0016E4  D005               	bra	u2500
  7669  0016E6                     u2507:
  7670  0016E6  CFF6 FFE9          	movff	tblptrl,fsr0l
  7671  0016EA  CFF7 FFEA          	movff	tblptrh,fsr0h
  7672  0016EE  50EF               	movf	indf0,w,c
  7673  0016F0                     u2500:
  7674  0016F0  0900               	iorlw	0
  7675  0016F2  A4D8               	btfss	status,2,c
  7676  0016F4  D7C4               	goto	l319
  7677                           
  7678                           ;SlaveComm.c: 553: }
  7679                           ;SlaveComm.c: 555: return xsumAdd;
  7680  0016F6  C01D  F017         	movff	command_builder_add_string@xsumAdd,?_command_builder_add_string
  7681  0016FA  C01E  F018         	movff	command_builder_add_string@xsumAdd+1,?_command_builder_add_string+1
  7682  0016FE  0012               	return		;funcret
  7683  001700                     __end_of_command_builder_add_string:
  7684                           	opt stack 0
  7685                           tblptru	equ	0xFF8
  7686                           tblptrh	equ	0xFF7
  7687                           tblptrl	equ	0xFF6
  7688                           tablat	equ	0xFF5
  7689                           prodh	equ	0xFF4
  7690                           prodl	equ	0xFF3
  7691                           intcon	equ	0xFF2
  7692                           intcon2	equ	0xFF1
  7693                           intcon3	equ	0xFF0
  7694                           indf0	equ	0xFEF
  7695                           postinc0	equ	0xFEE
  7696                           plusw0	equ	0xFEB
  7697                           fsr0h	equ	0xFEA
  7698                           fsr0l	equ	0xFE9
  7699                           wreg	equ	0xFE8
  7700                           postinc1	equ	0xFE6
  7701                           fsr1h	equ	0xFE2
  7702                           fsr1l	equ	0xFE1
  7703                           indf2	equ	0xFDF
  7704                           postinc2	equ	0xFDE
  7705                           postdec2	equ	0xFDD
  7706                           plusw2	equ	0xFDB
  7707                           fsr2h	equ	0xFDA
  7708                           fsr2l	equ	0xFD9
  7709                           status	equ	0xFD8
  7710                           
  7711 ;; *************** function _command_builder_add_char *****************
  7712 ;; Defined at:
  7713 ;;		line 533 in file "SlaveComm.c"
  7714 ;; Parameters:    Size  Location     Type
  7715 ;;  send_buffer     2   18[COMRAM] PTR struct buffer
  7716 ;;		 -> communications@send_buffer(42), 
  7717 ;;  data            1   20[COMRAM] unsigned char 
  7718 ;; Auto vars:     Size  Location     Type
  7719 ;;		None
  7720 ;; Return value:  Size  Location     Type
  7721 ;;                  2   18[COMRAM] int 
  7722 ;; Registers used:
  7723 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7724 ;; Tracked objects:
  7725 ;;		On entry : 0/0
  7726 ;;		On exit  : 0/0
  7727 ;;		Unchanged: 0/0
  7728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7729 ;;      Params:         3       0       0       0       0       0       0
  7730 ;;      Locals:         0       0       0       0       0       0       0
  7731 ;;      Temps:          1       0       0       0       0       0       0
  7732 ;;      Totals:         4       0       0       0       0       0       0
  7733 ;;Total ram usage:        4 bytes
  7734 ;; Hardware stack levels used:    1
  7735 ;; Hardware stack levels required when called:    1
  7736 ;; This function calls:
  7737 ;;		Nothing
  7738 ;; This function is called by:
  7739 ;;		_command_builder1
  7740 ;;		_command_builder3
  7741 ;;		_xsum_builder
  7742 ;;		_command_builder_add_string
  7743 ;;		_command_builder2
  7744 ;;		_command_builder4
  7745 ;; This function uses a non-reentrant model
  7746 ;;
  7747                           
  7748                           	psect	text54
  7749  001B24                     __ptext54:
  7750                           	opt stack 0
  7751  001B24                     _command_builder_add_char:
  7752                           	opt stack 22
  7753                           
  7754                           ;SlaveComm.c: 535: send_buffer->data_buffer[send_buffer->write_position] = data;
  7755                           
  7756                           ;incstack = 0
  7757  001B24  EE20 F028          	lfsr	2,40
  7758  001B28  5013               	movf	command_builder_add_char@send_buffer,w,c
  7759  001B2A  26D9               	addwf	fsr2l,f,c
  7760  001B2C  5014               	movf	command_builder_add_char@send_buffer+1,w,c
  7761  001B2E  22DA               	addwfc	fsr2h,f,c
  7762  001B30  50DF               	movf	indf2,w,c
  7763  001B32  6E16               	movwf	??_command_builder_add_char& (0+255),c
  7764  001B34  5016               	movf	??_command_builder_add_char,w,c
  7765  001B36  0D01               	mullw	1
  7766  001B38  50F3               	movf	prodl,w,c
  7767  001B3A  2413               	addwf	command_builder_add_char@send_buffer,w,c
  7768  001B3C  6ED9               	movwf	fsr2l,c
  7769  001B3E  50F4               	movf	prodh,w,c
  7770  001B40  2014               	addwfc	command_builder_add_char@send_buffer+1,w,c
  7771  001B42  6EDA               	movwf	fsr2h,c
  7772  001B44  C015  FFDF         	movff	command_builder_add_char@data,indf2
  7773                           
  7774                           ;SlaveComm.c: 537: send_buffer->write_position++;
  7775  001B48  EE20 F028          	lfsr	2,40
  7776  001B4C  5013               	movf	command_builder_add_char@send_buffer,w,c
  7777  001B4E  26D9               	addwf	fsr2l,f,c
  7778  001B50  5014               	movf	command_builder_add_char@send_buffer+1,w,c
  7779  001B52  22DA               	addwfc	fsr2h,f,c
  7780  001B54  2ADF               	incf	indf2,f,c
  7781                           
  7782                           ;SlaveComm.c: 538: if( send_buffer->write_position >= 40 )
  7783  001B56  EE20 F028          	lfsr	2,40
  7784  001B5A  5013               	movf	command_builder_add_char@send_buffer,w,c
  7785  001B5C  26D9               	addwf	fsr2l,f,c
  7786  001B5E  5014               	movf	command_builder_add_char@send_buffer+1,w,c
  7787  001B60  22DA               	addwfc	fsr2h,f,c
  7788  001B62  0E27               	movlw	39
  7789  001B64  64DF               	cpfsgt	indf2,c
  7790  001B66  D008               	goto	l314
  7791                           
  7792                           ;SlaveComm.c: 539: {
  7793                           ;SlaveComm.c: 540: send_buffer->write_position = 0;
  7794  001B68  EE20 F028          	lfsr	2,40
  7795  001B6C  5013               	movf	command_builder_add_char@send_buffer,w,c
  7796  001B6E  26D9               	addwf	fsr2l,f,c
  7797  001B70  5014               	movf	command_builder_add_char@send_buffer+1,w,c
  7798  001B72  22DA               	addwfc	fsr2h,f,c
  7799  001B74  0E00               	movlw	0
  7800  001B76  6EDF               	movwf	indf2,c
  7801  001B78                     l314:
  7802                           
  7803                           ;SlaveComm.c: 541: }
  7804                           ;SlaveComm.c: 543: return data;
  7805  001B78  C015  F013         	movff	command_builder_add_char@data,?_command_builder_add_char
  7806  001B7C  6A14               	clrf	?_command_builder_add_char+1,c
  7807  001B7E  0012               	return	
  7808  001B80                     __end_of_command_builder_add_char:
  7809                           	opt stack 0
  7810                           tblptru	equ	0xFF8
  7811                           tblptrh	equ	0xFF7
  7812                           tblptrl	equ	0xFF6
  7813                           tablat	equ	0xFF5
  7814                           prodh	equ	0xFF4
  7815                           prodl	equ	0xFF3
  7816                           intcon	equ	0xFF2
  7817                           intcon2	equ	0xFF1
  7818                           intcon3	equ	0xFF0
  7819                           indf0	equ	0xFEF
  7820                           postinc0	equ	0xFEE
  7821                           plusw0	equ	0xFEB
  7822                           fsr0h	equ	0xFEA
  7823                           fsr0l	equ	0xFE9
  7824                           wreg	equ	0xFE8
  7825                           postinc1	equ	0xFE6
  7826                           fsr1h	equ	0xFE2
  7827                           fsr1l	equ	0xFE1
  7828                           indf2	equ	0xFDF
  7829                           postinc2	equ	0xFDE
  7830                           postdec2	equ	0xFDD
  7831                           plusw2	equ	0xFDB
  7832                           fsr2h	equ	0xFDA
  7833                           fsr2l	equ	0xFD9
  7834                           status	equ	0xFD8
  7835                           
  7836 ;; *************** function _atol *****************
  7837 ;; Defined at:
  7838 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atol.c"
  7839 ;; Parameters:    Size  Location     Type
  7840 ;;  s               2   30[COMRAM] PTR const unsigned char 
  7841 ;;		 -> process_data@parameters(50), 
  7842 ;; Auto vars:     Size  Location     Type
  7843 ;;  a               4   39[COMRAM] long 
  7844 ;;  c               1   43[COMRAM] unsigned char 
  7845 ;;  sign            1   38[COMRAM] unsigned char 
  7846 ;; Return value:  Size  Location     Type
  7847 ;;                  4   30[COMRAM] long 
  7848 ;; Registers used:
  7849 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7850 ;; Tracked objects:
  7851 ;;		On entry : 0/0
  7852 ;;		On exit  : 0/0
  7853 ;;		Unchanged: 0/0
  7854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7855 ;;      Params:         4       0       0       0       0       0       0
  7856 ;;      Locals:         6       0       0       0       0       0       0
  7857 ;;      Temps:          4       0       0       0       0       0       0
  7858 ;;      Totals:        14       0       0       0       0       0       0
  7859 ;;Total ram usage:       14 bytes
  7860 ;; Hardware stack levels used:    1
  7861 ;; Hardware stack levels required when called:    2
  7862 ;; This function calls:
  7863 ;;		___lmul
  7864 ;;		_isdigit
  7865 ;; This function is called by:
  7866 ;;		_process_data_parameters
  7867 ;; This function uses a non-reentrant model
  7868 ;;
  7869                           
  7870                           	psect	text55
  7871  000D42                     __ptext55:
  7872                           	opt stack 0
  7873  000D42                     _atol:
  7874                           	opt stack 24
  7875                           
  7876                           ;incstack = 0
  7877  000D42  C01F  FFD9         	movff	atol@s,fsr2l
  7878  000D46  C020  FFDA         	movff	atol@s+1,fsr2h
  7879  000D4A  50DF               	movf	indf2,w,c
  7880  000D4C  6E2C               	movwf	atol@c,c
  7881  000D4E  4A1F               	infsnz	atol@s,f,c
  7882  000D50  2A20               	incf	atol@s+1,f,c
  7883  000D52  0E20               	movlw	32
  7884  000D54  182C               	xorwf	atol@c,w,c
  7885  000D56  B4D8               	btfsc	status,2,c
  7886  000D58  D7F4               	goto	_atol
  7887  000D5A  0E09               	movlw	9
  7888  000D5C  182C               	xorwf	atol@c,w,c
  7889  000D5E  B4D8               	btfsc	status,2,c
  7890  000D60  D7F0               	goto	_atol
  7891  000D62  0E00               	movlw	0
  7892  000D64  6E28               	movwf	atol@a,c
  7893  000D66  0E00               	movlw	0
  7894  000D68  6E29               	movwf	atol@a+1,c
  7895  000D6A  0E00               	movlw	0
  7896  000D6C  6E2A               	movwf	atol@a+2,c
  7897  000D6E  0E00               	movlw	0
  7898  000D70  6E2B               	movwf	atol@a+3,c
  7899  000D72  0E00               	movlw	0
  7900  000D74  6E27               	movwf	atol@sign,c
  7901  000D76  0E2D               	movlw	45
  7902  000D78  182C               	xorwf	atol@c,w,c
  7903  000D7A  A4D8               	btfss	status,2,c
  7904  000D7C  D002               	goto	l784
  7905  000D7E  2A27               	incf	atol@sign,f,c
  7906  000D80  D027               	goto	L7
  7907  000D82                     l784:
  7908  000D82  0E2B               	movlw	43
  7909  000D84  182C               	xorwf	atol@c,w,c
  7910  000D86  A4D8               	btfss	status,2,c
  7911  000D88  D02B               	goto	l787
  7912  000D8A  D022               	goto	L7
  7913  000D8C  C028  F013         	movff	atol@a,___lmul@multiplier
  7914  000D90  C029  F014         	movff	atol@a+1,___lmul@multiplier+1
  7915  000D94  C02A  F015         	movff	atol@a+2,___lmul@multiplier+2
  7916  000D98  C02B  F016         	movff	atol@a+3,___lmul@multiplier+3
  7917  000D9C  0E0A               	movlw	10
  7918  000D9E  6E17               	movwf	___lmul@multiplicand,c
  7919  000DA0  0E00               	movlw	0
  7920  000DA2  6E18               	movwf	___lmul@multiplicand+1,c
  7921  000DA4  0E00               	movlw	0
  7922  000DA6  6E19               	movwf	___lmul@multiplicand+2,c
  7923  000DA8  0E00               	movlw	0
  7924  000DAA  6E1A               	movwf	___lmul@multiplicand+3,c
  7925  000DAC  ECED  F00D         	call	___lmul	;wreg free
  7926  000DB0  C02C  F023         	movff	atol@c,??_atol
  7927  000DB4  0ED0               	movlw	208
  7928  000DB6  2623               	addwf	??_atol,f,c
  7929  000DB8  5023               	movf	??_atol,w,c
  7930  000DBA  2413               	addwf	?___lmul,w,c
  7931  000DBC  6E28               	movwf	atol@a,c
  7932  000DBE  0E00               	movlw	0
  7933  000DC0  2014               	addwfc	?___lmul+1,w,c
  7934  000DC2  6E29               	movwf	atol@a+1,c
  7935  000DC4  0E00               	movlw	0
  7936  000DC6  2015               	addwfc	?___lmul+2,w,c
  7937  000DC8  6E2A               	movwf	atol@a+2,c
  7938  000DCA  0E00               	movlw	0
  7939  000DCC  2016               	addwfc	?___lmul+3,w,c
  7940  000DCE  6E2B               	movwf	atol@a+3,c
  7941  000DD0                     L7:
  7942  000DD0  C01F  FFD9         	movff	atol@s,fsr2l
  7943  000DD4  C020  FFDA         	movff	atol@s+1,fsr2h
  7944  000DD8  50DF               	movf	indf2,w,c
  7945  000DDA  6E2C               	movwf	atol@c,c
  7946  000DDC  4A1F               	infsnz	atol@s,f,c
  7947  000DDE  2A20               	incf	atol@s+1,f,c
  7948  000DE0                     l787:
  7949  000DE0  502C               	movf	atol@c,w,c
  7950  000DE2  EC6F  F010         	call	_isdigit
  7951  000DE6  B0D8               	btfsc	status,0,c
  7952  000DE8  D7D1               	goto	l788
  7953  000DEA  5027               	movf	atol@sign,w,c
  7954  000DEC  B4D8               	btfsc	status,2,c
  7955  000DEE  D01A               	goto	l790
  7956  000DF0  C028  F023         	movff	atol@a,??_atol
  7957  000DF4  C029  F024         	movff	atol@a+1,??_atol+1
  7958  000DF8  C02A  F025         	movff	atol@a+2,??_atol+2
  7959  000DFC  C02B  F026         	movff	atol@a+3,??_atol+3
  7960  000E00  1E23               	comf	??_atol,f,c
  7961  000E02  1E24               	comf	??_atol+1,f,c
  7962  000E04  1E25               	comf	??_atol+2,f,c
  7963  000E06  1E26               	comf	??_atol+3,f,c
  7964  000E08  2A23               	incf	??_atol,f,c
  7965  000E0A  0E00               	movlw	0
  7966  000E0C  2224               	addwfc	??_atol+1,f,c
  7967  000E0E  2225               	addwfc	??_atol+2,f,c
  7968  000E10  2226               	addwfc	??_atol+3,f,c
  7969  000E12  C023  F01F         	movff	??_atol,?_atol
  7970  000E16  C024  F020         	movff	??_atol+1,?_atol+1
  7971  000E1A  C025  F021         	movff	??_atol+2,?_atol+2
  7972  000E1E  C026  F022         	movff	??_atol+3,?_atol+3
  7973  000E22  0012               	return	
  7974  000E24                     l790:
  7975  000E24  C028  F01F         	movff	atol@a,?_atol
  7976  000E28  C029  F020         	movff	atol@a+1,?_atol+1
  7977  000E2C  C02A  F021         	movff	atol@a+2,?_atol+2
  7978  000E30  C02B  F022         	movff	atol@a+3,?_atol+3
  7979  000E34  0012               	return		;funcret
  7980  000E36                     __end_of_atol:
  7981                           	opt stack 0
  7982                           tblptru	equ	0xFF8
  7983                           tblptrh	equ	0xFF7
  7984                           tblptrl	equ	0xFF6
  7985                           tablat	equ	0xFF5
  7986                           prodh	equ	0xFF4
  7987                           prodl	equ	0xFF3
  7988                           intcon	equ	0xFF2
  7989                           intcon2	equ	0xFF1
  7990                           intcon3	equ	0xFF0
  7991                           indf0	equ	0xFEF
  7992                           postinc0	equ	0xFEE
  7993                           plusw0	equ	0xFEB
  7994                           fsr0h	equ	0xFEA
  7995                           fsr0l	equ	0xFE9
  7996                           wreg	equ	0xFE8
  7997                           postinc1	equ	0xFE6
  7998                           fsr1h	equ	0xFE2
  7999                           fsr1l	equ	0xFE1
  8000                           indf2	equ	0xFDF
  8001                           postinc2	equ	0xFDE
  8002                           postdec2	equ	0xFDD
  8003                           plusw2	equ	0xFDB
  8004                           fsr2h	equ	0xFDA
  8005                           fsr2l	equ	0xFD9
  8006                           status	equ	0xFD8
  8007                           
  8008 ;; *************** function _isdigit *****************
  8009 ;; Defined at:
  8010 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  8011 ;; Parameters:    Size  Location     Type
  8012 ;;  c               1    wreg     unsigned char 
  8013 ;; Auto vars:     Size  Location     Type
  8014 ;;  c               1   20[COMRAM] unsigned char 
  8015 ;; Return value:  Size  Location     Type
  8016 ;;		None               void
  8017 ;; Registers used:
  8018 ;;		wreg, status,2, status,0
  8019 ;; Tracked objects:
  8020 ;;		On entry : 0/0
  8021 ;;		On exit  : 0/0
  8022 ;;		Unchanged: 0/0
  8023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8024 ;;      Params:         0       0       0       0       0       0       0
  8025 ;;      Locals:         2       0       0       0       0       0       0
  8026 ;;      Temps:          1       0       0       0       0       0       0
  8027 ;;      Totals:         3       0       0       0       0       0       0
  8028 ;;Total ram usage:        3 bytes
  8029 ;; Hardware stack levels used:    1
  8030 ;; Hardware stack levels required when called:    1
  8031 ;; This function calls:
  8032 ;;		Nothing
  8033 ;; This function is called by:
  8034 ;;		_atoi
  8035 ;;		_atol
  8036 ;; This function uses a non-reentrant model
  8037 ;;
  8038                           
  8039                           	psect	text56
  8040  0020DE                     __ptext56:
  8041                           	opt stack 0
  8042  0020DE                     _isdigit:
  8043                           	opt stack 25
  8044                           
  8045                           ;incstack = 0
  8046                           ;isdigit@c stored from wreg
  8047  0020DE  6E15               	movwf	isdigit@c,c
  8048  0020E0  0E00               	movlw	0
  8049  0020E2  6E14               	movwf	_isdigit$2441,c
  8050  0020E4  0E3A               	movlw	58
  8051  0020E6  6015               	cpfslt	isdigit@c,c
  8052  0020E8  D005               	goto	l962
  8053  0020EA  0E2F               	movlw	47
  8054  0020EC  6415               	cpfsgt	isdigit@c,c
  8055  0020EE  D002               	goto	l962
  8056  0020F0  0E01               	movlw	1
  8057  0020F2  6E14               	movwf	_isdigit$2441,c
  8058  0020F4                     l962:
  8059  0020F4  C014  F013         	movff	_isdigit$2441,??_isdigit
  8060  0020F8  3013               	rrcf	??_isdigit,w,c
  8061  0020FA  0012               	return	
  8062  0020FC                     __end_of_isdigit:
  8063                           	opt stack 0
  8064                           tblptru	equ	0xFF8
  8065                           tblptrh	equ	0xFF7
  8066                           tblptrl	equ	0xFF6
  8067                           tablat	equ	0xFF5
  8068                           prodh	equ	0xFF4
  8069                           prodl	equ	0xFF3
  8070                           intcon	equ	0xFF2
  8071                           intcon2	equ	0xFF1
  8072                           intcon3	equ	0xFF0
  8073                           indf0	equ	0xFEF
  8074                           postinc0	equ	0xFEE
  8075                           plusw0	equ	0xFEB
  8076                           fsr0h	equ	0xFEA
  8077                           fsr0l	equ	0xFE9
  8078                           wreg	equ	0xFE8
  8079                           postinc1	equ	0xFE6
  8080                           fsr1h	equ	0xFE2
  8081                           fsr1l	equ	0xFE1
  8082                           indf2	equ	0xFDF
  8083                           postinc2	equ	0xFDE
  8084                           postdec2	equ	0xFDD
  8085                           plusw2	equ	0xFDB
  8086                           fsr2h	equ	0xFDA
  8087                           fsr2l	equ	0xFD9
  8088                           status	equ	0xFD8
  8089                           
  8090 ;; *************** function ___lmul *****************
  8091 ;; Defined at:
  8092 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
  8093 ;; Parameters:    Size  Location     Type
  8094 ;;  multiplier      4   18[COMRAM] unsigned long 
  8095 ;;  multiplicand    4   22[COMRAM] unsigned long 
  8096 ;; Auto vars:     Size  Location     Type
  8097 ;;  product         4   26[COMRAM] unsigned long 
  8098 ;; Return value:  Size  Location     Type
  8099 ;;                  4   18[COMRAM] unsigned long 
  8100 ;; Registers used:
  8101 ;;		wreg, status,2, status,0
  8102 ;; Tracked objects:
  8103 ;;		On entry : 0/0
  8104 ;;		On exit  : 0/0
  8105 ;;		Unchanged: 0/0
  8106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8107 ;;      Params:         8       0       0       0       0       0       0
  8108 ;;      Locals:         4       0       0       0       0       0       0
  8109 ;;      Temps:          0       0       0       0       0       0       0
  8110 ;;      Totals:        12       0       0       0       0       0       0
  8111 ;;Total ram usage:       12 bytes
  8112 ;; Hardware stack levels used:    1
  8113 ;; Hardware stack levels required when called:    1
  8114 ;; This function calls:
  8115 ;;		Nothing
  8116 ;; This function is called by:
  8117 ;;		_atol
  8118 ;; This function uses a non-reentrant model
  8119 ;;
  8120                           
  8121                           	psect	text57
  8122  001BDA                     __ptext57:
  8123                           	opt stack 0
  8124  001BDA                     ___lmul:
  8125                           	opt stack 24
  8126                           
  8127                           ;incstack = 0
  8128  001BDA  0E00               	movlw	0
  8129  001BDC  6E1B               	movwf	___lmul@product,c
  8130  001BDE  0E00               	movlw	0
  8131  001BE0  6E1C               	movwf	___lmul@product+1,c
  8132  001BE2  0E00               	movlw	0
  8133  001BE4  6E1D               	movwf	___lmul@product+2,c
  8134  001BE6  0E00               	movlw	0
  8135  001BE8  6E1E               	movwf	___lmul@product+3,c
  8136  001BEA  A013               	btfss	___lmul@multiplier,0,c
  8137  001BEC  D008               	goto	l616
  8138  001BEE  5017               	movf	___lmul@multiplicand,w,c
  8139  001BF0  261B               	addwf	___lmul@product,f,c
  8140  001BF2  5018               	movf	___lmul@multiplicand+1,w,c
  8141  001BF4  221C               	addwfc	___lmul@product+1,f,c
  8142  001BF6  5019               	movf	___lmul@multiplicand+2,w,c
  8143  001BF8  221D               	addwfc	___lmul@product+2,f,c
  8144  001BFA  501A               	movf	___lmul@multiplicand+3,w,c
  8145  001BFC  221E               	addwfc	___lmul@product+3,f,c
  8146  001BFE                     l616:
  8147  001BFE  90D8               	bcf	status,0,c
  8148  001C00  3617               	rlcf	___lmul@multiplicand,f,c
  8149  001C02  3618               	rlcf	___lmul@multiplicand+1,f,c
  8150  001C04  3619               	rlcf	___lmul@multiplicand+2,f,c
  8151  001C06  361A               	rlcf	___lmul@multiplicand+3,f,c
  8152  001C08  90D8               	bcf	status,0,c
  8153  001C0A  3216               	rrcf	___lmul@multiplier+3,f,c
  8154  001C0C  3215               	rrcf	___lmul@multiplier+2,f,c
  8155  001C0E  3214               	rrcf	___lmul@multiplier+1,f,c
  8156  001C10  3213               	rrcf	___lmul@multiplier,f,c
  8157  001C12  5013               	movf	___lmul@multiplier,w,c
  8158  001C14  1014               	iorwf	___lmul@multiplier+1,w,c
  8159  001C16  1015               	iorwf	___lmul@multiplier+2,w,c
  8160  001C18  1016               	iorwf	___lmul@multiplier+3,w,c
  8161  001C1A  A4D8               	btfss	status,2,c
  8162  001C1C  D7E6               	goto	l615
  8163  001C1E  C01B  F013         	movff	___lmul@product,?___lmul
  8164  001C22  C01C  F014         	movff	___lmul@product+1,?___lmul+1
  8165  001C26  C01D  F015         	movff	___lmul@product+2,?___lmul+2
  8166  001C2A  C01E  F016         	movff	___lmul@product+3,?___lmul+3
  8167  001C2E  0012               	return		;funcret
  8168  001C30                     __end_of___lmul:
  8169                           	opt stack 0
  8170                           tblptru	equ	0xFF8
  8171                           tblptrh	equ	0xFF7
  8172                           tblptrl	equ	0xFF6
  8173                           tablat	equ	0xFF5
  8174                           prodh	equ	0xFF4
  8175                           prodl	equ	0xFF3
  8176                           intcon	equ	0xFF2
  8177                           intcon2	equ	0xFF1
  8178                           intcon3	equ	0xFF0
  8179                           indf0	equ	0xFEF
  8180                           postinc0	equ	0xFEE
  8181                           plusw0	equ	0xFEB
  8182                           fsr0h	equ	0xFEA
  8183                           fsr0l	equ	0xFE9
  8184                           wreg	equ	0xFE8
  8185                           postinc1	equ	0xFE6
  8186                           fsr1h	equ	0xFE2
  8187                           fsr1l	equ	0xFE1
  8188                           indf2	equ	0xFDF
  8189                           postinc2	equ	0xFDE
  8190                           postdec2	equ	0xFDD
  8191                           plusw2	equ	0xFDB
  8192                           fsr2h	equ	0xFDA
  8193                           fsr2l	equ	0xFD9
  8194                           status	equ	0xFD8
  8195                           
  8196 ;; *************** function _process_data_parameterize *****************
  8197 ;; Defined at:
  8198 ;;		line 293 in file "SlaveComm.c"
  8199 ;; Parameters:    Size  Location     Type
  8200 ;;  parameters      2   24[COMRAM] PTR unsigned char [10]
  8201 ;;		 -> process_data@parameters(50), 
  8202 ;;  buffer_to_pa    2   26[COMRAM] PTR struct buffer
  8203 ;;		 -> communications@receive_buffer(42), 
  8204 ;; Auto vars:     Size  Location     Type
  8205 ;;  inx             2   31[COMRAM] int 
  8206 ;;  parameter_po    1   34[COMRAM] unsigned char 
  8207 ;;  parameter_in    1   33[COMRAM] unsigned char 
  8208 ;; Return value:  Size  Location     Type
  8209 ;;                  1    wreg      void 
  8210 ;; Registers used:
  8211 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8212 ;; Tracked objects:
  8213 ;;		On entry : 0/0
  8214 ;;		On exit  : 0/0
  8215 ;;		Unchanged: 0/0
  8216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8217 ;;      Params:         4       0       0       0       0       0       0
  8218 ;;      Locals:         4       0       0       0       0       0       0
  8219 ;;      Temps:          3       0       0       0       0       0       0
  8220 ;;      Totals:        11       0       0       0       0       0       0
  8221 ;;Total ram usage:       11 bytes
  8222 ;; Hardware stack levels used:    1
  8223 ;; Hardware stack levels required when called:    2
  8224 ;; This function calls:
  8225 ;;		___wmul
  8226 ;; This function is called by:
  8227 ;;		_process_data
  8228 ;; This function uses a non-reentrant model
  8229 ;;
  8230                           
  8231                           	psect	text58
  8232  0009A0                     __ptext58:
  8233                           	opt stack 0
  8234  0009A0                     _process_data_parameterize:
  8235                           	opt stack 25
  8236                           
  8237                           ;SlaveComm.c: 295: unsigned char parameter_position = 0;
  8238                           
  8239                           ;incstack = 0
  8240  0009A0  0E00               	movlw	0
  8241  0009A2  6E23               	movwf	process_data_parameterize@parameter_position,c
  8242                           
  8243                           ;SlaveComm.c: 296: unsigned char parameter_index = 0;
  8244  0009A4  0E00               	movlw	0
  8245  0009A6  6E22               	movwf	process_data_parameterize@parameter_index,c
  8246                           
  8247                           ;SlaveComm.c: 305: for( int inx = 0; inx < 5; inx++ )
  8248  0009A8  0E00               	movlw	0
  8249  0009AA  6E21               	movwf	process_data_parameterize@inx+1,c
  8250  0009AC  0E00               	movlw	0
  8251  0009AE  6E20               	movwf	process_data_parameterize@inx,c
  8252  0009B0  BE21               	btfsc	process_data_parameterize@inx+1,7,c
  8253  0009B2  D008               	goto	l249
  8254  0009B4  5021               	movf	process_data_parameterize@inx+1,w,c
  8255  0009B6  E105               	bnz	u2910
  8256  0009B8  0E05               	movlw	5
  8257  0009BA  5C20               	subwf	process_data_parameterize@inx,w,c
  8258  0009BC  B0D8               	btfsc	status,0,c
  8259  0009BE  D082               	goto	l251
  8260  0009C0  D001               	goto	l249
  8261  0009C2                     u2910:
  8262  0009C2  D080               	goto	l251
  8263  0009C4                     l249:
  8264                           
  8265                           ;SlaveComm.c: 306: {
  8266                           ;SlaveComm.c: 307: parameters[inx][0] = '\0';
  8267  0009C4  C020  F013         	movff	process_data_parameterize@inx,___wmul@multiplier
  8268  0009C8  C021  F014         	movff	process_data_parameterize@inx+1,___wmul@multiplier+1
  8269  0009CC  0E00               	movlw	0
  8270  0009CE  6E16               	movwf	___wmul@multiplicand+1,c
  8271  0009D0  0E0A               	movlw	10
  8272  0009D2  6E15               	movwf	___wmul@multiplicand,c
  8273  0009D4  EC2E  F010         	call	___wmul	;wreg free
  8274  0009D8  5013               	movf	?___wmul,w,c
  8275  0009DA  2419               	addwf	process_data_parameterize@parameters,w,c
  8276  0009DC  6ED9               	movwf	fsr2l,c
  8277  0009DE  5014               	movf	?___wmul+1,w,c
  8278  0009E0  201A               	addwfc	process_data_parameterize@parameters+1,w,c
  8279  0009E2  6EDA               	movwf	fsr2h,c
  8280  0009E4  0E00               	movlw	0
  8281  0009E6  6EDF               	movwf	indf2,c
  8282  0009E8  4A20               	infsnz	process_data_parameterize@inx,f,c
  8283  0009EA  2A21               	incf	process_data_parameterize@inx+1,f,c
  8284  0009EC  BE21               	btfsc	process_data_parameterize@inx+1,7,c
  8285  0009EE  D7EA               	goto	l249
  8286  0009F0  5021               	movf	process_data_parameterize@inx+1,w,c
  8287  0009F2  E168               	bnz	l4055
  8288  0009F4  D7E1               	goto	L6
  8289  0009F6                     
  8290                           ;SlaveComm.c: 319: parameter_position = 0;
  8291  0009F6  0E00               	movlw	0
  8292  0009F8  6E23               	movwf	process_data_parameterize@parameter_position,c
  8293                           
  8294                           ;SlaveComm.c: 320: parameter_index++;
  8295  0009FA  2A22               	incf	process_data_parameterize@parameter_index,f,c
  8296                           
  8297                           ;SlaveComm.c: 322: if( parameter_index >= 5 )
  8298  0009FC  0E04               	movlw	4
  8299  0009FE  6422               	cpfsgt	process_data_parameterize@parameter_index,c
  8300  000A00  D05A               	goto	l255
  8301                           
  8302                           ;SlaveComm.c: 323: {
  8303                           ;SlaveComm.c: 326: parameter_index = (5 - 1);
  8304  000A02  0E04               	movlw	4
  8305  000A04  6E22               	movwf	process_data_parameterize@parameter_index,c
  8306                           
  8307                           ;SlaveComm.c: 327: }
  8308                           ;SlaveComm.c: 329: break;
  8309  000A06  D057               	goto	l255
  8310  000A08                     
  8311                           ;SlaveComm.c: 332: parameters[parameter_index][parameter_position] = buffer_to_parameter
      +                          ize->data_buffer[buffer_to_parameterize->read_position];
  8312  000A08  EE20 F029          	lfsr	2,41
  8313  000A0C  501B               	movf	process_data_parameterize@buffer_to_parameterize,w,c
  8314  000A0E  26D9               	addwf	fsr2l,f,c
  8315  000A10  501C               	movf	process_data_parameterize@buffer_to_parameterize+1,w,c
  8316  000A12  22DA               	addwfc	fsr2h,f,c
  8317  000A14  50DF               	movf	indf2,w,c
  8318  000A16  6E1D               	movwf	??_process_data_parameterize& (0+255),c
  8319  000A18  501D               	movf	??_process_data_parameterize,w,c
  8320  000A1A  0D01               	mullw	1
  8321  000A1C  50F3               	movf	prodl,w,c
  8322  000A1E  241B               	addwf	process_data_parameterize@buffer_to_parameterize,w,c
  8323  000A20  6ED9               	movwf	fsr2l,c
  8324  000A22  50F4               	movf	prodh,w,c
  8325  000A24  201C               	addwfc	process_data_parameterize@buffer_to_parameterize+1,w,c
  8326  000A26  6EDA               	movwf	fsr2h,c
  8327  000A28  5022               	movf	process_data_parameterize@parameter_index,w,c
  8328  000A2A  0D0A               	mullw	10
  8329  000A2C  C019  F01E         	movff	process_data_parameterize@parameters,??_process_data_parameterize+1
  8330  000A30  C01A  F01F         	movff	process_data_parameterize@parameters+1,??_process_data_parameterize+2
  8331  000A34  50F3               	movf	prodl,w,c
  8332  000A36  261E               	addwf	??_process_data_parameterize+1,f,c
  8333  000A38  50F4               	movf	prodh,w,c
  8334  000A3A  221F               	addwfc	??_process_data_parameterize+2,f,c
  8335  000A3C  5023               	movf	process_data_parameterize@parameter_position,w,c
  8336  000A3E  0D01               	mullw	1
  8337  000A40  50F3               	movf	prodl,w,c
  8338  000A42  241E               	addwf	??_process_data_parameterize+1,w,c
  8339  000A44  6EE1               	movwf	fsr1l,c
  8340  000A46  50F4               	movf	prodh,w,c
  8341  000A48  201F               	addwfc	??_process_data_parameterize+2,w,c
  8342  000A4A  6EE2               	movwf	fsr1h,c
  8343  000A4C  CFDF FFE7          	movff	indf2,indf1
  8344                           
  8345                           ;SlaveComm.c: 333: parameter_position++;
  8346  000A50  2A23               	incf	process_data_parameterize@parameter_position,f,c
  8347                           
  8348                           ;SlaveComm.c: 334: if( parameter_position >= 10 )
  8349  000A52  0E09               	movlw	9
  8350  000A54  6423               	cpfsgt	process_data_parameterize@parameter_position,c
  8351  000A56  D002               	goto	l259
  8352                           
  8353                           ;SlaveComm.c: 335: {
  8354                           ;SlaveComm.c: 338: parameter_position = (10 - 1);
  8355  000A58  0E09               	movlw	9
  8356  000A5A  6E23               	movwf	process_data_parameterize@parameter_position,c
  8357  000A5C                     l259:
  8358                           
  8359                           ;SlaveComm.c: 339: }
  8360                           ;SlaveComm.c: 342: parameters[parameter_index][parameter_position] = '\0';
  8361  000A5C  5022               	movf	process_data_parameterize@parameter_index,w,c
  8362  000A5E  0D0A               	mullw	10
  8363  000A60  C019  F01D         	movff	process_data_parameterize@parameters,??_process_data_parameterize
  8364  000A64  C01A  F01E         	movff	process_data_parameterize@parameters+1,??_process_data_parameterize+1
  8365  000A68  50F3               	movf	prodl,w,c
  8366  000A6A  261D               	addwf	??_process_data_parameterize,f,c
  8367  000A6C  50F4               	movf	prodh,w,c
  8368  000A6E  221E               	addwfc	??_process_data_parameterize+1,f,c
  8369  000A70  5023               	movf	process_data_parameterize@parameter_position,w,c
  8370  000A72  0D01               	mullw	1
  8371  000A74  50F3               	movf	prodl,w,c
  8372  000A76  241D               	addwf	??_process_data_parameterize,w,c
  8373  000A78  6ED9               	movwf	fsr2l,c
  8374  000A7A  50F4               	movf	prodh,w,c
  8375  000A7C  201E               	addwfc	??_process_data_parameterize+1,w,c
  8376  000A7E  6EDA               	movwf	fsr2h,c
  8377  000A80  0E00               	movlw	0
  8378  000A82  6EDF               	movwf	indf2,c
  8379                           
  8380                           ;SlaveComm.c: 344: }
  8381                           
  8382                           ;SlaveComm.c: 343: break;
  8383  000A84  D018               	goto	l255
  8384  000A86  EE20 F029          	lfsr	2,41
  8385  000A8A  501B               	movf	process_data_parameterize@buffer_to_parameterize,w,c
  8386  000A8C  26D9               	addwf	fsr2l,f,c
  8387  000A8E  501C               	movf	process_data_parameterize@buffer_to_parameterize+1,w,c
  8388  000A90  22DA               	addwfc	fsr2h,f,c
  8389  000A92  50DF               	movf	indf2,w,c
  8390  000A94  6E1D               	movwf	??_process_data_parameterize& (0+255),c
  8391  000A96  501D               	movf	??_process_data_parameterize,w,c
  8392  000A98  0D01               	mullw	1
  8393  000A9A  50F3               	movf	prodl,w,c
  8394  000A9C  241B               	addwf	process_data_parameterize@buffer_to_parameterize,w,c
  8395  000A9E  6ED9               	movwf	fsr2l,c
  8396  000AA0  50F4               	movf	prodh,w,c
  8397  000AA2  201C               	addwfc	process_data_parameterize@buffer_to_parameterize+1,w,c
  8398  000AA4  6EDA               	movwf	fsr2h,c
  8399  000AA6  50DF               	movf	indf2,w,c
  8400                           
  8401                           ; Switch size 1, requested type "space"
  8402                           ; Number of cases is 2, Range of values is 33 to 59
  8403                           ; switch strategies available:
  8404                           ; Name         Instructions Cycles
  8405                           ; simple_byte            7     4 (average)
  8406                           ;	Chosen strategy is simple_byte
  8407  000AA8  0A21               	xorlw	33	; case 33
  8408  000AAA  B4D8               	btfsc	status,2,c
  8409  000AAC  D004               	goto	l255
  8410  000AAE  0A1A               	xorlw	26	; case 59
  8411  000AB0  B4D8               	btfsc	status,2,c
  8412  000AB2  D7A1               	goto	l256
  8413  000AB4  D7A9               	goto	l258
  8414  000AB6                     l255:
  8415                           
  8416                           ;SlaveComm.c: 346: buffer_to_parameterize->read_position++;
  8417  000AB6  EE20 F029          	lfsr	2,41
  8418  000ABA  501B               	movf	process_data_parameterize@buffer_to_parameterize,w,c
  8419  000ABC  26D9               	addwf	fsr2l,f,c
  8420  000ABE  501C               	movf	process_data_parameterize@buffer_to_parameterize+1,w,c
  8421  000AC0  22DA               	addwfc	fsr2h,f,c
  8422  000AC2  2ADF               	incf	indf2,f,c
  8423  000AC4                     l251:
  8424  000AC4                     l4055:
  8425  000AC4  EE20 F029          	lfsr	2,41
  8426  000AC8  501B               	movf	process_data_parameterize@buffer_to_parameterize,w,c
  8427  000ACA  26D9               	addwf	fsr2l,f,c
  8428  000ACC  501C               	movf	process_data_parameterize@buffer_to_parameterize+1,w,c
  8429  000ACE  22DA               	addwfc	fsr2h,f,c
  8430  000AD0  50DF               	movf	indf2,w,c
  8431  000AD2  6E1D               	movwf	??_process_data_parameterize& (0+255),c
  8432  000AD4  501D               	movf	??_process_data_parameterize,w,c
  8433  000AD6  0D01               	mullw	1
  8434  000AD8  50F3               	movf	prodl,w,c
  8435  000ADA  241B               	addwf	process_data_parameterize@buffer_to_parameterize,w,c
  8436  000ADC  6ED9               	movwf	fsr2l,c
  8437  000ADE  50F4               	movf	prodh,w,c
  8438  000AE0  201C               	addwfc	process_data_parameterize@buffer_to_parameterize+1,w,c
  8439  000AE2  6EDA               	movwf	fsr2h,c
  8440  000AE4  0E2A               	movlw	42
  8441  000AE6  18DE               	xorwf	postinc2,w,c
  8442  000AE8  B4D8               	btfsc	status,2,c
  8443  000AEA  0012               	return	
  8444  000AEC  EE20 F029          	lfsr	2,41
  8445  000AF0  501B               	movf	process_data_parameterize@buffer_to_parameterize,w,c
  8446  000AF2  26D9               	addwf	fsr2l,f,c
  8447  000AF4  501C               	movf	process_data_parameterize@buffer_to_parameterize+1,w,c
  8448  000AF6  22DA               	addwfc	fsr2h,f,c
  8449  000AF8  0E28               	movlw	40
  8450  000AFA  60DF               	cpfslt	indf2,c
  8451  000AFC  0012               	return	
  8452  000AFE  EE20 F028          	lfsr	2,40
  8453  000B02  501B               	movf	process_data_parameterize@buffer_to_parameterize,w,c
  8454  000B04  26D9               	addwf	fsr2l,f,c
  8455  000B06  501C               	movf	process_data_parameterize@buffer_to_parameterize+1,w,c
  8456  000B08  22DA               	addwfc	fsr2h,f,c
  8457  000B0A  EE10 F029          	lfsr	1,41
  8458  000B0E  501B               	movf	process_data_parameterize@buffer_to_parameterize,w,c
  8459  000B10  26E1               	addwf	fsr1l,f,c
  8460  000B12  501C               	movf	process_data_parameterize@buffer_to_parameterize+1,w,c
  8461  000B14  22E2               	addwfc	fsr1h,f,c
  8462  000B16  50DE               	movf	postinc2,w,c
  8463  000B18  18E6               	xorwf	postinc1,w,c
  8464  000B1A  B4D8               	btfsc	status,2,c
  8465  000B1C  0012               	return	
  8466  000B1E  D7B3               	goto	l253
  8467  000B20                     __end_of_process_data_parameterize:
  8468                           	opt stack 0
  8469                           tblptru	equ	0xFF8
  8470                           tblptrh	equ	0xFF7
  8471                           tblptrl	equ	0xFF6
  8472                           tablat	equ	0xFF5
  8473                           prodh	equ	0xFF4
  8474                           prodl	equ	0xFF3
  8475                           intcon	equ	0xFF2
  8476                           intcon2	equ	0xFF1
  8477                           intcon3	equ	0xFF0
  8478                           indf0	equ	0xFEF
  8479                           postinc0	equ	0xFEE
  8480                           plusw0	equ	0xFEB
  8481                           fsr0h	equ	0xFEA
  8482                           fsr0l	equ	0xFE9
  8483                           wreg	equ	0xFE8
  8484                           indf1	equ	0xFE7
  8485                           postinc1	equ	0xFE6
  8486                           fsr1h	equ	0xFE2
  8487                           fsr1l	equ	0xFE1
  8488                           indf2	equ	0xFDF
  8489                           postinc2	equ	0xFDE
  8490                           postdec2	equ	0xFDD
  8491                           plusw2	equ	0xFDB
  8492                           fsr2h	equ	0xFDA
  8493                           fsr2l	equ	0xFD9
  8494                           status	equ	0xFD8
  8495                           
  8496 ;; *************** function ___wmul *****************
  8497 ;; Defined at:
  8498 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  8499 ;; Parameters:    Size  Location     Type
  8500 ;;  multiplier      2   18[COMRAM] unsigned int 
  8501 ;;  multiplicand    2   20[COMRAM] unsigned int 
  8502 ;; Auto vars:     Size  Location     Type
  8503 ;;  product         2   22[COMRAM] unsigned int 
  8504 ;; Return value:  Size  Location     Type
  8505 ;;                  2   18[COMRAM] unsigned int 
  8506 ;; Registers used:
  8507 ;;		wreg, status,2, status,0, prodl, prodh
  8508 ;; Tracked objects:
  8509 ;;		On entry : 0/0
  8510 ;;		On exit  : 0/0
  8511 ;;		Unchanged: 0/0
  8512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8513 ;;      Params:         4       0       0       0       0       0       0
  8514 ;;      Locals:         2       0       0       0       0       0       0
  8515 ;;      Temps:          0       0       0       0       0       0       0
  8516 ;;      Totals:         6       0       0       0       0       0       0
  8517 ;;Total ram usage:        6 bytes
  8518 ;; Hardware stack levels used:    1
  8519 ;; Hardware stack levels required when called:    1
  8520 ;; This function calls:
  8521 ;;		Nothing
  8522 ;; This function is called by:
  8523 ;;		_process_data_parameterize
  8524 ;;		_atoi
  8525 ;; This function uses a non-reentrant model
  8526 ;;
  8527                           
  8528                           	psect	text59
  8529  00205C                     __ptext59:
  8530                           	opt stack 0
  8531  00205C                     ___wmul:
  8532                           	opt stack 25
  8533                           
  8534                           ;incstack = 0
  8535  00205C  5013               	movf	___wmul@multiplier,w,c
  8536  00205E  0215               	mulwf	___wmul@multiplicand,c
  8537  002060  CFF3 F017          	movff	prodl,___wmul@product
  8538  002064  CFF4 F018          	movff	prodh,___wmul@product+1
  8539  002068  5013               	movf	___wmul@multiplier,w,c
  8540  00206A  0216               	mulwf	___wmul@multiplicand+1,c
  8541  00206C  50F3               	movf	prodl,w,c
  8542  00206E  2618               	addwf	___wmul@product+1,f,c
  8543  002070  5014               	movf	___wmul@multiplier+1,w,c
  8544  002072  0215               	mulwf	___wmul@multiplicand,c
  8545  002074  50F3               	movf	prodl,w,c
  8546  002076  2618               	addwf	___wmul@product+1,f,c
  8547  002078  C017  F013         	movff	___wmul@product,?___wmul
  8548  00207C  C018  F014         	movff	___wmul@product+1,?___wmul+1
  8549  002080  0012               	return	
  8550  002082                     __end_of___wmul:
  8551                           	opt stack 0
  8552                           tblptru	equ	0xFF8
  8553                           tblptrh	equ	0xFF7
  8554                           tblptrl	equ	0xFF6
  8555                           tablat	equ	0xFF5
  8556                           prodh	equ	0xFF4
  8557                           prodl	equ	0xFF3
  8558                           intcon	equ	0xFF2
  8559                           intcon2	equ	0xFF1
  8560                           intcon3	equ	0xFF0
  8561                           indf0	equ	0xFEF
  8562                           postinc0	equ	0xFEE
  8563                           plusw0	equ	0xFEB
  8564                           fsr0h	equ	0xFEA
  8565                           fsr0l	equ	0xFE9
  8566                           wreg	equ	0xFE8
  8567                           indf1	equ	0xFE7
  8568                           postinc1	equ	0xFE6
  8569                           fsr1h	equ	0xFE2
  8570                           fsr1l	equ	0xFE1
  8571                           indf2	equ	0xFDF
  8572                           postinc2	equ	0xFDE
  8573                           postdec2	equ	0xFDD
  8574                           plusw2	equ	0xFDB
  8575                           fsr2h	equ	0xFDA
  8576                           fsr2l	equ	0xFD9
  8577                           status	equ	0xFD8
  8578                           
  8579 ;; *************** function _SPISlaveInit *****************
  8580 ;; Defined at:
  8581 ;;		line 742 in file "SlaveComm.c"
  8582 ;; Parameters:    Size  Location     Type
  8583 ;;		None
  8584 ;; Auto vars:     Size  Location     Type
  8585 ;;		None
  8586 ;; Return value:  Size  Location     Type
  8587 ;;                  1    wreg      void 
  8588 ;; Registers used:
  8589 ;;		wreg, status,2
  8590 ;; Tracked objects:
  8591 ;;		On entry : 0/0
  8592 ;;		On exit  : 0/0
  8593 ;;		Unchanged: 0/0
  8594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8595 ;;      Params:         0       0       0       0       0       0       0
  8596 ;;      Locals:         0       0       0       0       0       0       0
  8597 ;;      Temps:          0       0       0       0       0       0       0
  8598 ;;      Totals:         0       0       0       0       0       0       0
  8599 ;;Total ram usage:        0 bytes
  8600 ;; Hardware stack levels used:    1
  8601 ;; Hardware stack levels required when called:    1
  8602 ;; This function calls:
  8603 ;;		Nothing
  8604 ;; This function is called by:
  8605 ;;		_communications
  8606 ;; This function uses a non-reentrant model
  8607 ;;
  8608                           
  8609                           	psect	text60
  8610  001DAE                     __ptext60:
  8611                           	opt stack 0
  8612  001DAE                     _SPISlaveInit:
  8613                           	opt stack 27
  8614                           
  8615                           ;SlaveComm.c: 745: TRISAbits.TRISA0 = 0;
  8616                           
  8617                           ;incstack = 0
  8618  001DAE  9092               	bcf	3986,0,c	;volatile
  8619                           
  8620                           ;SlaveComm.c: 746: TRISAbits.TRISA1 = 1;
  8621  001DB0  8292               	bsf	3986,1,c	;volatile
  8622                           
  8623                           ;SlaveComm.c: 748: TRISCbits.TRISC3 = 0;
  8624  001DB2  9694               	bcf	3988,3,c	;volatile
  8625                           
  8626                           ;SlaveComm.c: 749: TRISCbits.TRISC5 = 0;
  8627  001DB4  9A94               	bcf	3988,5,c	;volatile
  8628                           
  8629                           ;SlaveComm.c: 750: TRISCbits.TRISC6 = 0;
  8630  001DB6  9C94               	bcf	3988,6,c	;volatile
  8631                           
  8632                           ;SlaveComm.c: 751: TRISCbits.TRISC7 = 0;
  8633  001DB8  9E94               	bcf	3988,7,c	;volatile
  8634                           
  8635                           ;SlaveComm.c: 752: ANSELAbits.ANSA1 = 0b0;
  8636  001DBA  010F               	movlb	15	; () banked
  8637  001DBC  9338               	bcf	56,1,b	;volatile
  8638                           
  8639                           ;SlaveComm.c: 754: LATCbits.LATC6 = 1;
  8640  001DBE  8C8B               	bsf	3979,6,c	;volatile
  8641                           
  8642                           ;SlaveComm.c: 755: LATCbits.LATC3 = 1;
  8643  001DC0  868B               	bsf	3979,3,c	;volatile
  8644                           
  8645                           ;SlaveComm.c: 756: LATCbits.LATC5 = 1;
  8646  001DC2  8A8B               	bsf	3979,5,c	;volatile
  8647                           
  8648                           ;SlaveComm.c: 757: LATCbits.LATC7 = 1;
  8649  001DC4  8E8B               	bsf	3979,7,c	;volatile
  8650                           
  8651                           ;SlaveComm.c: 760: SSP2CON1bits.SSPEN = 0;
  8652  001DC6  9A6C               	bcf	3948,5,c	;volatile
  8653                           
  8654                           ;SlaveComm.c: 762: ANSELBbits.ANSB0 = 0b0;
  8655  001DC8  9139               	bcf	57,0,b	;volatile
  8656                           
  8657                           ;SlaveComm.c: 763: ANSELBbits.ANSB1 = 0b0;
  8658  001DCA  9339               	bcf	57,1,b	;volatile
  8659                           
  8660                           ;SlaveComm.c: 764: ANSELBbits.ANSB2 = 0b0;
  8661  001DCC  9539               	bcf	57,2,b	;volatile
  8662                           
  8663                           ;SlaveComm.c: 765: ANSELBbits.ANSB3 = 0b0;
  8664  001DCE  9739               	bcf	57,3,b	;volatile
  8665                           
  8666                           ;SlaveComm.c: 767: TRISBbits.RB0 = 0b1;
  8667  001DD0  8093               	bsf	3987,0,c	;volatile
  8668                           
  8669                           ;SlaveComm.c: 768: TRISBbits.RB1 = 0b1;
  8670  001DD2  8293               	bsf	3987,1,c	;volatile
  8671                           
  8672                           ;SlaveComm.c: 769: TRISBbits.RB2 = 0b1;
  8673  001DD4  8493               	bsf	3987,2,c	;volatile
  8674                           
  8675                           ;SlaveComm.c: 770: TRISBbits.RB3 = 0b0;
  8676  001DD6  9693               	bcf	3987,3,c	;volatile
  8677                           
  8678                           ;SlaveComm.c: 772: SSP2STATbits.SMP = 0;
  8679  001DD8  9E6D               	bcf	3949,7,c	;volatile
  8680                           
  8681                           ;SlaveComm.c: 773: SSP2STATbits.CKE = 1;
  8682  001DDA  8C6D               	bsf	3949,6,c	;volatile
  8683                           
  8684                           ;SlaveComm.c: 775: SSP2CON1bits.WCOL = 0;
  8685  001DDC  9E6C               	bcf	3948,7,c	;volatile
  8686                           
  8687                           ;SlaveComm.c: 776: SSP2CON1bits.SSPOV = 0;
  8688  001DDE  9C6C               	bcf	3948,6,c	;volatile
  8689                           
  8690                           ;SlaveComm.c: 777: SSP2CON1bits.SSPEN = 0;
  8691  001DE0  9A6C               	bcf	3948,5,c	;volatile
  8692                           
  8693                           ;SlaveComm.c: 778: SSP2CON1bits.CKP = 1;
  8694  001DE2  886C               	bsf	3948,4,c	;volatile
  8695                           
  8696                           ; BSR set to: 15
  8697                           ;SlaveComm.c: 779: SSP2CON1bits.SSPM = 0b0100;
  8698  001DE4  506C               	movf	3948,w,c	;volatile
  8699  001DE6  0BF0               	andlw	-16
  8700  001DE8  0904               	iorlw	4
  8701  001DEA  6E6C               	movwf	3948,c	;volatile
  8702                           
  8703                           ;SlaveComm.c: 782: SSP2CON3 = 0x00;
  8704  001DEC  0E00               	movlw	0
  8705  001DEE  6E69               	movwf	3945,c	;volatile
  8706                           
  8707                           ; BSR set to: 15
  8708                           ;SlaveComm.c: 783: SSP2CON3bits.BOEN = 0b0;
  8709  001DF0  9869               	bcf	3945,4,c	;volatile
  8710                           
  8711                           ; BSR set to: 15
  8712                           ;SlaveComm.c: 785: SSP2CON1bits.SSPEN = 1;
  8713  001DF2  8A6C               	bsf	3948,5,c	;volatile
  8714  001DF4  0012               	return	
  8715  001DF6                     __end_of_SPISlaveInit:
  8716                           	opt stack 0
  8717                           tblptru	equ	0xFF8
  8718                           tblptrh	equ	0xFF7
  8719                           tblptrl	equ	0xFF6
  8720                           tablat	equ	0xFF5
  8721                           prodh	equ	0xFF4
  8722                           prodl	equ	0xFF3
  8723                           intcon	equ	0xFF2
  8724                           intcon2	equ	0xFF1
  8725                           intcon3	equ	0xFF0
  8726                           indf0	equ	0xFEF
  8727                           postinc0	equ	0xFEE
  8728                           plusw0	equ	0xFEB
  8729                           fsr0h	equ	0xFEA
  8730                           fsr0l	equ	0xFE9
  8731                           wreg	equ	0xFE8
  8732                           indf1	equ	0xFE7
  8733                           postinc1	equ	0xFE6
  8734                           fsr1h	equ	0xFE2
  8735                           fsr1l	equ	0xFE1
  8736                           indf2	equ	0xFDF
  8737                           postinc2	equ	0xFDE
  8738                           postdec2	equ	0xFDD
  8739                           plusw2	equ	0xFDB
  8740                           fsr2h	equ	0xFDA
  8741                           fsr2l	equ	0xFD9
  8742                           status	equ	0xFD8
  8743                           
  8744 ;; *************** function _Timer0_ISR *****************
  8745 ;; Defined at:
  8746 ;;		line 80 in file "Timer.c"
  8747 ;; Parameters:    Size  Location     Type
  8748 ;;		None
  8749 ;; Auto vars:     Size  Location     Type
  8750 ;;		None
  8751 ;; Return value:  Size  Location     Type
  8752 ;;                  1    wreg      void 
  8753 ;; Registers used:
  8754 ;;		wreg, status,2, status,0
  8755 ;; Tracked objects:
  8756 ;;		On entry : 0/0
  8757 ;;		On exit  : 0/0
  8758 ;;		Unchanged: 0/0
  8759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8760 ;;      Params:         0       0       0       0       0       0       0
  8761 ;;      Locals:         0       0       0       0       0       0       0
  8762 ;;      Temps:         18       0       0       0       0       0       0
  8763 ;;      Totals:        18       0       0       0       0       0       0
  8764 ;;Total ram usage:       18 bytes
  8765 ;; Hardware stack levels used:    1
  8766 ;; This function calls:
  8767 ;;		Nothing
  8768 ;; This function is called by:
  8769 ;;		Interrupt level 2
  8770 ;; This function uses a non-reentrant model
  8771 ;;
  8772                           
  8773                           	psect	intcode
  8774  000008                     __pintcode:
  8775                           	opt stack 0
  8776  000008                     _Timer0_ISR:
  8777                           	opt stack 20
  8778                           
  8779                           ; BSR set to: 15
  8780                           ;incstack = 0
  8781  000008  824D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8782  00000A  CFFA F001          	movff	pclath,??_Timer0_ISR
  8783  00000E  CFFB F002          	movff	pclatu,??_Timer0_ISR+1
  8784  000012  CFE9 F003          	movff	fsr0l,??_Timer0_ISR+2
  8785  000016  CFEA F004          	movff	fsr0h,??_Timer0_ISR+3
  8786  00001A  CFE1 F005          	movff	fsr1l,??_Timer0_ISR+4
  8787  00001E  CFE2 F006          	movff	fsr1h,??_Timer0_ISR+5
  8788  000022  CFD9 F007          	movff	fsr2l,??_Timer0_ISR+6
  8789  000026  CFDA F008          	movff	fsr2h,??_Timer0_ISR+7
  8790  00002A  CFF3 F009          	movff	prodl,??_Timer0_ISR+8
  8791  00002E  CFF4 F00A          	movff	prodh,??_Timer0_ISR+9
  8792  000032  CFF6 F00B          	movff	tblptrl,??_Timer0_ISR+10
  8793  000036  CFF7 F00C          	movff	tblptrh,??_Timer0_ISR+11
  8794  00003A  CFF8 F00D          	movff	tblptru,??_Timer0_ISR+12
  8795  00003E  CFF5 F00E          	movff	tablat,??_Timer0_ISR+13
  8796  000042  C04D  F00F         	movff	btemp,??_Timer0_ISR+14
  8797  000046  C04E  F010         	movff	btemp+1,??_Timer0_ISR+15
  8798  00004A  C04F  F011         	movff	btemp+2,??_Timer0_ISR+16
  8799  00004E  C050  F012         	movff	btemp+3,??_Timer0_ISR+17
  8800                           
  8801                           ;Timer.c: 82: INTCONbits.TMR0IF = 0;
  8802  000052  94F2               	bcf	intcon,2,c	;volatile
  8803                           
  8804                           ;Timer.c: 84: TMR0H = ((unsigned char)(((( 65536 - 1000 ))>>8)&0xFF));
  8805  000054  0EFC               	movlw	252
  8806  000056  6ED7               	movwf	4055,c	;volatile
  8807                           
  8808                           ;Timer.c: 85: TMR0L = ((unsigned char)((( 65536 - 1000 ))&0xFF));
  8809  000058  0E18               	movlw	24
  8810  00005A  6ED6               	movwf	4054,c	;volatile
  8811                           
  8812                           ;Timer.c: 87: timerCount_ms[0]++;
  8813  00005C  0E01               	movlw	1
  8814  00005E  0100               	movlb	0	; () banked
  8815  000060  27E0               	addwf	_timerCount_ms& (0+255),f,b	;volatile
  8816  000062  0E00               	movlw	0
  8817  000064  23E1               	addwfc	(_timerCount_ms+1)& (0+255),f,b	;volatile
  8818  000066  23E2               	addwfc	(_timerCount_ms+2)& (0+255),f,b	;volatile
  8819  000068  23E3               	addwfc	(_timerCount_ms+3)& (0+255),f,b	;volatile
  8820                           
  8821                           ; BSR set to: 0
  8822                           ;Timer.c: 88: timerCount_ms[1]++;
  8823  00006A  0E01               	movlw	1
  8824  00006C  27E4               	addwf	(_timerCount_ms+4)& (0+255),f,b	;volatile
  8825  00006E  0E00               	movlw	0
  8826  000070  23E5               	addwfc	(_timerCount_ms+5)& (0+255),f,b	;volatile
  8827  000072  23E6               	addwfc	(_timerCount_ms+6)& (0+255),f,b	;volatile
  8828  000074  23E7               	addwfc	(_timerCount_ms+7)& (0+255),f,b	;volatile
  8829                           
  8830                           ; BSR set to: 0
  8831                           ;Timer.c: 89: timerCount_ms[2]++;
  8832  000076  0E01               	movlw	1
  8833  000078  27E8               	addwf	(_timerCount_ms+8)& (0+255),f,b	;volatile
  8834  00007A  0E00               	movlw	0
  8835  00007C  23E9               	addwfc	(_timerCount_ms+9)& (0+255),f,b	;volatile
  8836  00007E  23EA               	addwfc	(_timerCount_ms+10)& (0+255),f,b	;volatile
  8837  000080  23EB               	addwfc	(_timerCount_ms+11)& (0+255),f,b	;volatile
  8838                           
  8839                           ; BSR set to: 0
  8840                           ;Timer.c: 90: timerCount_ms[3]++;
  8841  000082  0E01               	movlw	1
  8842  000084  27EC               	addwf	(_timerCount_ms+12)& (0+255),f,b	;volatile
  8843  000086  0E00               	movlw	0
  8844  000088  23ED               	addwfc	(_timerCount_ms+13)& (0+255),f,b	;volatile
  8845  00008A  23EE               	addwfc	(_timerCount_ms+14)& (0+255),f,b	;volatile
  8846  00008C  23EF               	addwfc	(_timerCount_ms+15)& (0+255),f,b	;volatile
  8847                           
  8848                           ; BSR set to: 0
  8849                           
  8850                           ; BSR set to: 0
  8851                           ;Timer.c: 92: return;
  8852  00008E  C012  F050         	movff	??_Timer0_ISR+17,btemp+3
  8853  000092  C011  F04F         	movff	??_Timer0_ISR+16,btemp+2
  8854  000096  C010  F04E         	movff	??_Timer0_ISR+15,btemp+1
  8855  00009A  C00F  F04D         	movff	??_Timer0_ISR+14,btemp
  8856  00009E  C00E  FFF5         	movff	??_Timer0_ISR+13,tablat
  8857  0000A2  C00D  FFF8         	movff	??_Timer0_ISR+12,tblptru
  8858  0000A6  C00C  FFF7         	movff	??_Timer0_ISR+11,tblptrh
  8859  0000AA  C00B  FFF6         	movff	??_Timer0_ISR+10,tblptrl
  8860  0000AE  C00A  FFF4         	movff	??_Timer0_ISR+9,prodh
  8861  0000B2  C009  FFF3         	movff	??_Timer0_ISR+8,prodl
  8862  0000B6  C008  FFDA         	movff	??_Timer0_ISR+7,fsr2h
  8863  0000BA  C007  FFD9         	movff	??_Timer0_ISR+6,fsr2l
  8864  0000BE  C006  FFE2         	movff	??_Timer0_ISR+5,fsr1h
  8865  0000C2  C005  FFE1         	movff	??_Timer0_ISR+4,fsr1l
  8866  0000C6  C004  FFEA         	movff	??_Timer0_ISR+3,fsr0h
  8867  0000CA  C003  FFE9         	movff	??_Timer0_ISR+2,fsr0l
  8868  0000CE  C002  FFFB         	movff	??_Timer0_ISR+1,pclatu
  8869  0000D2  C001  FFFA         	movff	??_Timer0_ISR,pclath
  8870  0000D6  924D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8871  0000D8  0011               	retfie		f
  8872  0000DA                     __end_of_Timer0_ISR:
  8873                           	opt stack 0
  8874                           pclatu	equ	0xFFB
  8875                           pclath	equ	0xFFA
  8876                           tblptru	equ	0xFF8
  8877                           tblptrh	equ	0xFF7
  8878                           tblptrl	equ	0xFF6
  8879                           tablat	equ	0xFF5
  8880                           prodh	equ	0xFF4
  8881                           prodl	equ	0xFF3
  8882                           intcon	equ	0xFF2
  8883                           intcon2	equ	0xFF1
  8884                           intcon3	equ	0xFF0
  8885                           indf0	equ	0xFEF
  8886                           postinc0	equ	0xFEE
  8887                           plusw0	equ	0xFEB
  8888                           fsr0h	equ	0xFEA
  8889                           fsr0l	equ	0xFE9
  8890                           wreg	equ	0xFE8
  8891                           indf1	equ	0xFE7
  8892                           postinc1	equ	0xFE6
  8893                           fsr1h	equ	0xFE2
  8894                           fsr1l	equ	0xFE1
  8895                           indf2	equ	0xFDF
  8896                           postinc2	equ	0xFDE
  8897                           postdec2	equ	0xFDD
  8898                           plusw2	equ	0xFDB
  8899                           fsr2h	equ	0xFDA
  8900                           fsr2l	equ	0xFD9
  8901                           status	equ	0xFD8
  8902                           pclatu	equ	0xFFB
  8903                           pclath	equ	0xFFA
  8904                           tblptru	equ	0xFF8
  8905                           tblptrh	equ	0xFF7
  8906                           tblptrl	equ	0xFF6
  8907                           tablat	equ	0xFF5
  8908                           prodh	equ	0xFF4
  8909                           prodl	equ	0xFF3
  8910                           intcon	equ	0xFF2
  8911                           intcon2	equ	0xFF1
  8912                           intcon3	equ	0xFF0
  8913                           indf0	equ	0xFEF
  8914                           postinc0	equ	0xFEE
  8915                           plusw0	equ	0xFEB
  8916                           fsr0h	equ	0xFEA
  8917                           fsr0l	equ	0xFE9
  8918                           wreg	equ	0xFE8
  8919                           indf1	equ	0xFE7
  8920                           postinc1	equ	0xFE6
  8921                           fsr1h	equ	0xFE2
  8922                           fsr1l	equ	0xFE1
  8923                           indf2	equ	0xFDF
  8924                           postinc2	equ	0xFDE
  8925                           postdec2	equ	0xFDD
  8926                           plusw2	equ	0xFDB
  8927                           fsr2h	equ	0xFDA
  8928                           fsr2l	equ	0xFD9
  8929                           status	equ	0xFD8
  8930                           
  8931                           	psect	rparam
  8932  0000                     pclatu	equ	0xFFB
  8933                           pclath	equ	0xFFA
  8934                           tblptru	equ	0xFF8
  8935                           tblptrh	equ	0xFF7
  8936                           tblptrl	equ	0xFF6
  8937                           tablat	equ	0xFF5
  8938                           prodh	equ	0xFF4
  8939                           prodl	equ	0xFF3
  8940                           intcon	equ	0xFF2
  8941                           intcon2	equ	0xFF1
  8942                           intcon3	equ	0xFF0
  8943                           indf0	equ	0xFEF
  8944                           postinc0	equ	0xFEE
  8945                           plusw0	equ	0xFEB
  8946                           fsr0h	equ	0xFEA
  8947                           fsr0l	equ	0xFE9
  8948                           wreg	equ	0xFE8
  8949                           indf1	equ	0xFE7
  8950                           postinc1	equ	0xFE6
  8951                           fsr1h	equ	0xFE2
  8952                           fsr1l	equ	0xFE1
  8953                           indf2	equ	0xFDF
  8954                           postinc2	equ	0xFDE
  8955                           postdec2	equ	0xFDD
  8956                           plusw2	equ	0xFDB
  8957                           fsr2h	equ	0xFDA
  8958                           fsr2l	equ	0xFD9
  8959                           status	equ	0xFD8
  8960                           
  8961                           	psect	temp
  8962  00004D                     btemp:
  8963                           	opt stack 0
  8964  00004D                     	ds	1
  8965  0000                     int$flags	set	btemp
  8966  0000                     wtemp6	set	btemp+1
  8967                           pclatu	equ	0xFFB
  8968                           pclath	equ	0xFFA
  8969                           tblptru	equ	0xFF8
  8970                           tblptrh	equ	0xFF7
  8971                           tblptrl	equ	0xFF6
  8972                           tablat	equ	0xFF5
  8973                           prodh	equ	0xFF4
  8974                           prodl	equ	0xFF3
  8975                           intcon	equ	0xFF2
  8976                           intcon2	equ	0xFF1
  8977                           intcon3	equ	0xFF0
  8978                           indf0	equ	0xFEF
  8979                           postinc0	equ	0xFEE
  8980                           plusw0	equ	0xFEB
  8981                           fsr0h	equ	0xFEA
  8982                           fsr0l	equ	0xFE9
  8983                           wreg	equ	0xFE8
  8984                           indf1	equ	0xFE7
  8985                           postinc1	equ	0xFE6
  8986                           fsr1h	equ	0xFE2
  8987                           fsr1l	equ	0xFE1
  8988                           indf2	equ	0xFDF
  8989                           postinc2	equ	0xFDE
  8990                           postdec2	equ	0xFDD
  8991                           plusw2	equ	0xFDB
  8992                           fsr2h	equ	0xFDA
  8993                           fsr2l	equ	0xFD9
  8994                           status	equ	0xFD8


Data Sizes:
    Strings     81
    Constant    0
    Data        0
    BSS         132
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     60      76
    BANK0           160    128     160
    BANK1           256      8      92
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    ultoa@buf	PTR unsigned char  size(2) Largest target is 12
		 -> com_command_setEnergyUsed@temp(BANK0[12]), com_command_setPower@temp(BANK0[12]), 

    sp__ltoa	PTR unsigned char  size(2) Largest target is 0

    utoa@buf	PTR unsigned char  size(2) Largest target is 16
		 -> xsum_builder@xsumBuf(BANK0[16]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 16
		 -> xsum_builder@xsumBuf(BANK0[16]), 

    itoa@buf	PTR unsigned char  size(2) Largest target is 16
		 -> xsum_builder@xsumBuf(BANK0[16]), 

    itoa@cp	PTR unsigned char  size(2) Largest target is 16
		 -> xsum_builder@xsumBuf(BANK0[16]), 

    atol@s	PTR const unsigned char  size(2) Largest target is 50
		 -> process_data@parameters(BANK0[50]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 16
		 -> xSumMatches@recXsumbuf(BANK0[16]), 

    com_command_setVersion@send_buffer	PTR struct buffer size(2) Largest target is 42
		 -> communications@send_buffer(BANK1[42]), 

    com_command_setEnergyUsed@send_buffer	PTR struct buffer size(2) Largest target is 42
		 -> communications@send_buffer(BANK1[42]), 

    com_command_setPower@send_buffer	PTR struct buffer size(2) Largest target is 42
		 -> communications@send_buffer(BANK1[42]), 

    sp__ultoa	PTR unsigned char  size(2) Largest target is 12
		 -> com_command_setEnergyUsed@temp(BANK0[12]), com_command_setPower@temp(BANK0[12]), 

    send_end_of_transmission@send_buffer	PTR struct buffer size(2) Largest target is 42
		 -> communications@send_buffer(BANK1[42]), 

    SPI_receive_data@data	PTR unsigned char  size(2) Largest target is 1
		 -> receive_data@data(COMRAM[1]), 

    strcmp2@b	PTR unsigned char  size(2) Largest target is 12
		 -> STR_11(CODE[10]), STR_10(CODE[5]), STR_9(CODE[6]), STR_8(CODE[7]), 
		 -> STR_7(CODE[6]), STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[7]), 
		 -> STR_3(CODE[12]), STR_2(CODE[4]), STR_1(CODE[4]), 

    strcmp2@a	PTR unsigned char  size(2) Largest target is 50
		 -> process_data@parameters(BANK0[50]), 

    strmatch@b	PTR unsigned char  size(2) Largest target is 12
		 -> STR_11(CODE[10]), STR_10(CODE[5]), STR_9(CODE[6]), STR_8(CODE[7]), 
		 -> STR_7(CODE[6]), STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[7]), 
		 -> STR_3(CODE[12]), STR_2(CODE[4]), STR_1(CODE[4]), 

    strmatch@a	PTR unsigned char  size(2) Largest target is 50
		 -> process_data@parameters(BANK0[50]), 

    send_data@send_buffer	PTR struct buffer size(2) Largest target is 42
		 -> communications@send_buffer(BANK1[42]), 

    command_builder_add_string@data_string	PTR unsigned char  size(2) Largest target is 16
		 -> STR_29(CODE[4]), STR_28(CODE[10]), STR_27(CODE[4]), STR_26(CODE[12]), 
		 -> STR_25(CODE[5]), STR_24(CODE[4]), STR_23(CODE[5]), STR_22(CODE[4]), 
		 -> STR_21(CODE[4]), STR_20(CODE[6]), STR_19(CODE[4]), STR_18(CODE[7]), 
		 -> STR_17(CODE[4]), com_command_setEnergyUsed@temp(BANK0[12]), STR_16(CODE[6]), STR_15(CODE[4]), 
		 -> com_command_setPower@temp(BANK0[12]), STR_14(CODE[5]), STR_13(CODE[5]), STR_12(CODE[4]), 
		 -> xsum_builder@xsumBuf(BANK0[16]), 

    command_builder_add_string@send_buffer	PTR struct buffer size(2) Largest target is 42
		 -> communications@send_buffer(BANK1[42]), 

    command_builder_add_char@send_buffer	PTR struct buffer size(2) Largest target is 42
		 -> communications@send_buffer(BANK1[42]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 16
		 -> xsum_builder@xsumBuf(BANK0[16]), 

    xsum_builder@send_buffer	PTR struct buffer size(2) Largest target is 42
		 -> communications@send_buffer(BANK1[42]), 

    command_builder3@data3	PTR unsigned char  size(2) Largest target is 12
		 -> STR_29(CODE[4]), STR_24(CODE[4]), STR_21(CODE[4]), com_command_setEnergyUsed@temp(BANK0[12]), 
		 -> com_command_setPower@temp(BANK0[12]), 

    command_builder3@data2	PTR unsigned char  size(2) Largest target is 10
		 -> STR_28(CODE[10]), STR_23(CODE[5]), STR_20(CODE[6]), STR_18(CODE[7]), 
		 -> STR_16(CODE[6]), 

    command_builder3@data1	PTR unsigned char  size(2) Largest target is 4
		 -> STR_27(CODE[4]), STR_22(CODE[4]), STR_19(CODE[4]), STR_17(CODE[4]), 
		 -> STR_15(CODE[4]), 

    command_builder3@send_buffer	PTR struct buffer size(2) Largest target is 42
		 -> communications@send_buffer(BANK1[42]), 

    command_builder1@data1	PTR unsigned char  size(2) Largest target is 4
		 -> STR_12(CODE[4]), 

    command_builder1@send_buffer	PTR struct buffer size(2) Largest target is 42
		 -> communications@send_buffer(BANK1[42]), 

    xSumMatches@data	PTR unsigned char  size(2) Largest target is 42
		 -> buffer_to_chk.data_buffer(COMRAM[40]), xSumMatches@buffer_to_chk(BANK0[42]), 

    process_data_parameters@send_buffer	PTR struct buffer size(2) Largest target is 42
		 -> communications@send_buffer(BANK1[42]), 

    process_data_parameters@parameters	PTR unsigned char [10] size(2) Largest target is 50
		 -> process_data@parameters(BANK0[50]), 

    process_data_parameterize@buffer_to_parameterize	PTR struct buffer size(2) Largest target is 42
		 -> communications@receive_buffer(BANK1[42]), 

    process_data_parameterize@parameters	PTR unsigned char [10] size(2) Largest target is 50
		 -> process_data@parameters(BANK0[50]), 

    process_data@send_buffer	PTR struct buffer size(2) Largest target is 42
		 -> communications@send_buffer(BANK1[42]), 

    process_data@receive_buffer	PTR struct buffer size(2) Largest target is 42
		 -> communications@receive_buffer(BANK1[42]), 

    receive_data@receive_buffer	PTR struct buffer size(2) Largest target is 42
		 -> communications@receive_buffer(BANK1[42]), 

    resetCommunications@send_buffer	PTR struct buffer size(2) Largest target is 42
		 -> communications@send_buffer(BANK1[42]), 


Critical Paths under _main in COMRAM

    _mcpUpdatePower->_powerCalculateWatts
    _powerReduction->___lldiv
    _powerCalculateWatts->_ledTestToggle
    _ledTestToggle->_ledToggle
    _ledGoToggle->_ledToggle
    _ledToggle->_ledSet
    _mcpInit->_mcpInitF
    _mcpInitF->_delayMS10
    _ledSetAllOn->_ledSetAll
    _ledRun->_ledRunDown
    _ledRun->_ledRunUp
    _ledRunUp->_ledSetAll
    _ledRunDown->_ledSetAll
    _ledSetAllOff->_ledSetAll
    _ledSetAll->_ledSet
    _communications->_resetCommunications
    _xSumMatches->_atoi
    _atoi->___wmul
    _send_data->_SPI_send_data
    _resetCommunications->_com_command_setEnergyUsed
    _resetCommunications->_com_command_setPower
    _resetCommunications->_com_command_setVersion
    _com_command_setVersion->_command_builder3
    _com_command_setPower->_command_builder3
    _receive_data->_SPI_receive_data
    _process_data->_process_data_parameters
    _process_data_parameters->_com_command_setEnergyUsed
    _strmatch->_strcmp2
    _send_end_of_transmission->_command_builder1
    _command_builder1->_xsum_builder
    _com_command_setEnergyUsed->_command_builder3
    _ultoa->___lldiv
    _command_builder3->_xsum_builder
    _xsum_builder->_itoa
    _itoa->_utoa
    _utoa->___lwdiv
    _command_builder_add_string->_command_builder_add_char
    _atol->___lmul
    _process_data_parameterize->___wmul

Critical Paths under _Timer0_ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _communications->_process_data
    _resetCommunications->_com_command_setEnergyUsed
    _resetCommunications->_com_command_setPower
    _process_data->_xSumMatches
    _process_data_parameters->_com_command_setEnergyUsed
    _command_builder1->_xsum_builder
    _command_builder3->_xsum_builder

Critical Paths under _Timer0_ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _commRun->_communications
    _commInit->_communications

Critical Paths under _Timer0_ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Timer0_ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Timer0_ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Timer0_ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Timer0_ISR in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0  314094
                                            127 BANK0      1     1      0
                                              2 BANK1      6     6      0
                            ___llmod
                           _commInit
                            _commRun
                             _initIO
                _initInterruptsClear
                            _initOSC
                            _ledInit
                             _ledRun
                       _ledSetAllOff
                        _ledSetAllOn
                      _ledTestToggle
                            _mcpInit
                     _mcpUpdatePower
                      _timerGetCount
                          _timerInit
 ---------------------------------------------------------------------------------
 (1) _timerInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _mcpUpdatePower                                       8     8      0    9584
                                             41 COMRAM     8     8      0
                        _ledGoToggle
                      _ledTestToggle
                _powerCalculateWatts
                     _powerReduction
                      _timerGetCount
                    _timerResetCount
 ---------------------------------------------------------------------------------
 (2) _timerResetCount                                      4     2      2     391
                                             18 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _powerReduction                                       8     4      4    1780
                                             31 COMRAM     8     4      4
                            ___lldiv
                      _timerGetCount
 ---------------------------------------------------------------------------------
 (1) _timerGetCount                                        6     2      4     391
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _powerCalculateWatts                                  7     2      5    3455
                                             34 COMRAM     7     2      5
                            ___lldiv
                      _ledTestToggle
 ---------------------------------------------------------------------------------
 (3) _ledTestToggle                                        2     0      2    1824
                                             32 COMRAM     2     0      2
                          _ledToggle
 ---------------------------------------------------------------------------------
 (2) _ledGoToggle                                          2     0      2    1644
                                             32 COMRAM     2     0      2
                          _ledToggle
 ---------------------------------------------------------------------------------
 (4) _ledToggle                                            8     6      2    1523
                                             24 COMRAM     8     6      2
                             _ledSet
 ---------------------------------------------------------------------------------
 (1) _mcpInit                                              0     0      0    1936
                          _delayMS10
                           _mcpInitF
 ---------------------------------------------------------------------------------
 (2) _mcpInitF                                             1     1      0     968
                                             23 COMRAM     1     1      0
                          _delayMS10
 ---------------------------------------------------------------------------------
 (1) _ledSetAllOn                                          0     0      0    4537
                          _ledSetAll
 ---------------------------------------------------------------------------------
 (1) _ledRun                                               2     0      2   13268
                                             34 COMRAM     2     0      2
                         _ledRunDown
                           _ledRunUp
 ---------------------------------------------------------------------------------
 (2) _ledRunUp                                             4     2      2    6558
                                             30 COMRAM     4     2      2
                            ___awdiv
                          _delayMS10
                          _ledSetAll
 ---------------------------------------------------------------------------------
 (2) _ledRunDown                                           4     2      2    6558
                                             30 COMRAM     4     2      2
                            ___awdiv
                          _delayMS10
                          _ledSetAll
 ---------------------------------------------------------------------------------
 (3) _delayMS10                                            5     3      2     968
                                             18 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     805
                                             18 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _ledInit                                              0     0      0    4537
                       _ledSetAllOff
 ---------------------------------------------------------------------------------
 (1) _ledSetAllOff                                         0     0      0    4537
                          _ledSetAll
 ---------------------------------------------------------------------------------
 (2) _ledSetAll                                            6     0      6    4537
                                             24 COMRAM     6     0      6
                             _ledSet
 ---------------------------------------------------------------------------------
 (5) _ledSet                                               6     2      4    1204
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _initOSC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initInterruptsClear                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initIO                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _commRun                                              0     0      0  136393
                     _communications
 ---------------------------------------------------------------------------------
 (1) _commInit                                             0     0      0  136393
                     _communications
 ---------------------------------------------------------------------------------
 (2) _communications                                       2     2      0  136393
                                              0 BANK1      2     2      0
                       _SPISlaveInit
                       _process_data
                       _receive_data
                _resetCommunications
                          _send_data
                        _xSumMatches
 ---------------------------------------------------------------------------------
 (3) _xSumMatches                                         72    30     42    1881
                                             31 COMRAM     1     1      0
                                              0 BANK0     71    29     42
                               _atoi
 ---------------------------------------------------------------------------------
 (4) _atoi                                                 7     5      2    1115
                                             24 COMRAM     7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _send_data                                            5     3      2     415
                                             20 COMRAM     5     3      2
                      _SPI_send_data
 ---------------------------------------------------------------------------------
 (4) _SPI_send_data                                        2     2      0      71
                                             18 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _resetCommunications                                  4     2      2   77471
                                             58 COMRAM     2     0      2
                                             28 BANK0      2     2      0
          _com_command_setEnergyUsed
               _com_command_setPower
             _com_command_setVersion
 ---------------------------------------------------------------------------------
 (4) _com_command_setVersion                               2     0      2   23682
                                             56 COMRAM     2     0      2
                   _command_builder3
 ---------------------------------------------------------------------------------
 (4) _com_command_setPower                                14    12      2   26682
                                             56 COMRAM     2     0      2
                                             16 BANK0     12    12      0
                   _command_builder3
                              _ultoa
 ---------------------------------------------------------------------------------
 (3) _receive_data                                         4     2      2     598
                                             21 COMRAM     4     2      2
                   _SPI_receive_data
 ---------------------------------------------------------------------------------
 (4) _SPI_receive_data                                     3     1      2     161
                                             18 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (3) _process_data                                        56    51      5   55994
                                             71 BANK0     56    51      5
          _process_data_parameterize
            _process_data_parameters
                        _xSumMatches (ARG)
 ---------------------------------------------------------------------------------
 (4) _process_data_parameters                              5     1      4   54003
                                             58 COMRAM     1     1      0
                                             28 BANK0      4     0      4
                               _atol
          _com_command_setEnergyUsed
           _send_end_of_transmission
                           _strmatch
 ---------------------------------------------------------------------------------
 (5) _strmatch                                             7     3      4    3117
                                             29 COMRAM     7     3      4
                            _strcmp2
 ---------------------------------------------------------------------------------
 (6) _strcmp2                                             11     7      4    1007
                                             18 COMRAM    11     7      4
 ---------------------------------------------------------------------------------
 (5) _send_end_of_transmission                             2     0      2   22224
                                             52 COMRAM     2     0      2
                   _command_builder1
 ---------------------------------------------------------------------------------
 (6) _command_builder1                                     6     2      4   21743
                                             46 COMRAM     6     2      4
           _command_builder_add_char
         _command_builder_add_string
                       _xsum_builder
 ---------------------------------------------------------------------------------
 (4) _com_command_setEnergyUsed                           14    12      2   26772
                                             56 COMRAM     2     0      2
                                             16 BANK0     12    12      0
                   _command_builder3
                              _ultoa
 ---------------------------------------------------------------------------------
 (5) _ultoa                                               13     5      8    2920
                                             31 COMRAM    13     5      8
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (6) ___llmod                                              9     1      8     592
                                             18 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8    1141
                                             18 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (5) _command_builder3                                    10     2      8   23561
                                             46 COMRAM    10     2      8
           _command_builder_add_char
         _command_builder_add_string
                       _xsum_builder
 ---------------------------------------------------------------------------------
 (6) _xsum_builder                                        20    16      4   12279
                                             42 COMRAM     4     0      4
                                              0 BANK0     16    16      0
           _command_builder_add_char
         _command_builder_add_string
                               _itoa
 ---------------------------------------------------------------------------------
 (7) _itoa                                                 8     2      6    2226
                                             34 COMRAM     8     2      6
                               _utoa
 ---------------------------------------------------------------------------------
 (8) _utoa                                                 9     3      6    1723
                                             25 COMRAM     9     3      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (9) ___lwmod                                              5     1      4     412
                                             18 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (9) ___lwdiv                                              7     3      4     601
                                             18 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (7) _command_builder_add_string                          10     6      4    5635
                                             22 COMRAM    10     6      4
           _command_builder_add_char
 ---------------------------------------------------------------------------------
 (8) _command_builder_add_char                             4     1      3    3457
                                             18 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (5) _atol                                                14    10      4    1115
                                             30 COMRAM    14    10      4
                             ___lmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      99
                                             18 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) ___lmul                                              12     4      8     456
                                             18 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (4) _process_data_parameterize                           11     7      4    1481
                                             24 COMRAM    11     7      4
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     592
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _SPISlaveInit                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _Timer0_ISR                                         18    18      0       0
                                              0 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___llmod
   _commInit
     _communications
       _SPISlaveInit
       _process_data
         _process_data_parameterize
           ___wmul
         _process_data_parameters
           _atol
             ___lmul
             _isdigit
           _com_command_setEnergyUsed
             _command_builder3
               _command_builder_add_char
               _command_builder_add_string
                 _command_builder_add_char
               _xsum_builder
                 _command_builder_add_char
                 _command_builder_add_string
                   _command_builder_add_char
                 _itoa
                   _utoa
                     ___lwdiv
                     ___lwmod
             _ultoa
               ___lldiv
               ___llmod
           _send_end_of_transmission
             _command_builder1
               _command_builder_add_char
               _command_builder_add_string
                 _command_builder_add_char
               _xsum_builder
                 _command_builder_add_char
                 _command_builder_add_string
                   _command_builder_add_char
                 _itoa
                   _utoa
                     ___lwdiv
                     ___lwmod
           _strmatch
             _strcmp2
         _xSumMatches (ARG)
           _atoi
             ___wmul
             _isdigit
       _receive_data
         _SPI_receive_data
       _resetCommunications
         _com_command_setEnergyUsed
           _command_builder3
             _command_builder_add_char
             _command_builder_add_string
               _command_builder_add_char
             _xsum_builder
               _command_builder_add_char
               _command_builder_add_string
                 _command_builder_add_char
               _itoa
                 _utoa
                   ___lwdiv
                   ___lwmod
           _ultoa
             ___lldiv
             ___llmod
         _com_command_setPower
           _command_builder3
             _command_builder_add_char
             _command_builder_add_string
               _command_builder_add_char
             _xsum_builder
               _command_builder_add_char
               _command_builder_add_string
                 _command_builder_add_char
               _itoa
                 _utoa
                   ___lwdiv
                   ___lwmod
           _ultoa
             ___lldiv
             ___llmod
         _com_command_setVersion
           _command_builder3
             _command_builder_add_char
             _command_builder_add_string
               _command_builder_add_char
             _xsum_builder
               _command_builder_add_char
               _command_builder_add_string
                 _command_builder_add_char
               _itoa
                 _utoa
                   ___lwdiv
                   ___lwmod
       _send_data
         _SPI_send_data
       _xSumMatches
         _atoi
           ___wmul
           _isdigit
   _commRun
     _communications
       _SPISlaveInit
       _process_data
         _process_data_parameterize
           ___wmul
         _process_data_parameters
           _atol
             ___lmul
             _isdigit
           _com_command_setEnergyUsed
             _command_builder3
               _command_builder_add_char
               _command_builder_add_string
                 _command_builder_add_char
               _xsum_builder
                 _command_builder_add_char
                 _command_builder_add_string
                   _command_builder_add_char
                 _itoa
                   _utoa
                     ___lwdiv
                     ___lwmod
             _ultoa
               ___lldiv
               ___llmod
           _send_end_of_transmission
             _command_builder1
               _command_builder_add_char
               _command_builder_add_string
                 _command_builder_add_char
               _xsum_builder
                 _command_builder_add_char
                 _command_builder_add_string
                   _command_builder_add_char
                 _itoa
                   _utoa
                     ___lwdiv
                     ___lwmod
           _strmatch
             _strcmp2
         _xSumMatches (ARG)
           _atoi
             ___wmul
             _isdigit
       _receive_data
         _SPI_receive_data
       _resetCommunications
         _com_command_setEnergyUsed
           _command_builder3
             _command_builder_add_char
             _command_builder_add_string
               _command_builder_add_char
             _xsum_builder
               _command_builder_add_char
               _command_builder_add_string
                 _command_builder_add_char
               _itoa
                 _utoa
                   ___lwdiv
                   ___lwmod
           _ultoa
             ___lldiv
             ___llmod
         _com_command_setPower
           _command_builder3
             _command_builder_add_char
             _command_builder_add_string
               _command_builder_add_char
             _xsum_builder
               _command_builder_add_char
               _command_builder_add_string
                 _command_builder_add_char
               _itoa
                 _utoa
                   ___lwdiv
                   ___lwmod
           _ultoa
             ___lldiv
             ___llmod
         _com_command_setVersion
           _command_builder3
             _command_builder_add_char
             _command_builder_add_string
               _command_builder_add_char
             _xsum_builder
               _command_builder_add_char
               _command_builder_add_string
                 _command_builder_add_char
               _itoa
                 _utoa
                   ___lwdiv
                   ___lwmod
       _send_data
         _SPI_send_data
       _xSumMatches
         _atoi
           ___wmul
           _isdigit
   _initIO
   _initInterruptsClear
   _initOSC
   _ledInit
     _ledSetAllOff
       _ledSetAll
         _ledSet
   _ledRun
     _ledRunDown
       ___awdiv
       _delayMS10
       _ledSetAll
         _ledSet
     _ledRunUp
       ___awdiv
       _delayMS10
       _ledSetAll
         _ledSet
   _ledSetAllOff
     _ledSetAll
       _ledSet
   _ledSetAllOn
     _ledSetAll
       _ledSet
   _ledTestToggle
     _ledToggle
       _ledSet
   _mcpInit
     _delayMS10
     _mcpInitF
       _delayMS10
   _mcpUpdatePower
     _ledGoToggle
       _ledToggle
         _ledSet
     _ledTestToggle
       _ledToggle
         _ledSet
     _powerCalculateWatts
       ___lldiv
       _ledTestToggle
         _ledToggle
           _ledSet
     _powerReduction
       ___lldiv
       _timerGetCount
     _timerGetCount
     _timerResetCount
   _timerGetCount
   _timerInit

 _Timer0_ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      8      5C       6       35.9%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     80      A0       4      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3C      4C       1       80.9%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     148       9        0.0%
DATA                 0      0     148      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Apr 02 11:51:13 2020

                                       _SPISlaveInit 1DAE                                                   l22 1CA8  
                                                 l23 1C84                                                   l25 1C90  
                                    ??_timerGetCount 0017                                                   l26 1C9C  
                                                 l90 196E                                                   l85 193A  
                                                 l86 1918                                                   l87 195E  
                                                 l88 1926                                                   l89 192C  
                           __size_of_timerResetCount 002A                                         ___awdiv@sign 0018  
                                ___wmul@multiplicand 0015                                       ??_ledSetAllOff 001F  
                                       __CFG_CP0$OFF 000000                                         __CFG_CP1$OFF 000000  
                                       __CFG_CP2$OFF 000000                                         __CFG_CP3$OFF 000000  
                                                l210 115C                                                  l212 110C  
                                                l206 10FA                                                  l240 1312  
                                                l224 15AA                                                  l216 1178  
                                                l208 1148                                                  l225 1578  
                                                l314 1B78                                                  l218 118C  
                                                l251 0AC4                                                  l235 1262  
                                                l227 1586                                                  l244 1EEC  
                                                l228 1594                                                  l324 172C  
                                                l253 0A86                                                  l237 12A6  
                                                l229 15A0                                                  l318 16C4  
                                                l334 0B9C                                                  l350 202E  
                                                l255 0AB6                                                  l319 167E  
                                                l335 0B32                                                  l351 2032  
                                                l239 1300                                                  l327 178C  
                                                l256 09F6                                                  l344 0C0A  
                                                l336 0B66                                                  l280 07C0  
                                                l600 1F74                                                  l249 09C4  
                                                l601 1F62                                                  l258 0A08  
                                                l346 0C42                                                  l338 0B98  
                                                l282 07EE                                                  l266 0678  
                                                l290 0F86                                                  l259 0A5C  
                                                l355 209A                                                  l284 081A  
                                                l276 0764                                                  l268 0702  
                                                l292 0FC4                                                  l293 0FCC  
                                                l541 089E                                                  l278 0792  
                                                l550 0940                                                  l615 1BEA  
                                                l295 1000                                                  l551 0918  
                                                l543 08A2                                                  l616 1BFE  
                                                l800 17A4                                                  l560 1902  
                                                l480 0F1E                                                  l289 0F56  
                                                l801 17B4                                                  l553 095C  
                                                l554 0976                                                  l803 17D2  
                                                l475 0E6C                                                  l804 17CA  
                                                l548 0958                                                  l477 0EB0  
                                                l566 1622                                                  l807 17F2  
                                                l559 18CA                                                  l808 17FC  
                                                l809 180A                                                  l770 104A  
                                                l773 1096                                                  l790 0E24  
                                                l774 105C                                                  l767 100A  
                                                l784 0D82                                                  l776 10C8  
                                                l768 1006                                                  l962 20F4  
                                                l787 0DE0                                                  l788 0D8C  
                                                l972 149A                                                  l974 14D4  
                                                l975 1512                                                  l968 1E1A  
                                       __CFG_CPB$OFF 000000                                         __CFG_CPD$OFF 000000  
                                    ?_powerReduction 0020                                                  wreg 000FE8  
                            __size_of_mcpUpdatePower 0182                                         __CFG_LVP$OFF 000000  
                              ??_resetCommunications 007C                                                 l1002 1842  
                                               l1003 1836                                                 l1012 1A16  
                                               l1013 1A0A                                                 l1006 1876  
                                               l1007 1884                                                 l1016 1A3E  
                                               l1017 1A4C                                                 l1070 1C46  
                                               l1055 0C5C                                                 l1080 1E46  
                                               l1073 1C6E                                                 l1057 0CB4  
                                               l1074 1C78                                                 l1058 0D1E  
                                               l1083 1E66                                                 l1084 1E70  
                                               l1069 1C4E                                                 l1079 1E4E  
                                               l4055 0AC4                                                 l4129 1092  
                                               l4449 160E                                                 l4717 0EA0  
                                               l4591 0918                                                 STR_1 064A  
                                               STR_2 064E                                                 STR_3 0601  
                    __size_of_com_command_setVersion 0026                                                 STR_4 0617  
                                               STR_5 062F                                                 STR_6 0634  
                                               STR_7 0624                                                 STR_8 0617  
                                               STR_9 061E                                                 u2400 1C52  
                                               u2500 16F0                                                 u2430 1E52  
                                               u3401 1126                                                 u2507 16E6  
                                               u2540 1846                                                 _IPR1 000F9F  
                                               u2630 0BD4                                                 _IPR2 000FA2  
                                               _PIE1 000F9D                                                 _IPR3 000FA5  
                                               u3360 17D6                                                 _PIE2 000FA0  
                                               _IPR4 000F7C                                                 _PIE3 000FA3  
                                               _IPR5 000F7F                                                 u2490 16B2  
                                               u2570 1A1A                                                 _PIE4 000F7A  
                                               _PIE5 000F7D                                                 u3460 160E  
                                               u2910 09C2                                                 u3550 0EA0  
                                               u3607 19A0                                                 u2497 16A8  
                                               u3617 19B2                                                 u2755 1C8C  
                                               u3627 19C8                                                 u2780 1FB2  
                                               u2756 1C8E                                                 u2765 1C98  
                                               u3637 19DE                                                 u2790 1FB4  
                                               u2766 1C9A                                                 u2775 1CA4  
                                               u3647 1F68                                                 u2776 1CA6  
                                               u2880 1936                                                 u3657 1540  
                                               u2881 1930                                                 u3587 0E78  
                                               u2868 191E                                                 u3597 0E8E  
                                               _PIR1 000F9E                                                 _PIR2 000FA1  
                                               _PIR3 000FA4                                                 _PIR4 000F7B  
                                               _PIR5 000F7E                                          main@oneShot 00FC  
                                               _atoi 1004                                                 _atol 0D42  
                                               _main 0E36                                                 _itoa 1DF6  
                                               fsr0h 000FEA                                                 fsr1h 000FE2  
                                               indf0 000FEF                                                 fsr2h 000FDA  
                                               fsr0l 000FE9                                                 indf1 000FE7  
                                               indf2 000FDF                                                 fsr1l 000FE1  
                                               fsr2l 000FD9                                                 btemp 004D  
                                               _utoa 1492                                        __CFG_BORV$190 000000  
                             __size_of_SPI_send_data 0020                                                 prodh 000FF4  
                                               prodl 000FF3                                                 start 00DA  
                                      __CFG_IESO$OFF 000000                              communications@firstTime 0155  
                      __size_of_com_command_setPower 004A                                         ___param_bank 000000  
                    mcpUpdatePower@timerHFoutLast_ms 00F0                                 __end_of_xsum_builder 1B24  
                                     _communications 10D2                                      ??_ledTestToggle 0023  
                                              ?_atoi 0019                                                ?_atol 001F  
                                              ?_main 0001                                                ?_itoa 0023  
                                    __end_of___awdiv 1814                                                STR_10 0639  
                                              STR_11 060D                                                STR_12 064A  
                                              STR_21 063E                                                STR_14 062A  
                                              STR_15 064E                                                STR_16 0624  
                                              STR_24 0642                                                STR_17 064E  
                                              STR_18 0617                                                STR_27 064E  
                                              STR_28 060D                                                STR_29 0646  
                                    __end_of___lldiv 1896                                                ?_utoa 001A  
                                    ___awdiv@divisor 0015                                      __end_of___llmod 1A5E  
                                     __CFG_DEBUG$OFF 000000                                      __end_of___lwdiv 1C82  
                                    __end_of___lwmod 1E7A                                    ?_command_builder1 002F  
                                  ?_command_builder3 002F                                      ___awdiv@counter 0017  
                                              _TMR0H 000FD7                                                _TMR0L 000FD6  
                                _initInterruptsClear 1CCE                                        __CFG_WRT0$OFF 000000  
                                      __CFG_WRT1$OFF 000000                                        __CFG_WRT2$OFF 000000  
                                ___lmul@multiplicand 0017                                        __CFG_WRT3$OFF 000000  
                       ??_command_builder_add_string 001B                                   ??_command_builder1 0033  
                                 ??_command_builder3 0037                                       __CFG_EBTR0$OFF 000000  
                                     __CFG_FCMEN$OFF 000000                                       __CFG_EBTR1$OFF 000000  
                                    __end_of_ledInit 2170                                       __CFG_EBTR2$OFF 000000  
                                     __CFG_EBTR3$OFF 000000                                      __end_of_commRun 2178  
                 process_data_parameters@send_buffer 007E                            powerReduction@countReduce 0041  
                                      __CFG_WRTB$OFF 000000                                        __CFG_WRTC$OFF 000000  
                                      __CFG_WRTD$OFF 000000                                      __end_of_mcpInit 200E  
                                     __CFG_EBTRB$OFF 000000                                      __end_of_initOSC 212E  
                                    __end_of_isdigit 20FC                                   __CFG_MCLRE$EXTMCLR 000000  
                                              atoi@a 001E                                                atol@a 0028  
                                              atol@c 002C                                                atoi@s 0019  
                                              atol@s 001F                                                _ultoa 0C4C  
                                              pclath 000FFA                                   main@timerHeartbeat 0156  
                                              tablat 000FF5                                                plusw0 000FEB  
                                              plusw2 000FDB                                                utoa@c 0022  
                                              utoa@v 0020                                                status 000FD8  
                                              wtemp6 004E                                      __end_of_strcmp2 0C4C  
                                     __CFG_HFOFST$ON 000000                                       __CFG_PBADEN$ON 000000  
                        ??_process_data_parameterize 001D                 com_command_setEnergyUsed@send_buffer 0039  
                               ?_initInterruptsClear 0001                        command_builder_add_string@inx 001F  
                                       ?_xSumMatches 0060                                      __initialization 1EF4  
                           xSumMatches@xsumRecieving 009E                                         __end_of_atoi 10D2  
                                       __end_of_atol 0E36                                         __end_of_main 0F26  
                                       __end_of_itoa 1E38                               __end_of_communications 1194  
                                       __end_of_utoa 1536                               _com_command_setVersion 2036  
                __size_of_command_builder_add_string 0094                                     _SPI_receive_data 200E  
                         powerReduction@timerLast_ms 0020                         command_builder_add_char@data 0015  
                                             ??_atoi 001B                                               ??_atol 0023  
                                             ??_main 00DF                                  ledRunUp@ledRunDelay 001F  
                                             ??_itoa 0029                                        _SPI_send_data 2082  
                                             ??_utoa 0020                                        __activetblptr 000002  
                            _process_data_parameters 0654                                    ??_timerResetCount 0015  
                               __size_of_ledGoToggle 0002                                     receive_data@data 0019  
                                   ___llmod@dividend 0013                                     ___awdiv@dividend 0013  
                                             _ANSELA 000F38                                               _ANSELB 000F39  
                                             _ANSELC 000F3A                                               ?_ultoa 0020  
                                     __CFG_WDTEN$OFF 000000                                               _INTCON 000FF2  
                              SPI_send_data@sendGood 0014                                 __size_of_ledSetAllOn 001E  
                               __end_of_ledSetAllOff 20DE                                ??_initInterruptsClear 0013  
                                         _Timer0_ISR 0008                                       __CFG_XINST$OFF 000000  
                                   __end_of_commInit 2180                                     __end_of_ledRunUp 13D4  
                       powerCalculateWatts@calcWatts 0028                                     __end_of_mcpInitF 19F8  
                                             ___lmul 1BDA                                               ___wmul 205C  
                                          ??___awdiv 0017                                      ?_communications 0001  
                                     __CFG_STVREN$ON 000000                                            ??___lldiv 001B  
                                          ??___llmod 001B                                            ??___lwdiv 0017  
                                             _ledSet 1C82                                            ??___lwmod 0017  
                                             _ledRun 20FC                                               _initIO 2144  
                                             clear_0 1EFA                                               clear_1 1F06  
                                             clear_2 1F12                                     ___awdiv@quotient 0019  
                       powerReduction@timerReduce_ms 0024                                       ?_SPI_send_data 0001  
                                          ??_ledInit 001F                                            ??_commRun 003D  
                         ?_com_command_setEnergyUsed 0039                                            ??_mcpInit 0019  
                                          ??_initOSC 0013                            _process_data_parameterize 09A0  
                                             itoa@cp 0029                                            ??_isdigit 0013  
                                     _mcpUpdatePower 081E                                    ledToggle@getValue 001F  
                                       __mediumconst 0000                                               tblptrh 000FF7  
                                             tblptrl 000FF6                                               tblptru 000FF8  
                                             ultoa@c 002C                             com_command_setPower@temp 0070  
                                             ultoa@v 0028                                            ??_strcmp2 0017  
                                   __end_of_strmatch 1FBA                                     xsum_builder@xsum 002D  
                                      ?_receive_data 0016                                           __accesstop 0060  
                            __end_of__initialization 1F18                                    ledToggle@setValue 001D  
                    com_command_setPower@send_buffer 0039                              timerGetCount@timerIndex 0013  
                                      ___rparam_used 000001                                    SPI_send_data@data 0013  
                                  ledRunUp@delay10ms 0021                                __size_of_xsum_builder 0062  
                                     __pcstackCOMRAM 0001                                   __size_of_delayMS10 0032  
                         receive_data@receive_buffer 0016                                     ??_powerReduction 0024  
                                      __end_of_ultoa 0D42                            ??_process_data_parameters 003B  
                       communications@receive_buffer 012A                               __end_of_mcpUpdatePower 09A0  
              command_builder_add_string@data_string 0019                   __end_of_command_builder_add_string 1700  
                         _command_builder_add_string 166C                                   __size_of_ledSetAll 003E  
                                 __size_of_ledToggle 0076                                      ledToggle@ledNum 0019  
                                 xSumMatches@matches 009F                                              ??_ultoa 0028  
                                 xSumMatches@recXsum 009C                                           __pbssBANK0 00E0  
                                         __pbssBANK1 0100                                       ??_receive_data 0018  
                                       _xsum_builder 1AC2                                      __CFG_PLLCFG$OFF 000000  
                                       strcmp2@match 001A                                          ?_Timer0_ISR 0001  
                                 __CFG_CCP2MX$PORTC1 000000                         __size_of_powerCalculateWatts 0080  
                                            ?___lmul 0013                                 command_builder1@xsum 0033  
                                            ?___wmul 0013                                 command_builder3@xsum 0037  
                                 __CFG_CCP3MX$PORTB5 000000                                 __size_of_xSumMatches 00DE  
                                            ?_ledSet 0013                                      ??_SPI_send_data 0013  
                                            ?_ledRun 0023                                   __size_of_send_data 0090  
                                            ?_initIO 0001  process_data_parameters@end_of_transmission_received 003B  
         communications@end_of_transmission_received 00FF                                       ___lmul@product 001B  
                              __end_of_timerGetCount 1F58                                      ?_mcpUpdatePower 0001  
                        __end_of_resetCommunications 15D2                                   __size_of_timerInit 0064  
                                            _INTCON2 000FF1                                              _INTCON3 000FF0  
                                         _ledRunDown 13D4                         __end_of_com_command_setPower 1D64  
                                  __CFG_PRICLKEN$OFF 000000                             _send_end_of_transmission 212E  
                                            _SSP2BUF 000F6F                                __size_of_ledSetAllOff 001E  
                                          ?_commInit 0001                                            ?_ledRunUp 001F  
                           _command_builder_add_char 1B24                                            ?_mcpInitF 0001  
                                  __end_of_delayMS10 1F8A                      __end_of_process_data_parameters 081E  
                           __end_of_SPI_receive_data 2036                            __size_of_command_builder1 005A  
                          __size_of_command_builder3 00C2                                  ledRunDown@delay10ms 0021  
    process_data_parameterize@buffer_to_parameterize 001B                                      __CFG_PWRTEN$OFF 000000  
                                            __Hparam 0000                              ?_com_command_setVersion 0039  
                                            __Lparam 0000                                    __end_of_ledSetAll 1EB8  
                                  __end_of_ledToggle 198C                                      _timerResetCount 1FBA  
                                            ___awdiv 1790                                      __size_of___lmul 0056  
           process_data_parameterize@parameter_index 0022                                              ___lldiv 1814  
                                    __size_of___wmul 0026                                              ___llmod 19F8  
                                            ___lwdiv 1C30                                              ___lwmod 1E38  
                                       __psmallconst 0600                                      __size_of_ledSet 004C  
                                    __size_of_ledRun 001A                                 SPI_receive_data@data 0013  
                                    __size_of_initIO 0012                                              __pcinit 1EF4  
                                            __ramtop 0600                                            ?_strmatch 001E  
                                            __ptext0 0E36                                              __ptext1 1A5E  
                                            __ptext2 081E                                              __ptext3 1FBA  
                                            __ptext4 15D2                                              __ptext5 1F26  
                                            __ptext6 1896                                              _ledInit 2164  
                                            __ptext7 2156                                              __ptext8 2180  
                                            __ptext9 1916                                              _commRun 2170  
                                          _T0CONbits 000FD5                                         _ledSetAllOff 20C0  
                                            _mcpInit 1FE4                                              _initOSC 2116  
                              __end_of_ledTestToggle 2164                                              _isdigit 20DE  
                                __size_of_Timer0_ISR 00D2                                           ??_commInit 003D  
                                            main@inx 015A                                              _strcmp2 0B20  
                                         ??_ledRunUp 0021                                 end_of_initialization 1F18  
                                         ??_mcpInitF 0018                   __size_of_process_data_parameterize 0180  
                                  __end_of_send_data 1790                                              itoa@buf 0023  
                                            itoa@val 0025                                        __Lmediumconst 0000  
                     __end_of_com_command_setVersion 205C                                     ??_communications 003D  
                                  __end_of_timerInit 1AC2                                      ___lldiv@divisor 0017  
                                    ___lldiv@counter 001F          process_data_parameterize@parameter_position 0023  
                                            postdec2 000FDD                                              postinc0 000FEE  
                                            postinc1 000FE6                                              postinc2 000FDE  
                                            utoa@buf 001A                                              utoa@val 001C  
                          xSumMatches@recXsumPointer 00A0                                receive_data@my_status 004B  
                               __end_of_receive_data 1316                                           ??_strmatch 0022  
                                          _PORTAbits 000F80                                            _PORTBbits 000F81  
                                          _PORTCbits 000F82                                        ??_ledGoToggle 0023  
                    communications@last_state_active 00FD                          ??_com_command_setEnergyUsed 003B  
                                      ?_process_data 00A7                                   ledSetAll@led1Value 0019  
                                 ledSetAll@led2Value 001B                                   ledSetAll@led3Value 001D  
                              xSumMatches@recXsumbuf 008A                                          ?_ledRunDown 001F  
                                          _TRISAbits 000F92                                            _TRISBbits 000F93  
                                          _TRISCbits 000F94                                        ??_ledSetAllOn 001F  
                           xSumMatches@buffer_to_chk 0060                           process_data@receive_buffer 00A7  
                        __end_of_initInterruptsClear 1D1A                    __end_of_process_data_parameterize 0B20  
                            __end_of_timerResetCount 1FE4                                 _com_command_setPower 1D1A  
                communications@receive_current_state 00FE                                        ?_SPISlaveInit 0001  
                                     __end_of___lmul 1C30                                       __end_of___wmul 2082  
                                     __end_of_ledSet 1CCE                                       __end_of_ledRun 2116  
              command_builder_add_string@send_buffer 0017                                       __end_of_initIO 2156  
                                     ??_process_data 003C                          ?_command_builder_add_string 0017  
                                start_initialization 1EF4                                  _powerCalculateWatts 1896  
                                __end_of_ledGoToggle 2182                         resetCommunications@commState 0047  
                                   _command_builder1 1B80                                     _command_builder3 1194  
                          _com_command_setEnergyUsed 1D64                                      ___llmod@divisor 0017  
                                    ___llmod@counter 001B                    com_command_setVersion@send_buffer 0039  
                                __end_of_ledSetAllOn 20C0                                         ??_Timer0_ISR 0001  
                               send_data@send_buffer 0015                                         xSumMatches@i 00A5  
                              ?_com_command_setPower 0039                                  __size_of_ledRunDown 00BE  
                               ?_powerCalculateWatts 0023                                       ??_SPISlaveInit 0013  
                                           ??___lmul 001B                                     ??_mcpUpdatePower 002A  
                                           ??___wmul 0017                  send_end_of_transmission@send_buffer 0035  
                                           ??_ledSet 0017                                             ??_ledRun 0025  
                                           ??_initIO 0013                           ??_send_end_of_transmission 0037  
                         ??_command_builder_add_char 0016                                          __pbssCOMRAM 003D  
                                      __pcstackBANK0 0060                                        __pcstackBANK1 0154  
                           SPI_receive_data@recvGood 0015                                   __end_of_Timer0_ISR 00DA  
                                       _isdigit$2441 0014                                    __size_of_commInit 0008  
                                  __size_of_ledRunUp 00BE                                    __size_of_mcpInitF 006C  
                                     delayMS10@count 0013                                    ?_SPI_receive_data 0013  
                                          _delayMS10 1F58                                     ?_timerResetCount 0013  
                      com_command_setEnergyUsed@temp 0070                             powerCalculateWatts@outHF 0027  
                                      ??_xSumMatches 0020                                   ??_SPI_receive_data 0015  
                                       delayMS10@inx 0016                                     ___lwdiv@dividend 0013  
                              ??_powerCalculateWatts 0028                                command_builder1@data1 0031  
                        command_builder1@send_buffer 002F                             ?_process_data_parameters 007C  
                              __size_of_receive_data 00C0                                            __pintcode 0008  
                              command_builder3@data1 0031                                command_builder3@data2 0033  
                              command_builder3@data3 0035                                             ?___awdiv 0013  
                                           ?___lldiv 0013                                ledRunDown@ledRunDelay 001F  
                                           ?___llmod 0013                                             ?___lwdiv 0013  
                                           ?___lwmod 0013                                            _ledSetAll 1E7A  
                                          _ledToggle 1916                           mcpUpdatePower@meterWattsHF 0045  
                              __end_of_SPI_send_data 20A2                           mcpUpdatePower@meterWattsLF 0043  
                                           ?_ledInit 0001                                             ?_commRun 0001  
                                           ?_mcpInit 0001                                             ?_initOSC 0001  
                                        __smallconst 0600                                          _ledGoToggle 2180  
                     resetCommunications@send_buffer 003B                                             ?_isdigit 0001  
                                  __size_of_strmatch 0030                              xsum_builder@send_buffer 002B  
                         mcpUpdatePower@oneShotHFout 004A                                    send_data@send_end 0019  
                         mcpUpdatePower@oneShotLFout 0049                              __size_of_powerReduction 009A  
                                   ___lwdiv@quotient 0018                                             ?_strcmp2 0013  
                       __size_of_resetCommunications 009C                                          _ledSetAllOn 20A2  
                                     __size_of_ultoa 00F6                                       strmatch@result 0022  
                process_data_parameterize@parameters 0019                                         _receive_data 1256  
                                     ___wmul@product 0017                                             _LATBbits 000F8A  
                                           _LATCbits 000F8B                               __size_of_timerGetCount 0032  
                                         ?_delayMS10 0013                                 __end_of_process_data 1EF4  
                                          _send_data 1700                               ??_com_command_setPower 003B  
                  process_data_parameters@parameters 007C                                  _meterEnergyUsedPart 00F4  
                                           _RCONbits 000FD0                                     __CFG_WDTPS$32768 000000  
                                          _timerInit 1A5E                                             _SSP2CON3 000F69  
                                         ?_ledSetAll 0019                                           ?_ledToggle 0019  
                                __end_of_xSumMatches 1004                                           _ADCON0bits 000FC2  
                                  ___wmul@multiplier 0013                  command_builder_add_char@send_buffer 0013  
                                       ??_ledRunDown 0021                                    ledGoToggle@ledNum 0021  
                                  ledRun@ledRunDelay 0023                                    ___lmul@multiplier 0013  
                               __end_of_SPISlaveInit 1DF6                                      xSumMatches@data 00A2  
           process_data@end_of_transmission_received 00DE                                      xSumMatches@xsum 009A  
                                         ?_send_data 0015                                             __Hrparam 0000  
                             __size_of_ledTestToggle 000E                          mcpUpdatePower@timerHFout_ms 002E  
                                           __Lrparam 0000                                   __CFG_BOREN$SBORDIS 000000  
                                 __end_of_ledRunDown 1492                          command_builder3@send_buffer 002F  
                                  __CFG_P2BMX$PORTB5 000000                                           ?_timerInit 0001  
                        mcpUpdatePower@timerLFout_ms 002A                   __size_of_com_command_setEnergyUsed 004A  
                                   __size_of___awdiv 0084                     __end_of_send_end_of_transmission 2144  
                                   __size_of___lldiv 0082                                     __size_of___llmod 0066  
                                   __size_of___lwdiv 0052                                     __size_of___lwmod 0042  
                   __end_of_command_builder_add_char 1B80                             __end_of_command_builder1 1BDA  
                           __end_of_command_builder3 1256                                           _ANSELAbits 000F38  
                                         _ANSELBbits 000F39                                        _timerGetCount 1F26  
                                   __size_of_ledInit 000C                                     __size_of_commRun 0008  
                                   __size_of_mcpInit 002A                                     __size_of_initOSC 0018  
                                         strcmp2@inx 001C                         process_data_parameterize@inx 0020  
                                   __size_of_isdigit 001E                                      ___lwdiv@divisor 0015  
                                      _timerCount_ms 00E0                                      ___lwdiv@counter 0017  
                                           __ptext10 1FE4                                             __ptext11 198C  
                                           __ptext20 1E7A                                             __ptext12 20A2  
                                           __ptext21 1C82                                             __ptext13 20FC  
                                           __ptext30 1700                                             __ptext22 2116  
                                           __ptext14 1316                                             __ptext31 2082  
                                           __ptext23 1CCE                                             __ptext15 13D4  
                                           __ptext40 0B20                                             __ptext32 1536  
                                           __ptext24 2144                                             __ptext16 1F58  
                                           __ptext41 212E                                             __ptext33 2036  
                                           __ptext25 2170                                             __ptext17 1790  
                                           __ptext50 1492                                             __ptext42 1B80  
                                           __ptext34 1D1A                                             __ptext26 2178  
                                           __ptext18 2164                                             __ptext51 1E38  
                                           __ptext43 1D64                                             __ptext35 1256  
                                           __ptext27 10D2                                             __ptext19 20C0  
                                           __ptext60 1DAE                                             __ptext52 1C30  
                                           __ptext44 0C4C                                             __ptext36 200E  
                                           __ptext28 0F26                                             __ptext53 166C  
                                           __ptext45 19F8                                             __ptext37 1EB8  
                                           __ptext29 1004                                             __ptext54 1B24  
                                           __ptext46 1814                                             __ptext38 0654  
                                           __ptext55 0D42                                             __ptext47 1194  
                                           __ptext39 1F8A                                             __ptext56 20DE  
                                           __ptext48 1AC2                                             __ptext57 1BDA  
                                           __ptext49 1DF6                                             __ptext58 09A0  
                                           __ptext59 205C                                             _commInit 2178  
                                           _ledRunUp 1316                                         _SSP2CON1bits 000F6C  
                                       _SSP2CON3bits 000F69                                             _mcpInitF 198C  
                                   __size_of_strcmp2 012C                                          _OSCCON2bits 000FD2  
                                      ?_xsum_builder 002B                              process_data@xSumMatches 00AB  
                                      __size_of_atoi 00CE                                        __size_of_atol 00F4  
                                      __size_of_main 00F0                                        strmatch@match 0024  
                                      __size_of_itoa 0042                          powerCalculateWatts@timer_ms 0023  
                                      __size_of_utoa 00A4                                  ledTestToggle@ledNum 0021  
                                        ??_delayMS10 0015                           ?_process_data_parameterize 0019  
                       __size_of_initInterruptsClear 004C                                          _xSumMatches 0F26  
                             _meterEnergyUsed_global 003D                                             int$flags 004D  
                                           atoi@sign 001D                            timerResetCount@timerIndex 0013  
                                           atol@sign 0027                                          ??_ledSetAll 001F  
                                        ??_ledToggle 001B                    __end_of_com_command_setEnergyUsed 1DAE  
                            __size_of_communications 00C2                                             _strmatch 1F8A  
                                       _SSP2STATbits 000F6D                                       ?_timerGetCount 0013  
                            process_data@send_buffer 00A9                                          _OSCTUNEbits 000F9B  
                                         _INTCONbits 000FF2                                        _ledTestToggle 2156  
                                     _powerReduction 15D2                                             itoa@base 0027  
                                           isdigit@c 0015                                            ultoa@base 0026  
                           ??_com_command_setVersion 003B                                       ??_xsum_builder 002F  
                              __size_of_process_data 003C                                             intlevel2 0000  
                             process_data@parameters 00AC                                     ___lwmod@dividend 0013  
                                   ___lldiv@dividend 0013                        communications@no_more_to_send 0154  
                                        ??_send_data 0017                                            strmatch@a 001E  
                                          strmatch@b 0020                                           _OSCCONbits 000FD3  
                  command_builder_add_string@xsumAdd 001D                                       ledSet@setValue 0015  
                                        ??_timerInit 0013                                  _resetCommunications 1536  
                          __size_of_SPI_receive_data 0028                                             utoa@base 001E  
                                           ultoa@buf 0020                                        ?_ledSetAllOff 0001  
                                           ultoa@val 0022                                         ?_ledGoToggle 0021  
                                           strcmp2@a 0013                                             strcmp2@b 0015  
                                     ?_ledTestToggle 0021                               __end_of_powerReduction 166C  
                                   ___lldiv@quotient 001B                                         _process_data 1EB8  
                                  _SPI_transmit_wait 004C                                      ___lwmod@divisor 0015  
                              __size_of_SPISlaveInit 0048                            communications@send_buffer 0100  
                                    ___lwmod@counter 0017                     __size_of_process_data_parameters 01CA  
                                  _meterWatts_global 00F8                                    __CFG_T3CMX$PORTC0 000000  
                             xSumMatches@currentData 00A4                                 ?_resetCommunications 003B  
                                       ?_ledSetAllOn 0001                                         ledSet@ledNum 0013  
                  __size_of_send_end_of_transmission 0016                            ?_send_end_of_transmission 0035  
                        __end_of_powerCalculateWatts 1916                                    __CFG_FOSC$INTIO67 000000  
                  __size_of_command_builder_add_char 005C                            ?_command_builder_add_char 0013  
                                xsum_builder@xsumBuf 0060  
