

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Feb 15 17:15:08 2020

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F25K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	text45,global,reloc=2,class=CODE,delta=1
    59                           	psect	text46,global,reloc=2,class=CODE,delta=1
    60                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    61                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    62                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text51,global,reloc=2,class=CODE,delta=1
    65                           	psect	text52,global,reloc=2,class=CODE,delta=1
    66                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text54,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text56,global,reloc=2,class=CODE,delta=1
    70                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=1
    71                           	psect	text58,global,reloc=2,class=CODE,delta=1
    72                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    73                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    74                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    75                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    76  0000                     
    77                           ; Version 1.45
    78                           ; Generated 16/11/2017 GMT
    79                           ; 
    80                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    81                           ; All rights reserved.
    82                           ; 
    83                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    84                           ; 
    85                           ; Redistribution and use in source and binary forms, with or without modification, are
    86                           ; permitted provided that the following conditions are met:
    87                           ; 
    88                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    89                           ;        conditions and the following disclaimer.
    90                           ; 
    91                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    92                           ;        of conditions and the following disclaimer in the documentation and/or other
    93                           ;        materials provided with the distribution.
    94                           ; 
    95                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    96                           ;        software without specific prior written permission.
    97                           ; 
    98                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    99                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   100                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   101                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   102                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   103                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   104                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   105                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   106                           ; 
   107                           ; 
   108                           ; Code-generator required, PIC18F25K22 Definitions
   109                           ; 
   110                           ; SFR Addresses
   111  0000                     _ANSELC	set	3898
   112  0000                     _ANSELB	set	3897
   113  0000                     _ANSELA	set	3896
   114  0000                     _TMR0L	set	4054
   115  0000                     _TMR0H	set	4055
   116  0000                     _INTCONbits	set	4082
   117  0000                     _T0CONbits	set	4053
   118  0000                     _PORTAbits	set	3968
   119  0000                     _TRISAbits	set	3986
   120  0000                     _IPR5	set	3967
   121  0000                     _IPR4	set	3964
   122  0000                     _IPR3	set	4005
   123  0000                     _IPR2	set	4002
   124  0000                     _IPR1	set	3999
   125  0000                     _PIE5	set	3965
   126  0000                     _PIE4	set	3962
   127  0000                     _PIE3	set	4003
   128  0000                     _PIE2	set	4000
   129  0000                     _PIE1	set	3997
   130  0000                     _PIR5	set	3966
   131  0000                     _PIR4	set	3963
   132  0000                     _PIR3	set	4004
   133  0000                     _PIR2	set	4001
   134  0000                     _PIR1	set	3998
   135  0000                     _RCONbits	set	4048
   136  0000                     _INTCON3	set	4080
   137  0000                     _INTCON2	set	4081
   138  0000                     _INTCON	set	4082
   139  0000                     _ADCON0bits	set	4034
   140  0000                     _OSCTUNEbits	set	3995
   141  0000                     _OSCCON2bits	set	4050
   142  0000                     _OSCCONbits	set	4051
   143  0000                     _SSP2CON3bits	set	3945
   144  0000                     _SSP2CON3	set	3945
   145  0000                     _SSP2BUF	set	3951
   146  0000                     _SSP2STATbits	set	3949
   147  0000                     _SSP2CON1bits	set	3948
   148  0000                     _PORTCbits	set	3970
   149  0000                     _PORTBbits	set	3969
   150  0000                     _LATCbits	set	3979
   151  0000                     _LATBbits	set	3978
   152  0000                     _TRISCbits	set	3988
   153  0000                     _TRISBbits	set	3987
   154                           
   155                           	psect	smallconst
   156  000600                     __psmallconst:
   157                           	opt stack 0
   158  000600  00                 	db	0
   159  000601                     STR_3:
   160                           
   161                           ; BSR set to: 0
   162  000601  43                 	db	67	;'C'
   163  000602  61                 	db	97	;'a'
   164  000603  6C                 	db	108	;'l'
   165  000604  69                 	db	105	;'i'
   166  000605  62                 	db	98	;'b'
   167  000606  72                 	db	114	;'r'
   168  000607  61                 	db	97	;'a'
   169  000608  74                 	db	116	;'t'
   170  000609  69                 	db	105	;'i'
   171  00060A  6F                 	db	111	;'o'
   172  00060B  6E                 	db	110	;'n'
   173  00060C  00                 	db	0
   174  00060D                     STR_11:
   175                           
   176                           ; BSR set to: 0
   177  00060D  50                 	db	80	;'P'
   178  00060E  53                 	db	83	;'S'
   179  00060F  56                 	db	86	;'V'
   180  000610  65                 	db	101	;'e'
   181  000611  72                 	db	114	;'r'
   182  000612  73                 	db	115	;'s'
   183  000613  69                 	db	105	;'i'
   184  000614  6F                 	db	111	;'o'
   185  000615  6E                 	db	110	;'n'
   186  000616  00                 	db	0
   187  000617                     STR_4:
   188                           
   189                           ; BSR set to: 0
   190  000617  45                 	db	69	;'E'
   191  000618  6E                 	db	110	;'n'
   192  000619  55                 	db	85	;'U'
   193  00061A  73                 	db	115	;'s'
   194  00061B  65                 	db	101	;'e'
   195  00061C  64                 	db	100	;'d'
   196  00061D  00                 	db	0
   197  00061E                     STR_9:
   198                           
   199                           ; BSR set to: 0
   200  00061E  56                 	db	86	;'V'
   201  00061F  6F                 	db	111	;'o'
   202  000620  6C                 	db	108	;'l'
   203  000621  74                 	db	116	;'t'
   204  000622  73                 	db	115	;'s'
   205  000623  00                 	db	0
   206  000624                     STR_7:
   207                           
   208                           ; BSR set to: 0
   209  000624  57                 	db	87	;'W'
   210  000625  61                 	db	97	;'a'
   211  000626  74                 	db	116	;'t'
   212  000627  74                 	db	116	;'t'
   213  000628  73                 	db	115	;'s'
   214  000629  00                 	db	0
   215  00062A                     
   216                           ; BSR set to: 0
   217  00062A  4C                 	db	76	;'L'
   218  00062B  45                 	db	69	;'E'
   219  00062C  44                 	db	68	;'D'
   220  00062D  42                 	db	66	;'B'
   221  00062E  00                 	db	0
   222  00062F                     STR_5:
   223                           
   224                           ; BSR set to: 0
   225  00062F  52                 	db	82	;'R'
   226  000630  65                 	db	101	;'e'
   227  000631  61                 	db	97	;'a'
   228  000632  64                 	db	100	;'d'
   229  000633  00                 	db	0
   230  000634                     STR_6:
   231                           
   232                           ; BSR set to: 0
   233  000634  43                 	db	67	;'C'
   234  000635  6F                 	db	111	;'o'
   235  000636  6E                 	db	110	;'n'
   236  000637  66                 	db	102	;'f'
   237  000638  00                 	db	0
   238  000639                     STR_10:
   239                           
   240                           ; BSR set to: 0
   241  000639  41                 	db	65	;'A'
   242  00063A  6D                 	db	109	;'m'
   243  00063B  70                 	db	112	;'p'
   244  00063C  73                 	db	115	;'s'
   245  00063D  00                 	db	0
   246  00063E                     
   247                           ; BSR set to: 0
   248  00063E  32                 	db	50	;'2'
   249  00063F  32                 	db	50	;'2'
   250  000640  32                 	db	50	;'2'
   251  000641  00                 	db	0
   252  000642                     
   253                           ; BSR set to: 0
   254  000642  33                 	db	51	;'3'
   255  000643  33                 	db	51	;'3'
   256  000644  33                 	db	51	;'3'
   257  000645  00                 	db	0
   258  000646                     STR_29:
   259                           
   260                           ; BSR set to: 0
   261  000646  34                 	db	52	;'4'
   262  000647  34                 	db	52	;'4'
   263  000648  34                 	db	52	;'4'
   264  000649  00                 	db	0
   265  00064A                     STR_1:
   266                           
   267                           ; BSR set to: 0
   268  00064A  45                 	db	69	;'E'
   269  00064B  4E                 	db	78	;'N'
   270  00064C  44                 	db	68	;'D'
   271  00064D  00                 	db	0
   272  00064E                     STR_2:
   273                           
   274                           ; BSR set to: 0
   275  00064E  53                 	db	83	;'S'
   276  00064F  65                 	db	101	;'e'
   277  000650  74                 	db	116	;'t'
   278  000651  00                 	db	0
   279  0000                     
   280                           ; #config settings
   281  000652  00                 	db	0	; dummy byte at the end
   282  0000                     
   283                           	psect	cinit
   284  001CD8                     __pcinit:
   285                           	opt stack 0
   286  001CD8                     start_initialization:
   287                           	opt stack 0
   288  001CD8                     __initialization:
   289                           	opt stack 0
   290                           
   291                           ; Clear objects allocated to BANK1 (42 bytes)
   292  001CD8  EE01  F033         	lfsr	0,__pbssBANK1
   293  001CDC  0E2A               	movlw	42
   294  001CDE                     clear_0:
   295  001CDE  6AEE               	clrf	postinc0,c
   296  001CE0  06E8               	decf	wreg,f,c
   297  001CE2  E1FD               	bnz	clear_0
   298                           
   299                           ; Clear objects allocated to BANK0 (78 bytes)
   300  001CE4  EE00  F060         	lfsr	0,__pbssBANK0
   301  001CE8  0E4E               	movlw	78
   302  001CEA                     clear_1:
   303  001CEA  6AEE               	clrf	postinc0,c
   304  001CEC  06E8               	decf	wreg,f,c
   305  001CEE  E1FD               	bnz	clear_1
   306                           
   307                           ; Clear objects allocated to COMRAM (16 bytes)
   308  001CF0  EE00  F03D         	lfsr	0,__pbssCOMRAM
   309  001CF4  0E10               	movlw	16
   310  001CF6                     clear_2:
   311  001CF6  6AEE               	clrf	postinc0,c
   312  001CF8  06E8               	decf	wreg,f,c
   313  001CFA  E1FD               	bnz	clear_2
   314  001CFC                     end_of_initialization:
   315                           	opt stack 0
   316  001CFC                     __end_of__initialization:
   317                           	opt stack 0
   318  001CFC  904D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   319  001CFE  924D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   320  001D00  0E00               	movlw	low (__Lmediumconst shr (0+16))
   321  001D02  6EF8               	movwf	tblptru,c
   322  001D04  0100               	movlb	0
   323  001D06  EF25  F007         	goto	_main	;jump to C main() function
   324                           tblptru	equ	0xFF8
   325                           postinc0	equ	0xFEE
   326                           wreg	equ	0xFE8
   327                           
   328                           	psect	bssCOMRAM
   329  00003D                     __pbssCOMRAM:
   330                           	opt stack 0
   331  00003D                     _meterEnergyUsed_global:
   332                           	opt stack 0
   333  00003D                     	ds	4
   334  000041                     	ds	2
   335  000043                     mcpUpdatePower@meterWattsLF:
   336                           	opt stack 0
   337  000043                     	ds	2
   338  000045                     mcpUpdatePower@meterWattsHF:
   339                           	opt stack 0
   340  000045                     	ds	2
   341  000047                     resetCommunications@commState:
   342                           	opt stack 0
   343  000047                     	ds	2
   344  000049                     mcpUpdatePower@oneShotLFout:
   345                           	opt stack 0
   346  000049                     	ds	1
   347  00004A                     mcpUpdatePower@oneShotHFout:
   348                           	opt stack 0
   349  00004A                     	ds	1
   350  00004B                     receive_data@my_status:
   351                           	opt stack 0
   352  00004B                     	ds	1
   353  00004C                     _SPI_transmit_wait:
   354                           	opt stack 0
   355  00004C                     	ds	1
   356                           tblptru	equ	0xFF8
   357                           postinc0	equ	0xFEE
   358                           wreg	equ	0xFE8
   359                           
   360                           	psect	bssBANK0
   361  000060                     __pbssBANK0:
   362                           	opt stack 0
   363  000060                     _timerCount_ms:
   364                           	opt stack 0
   365  000060                     	ds	16
   366  000070                     mcpUpdatePower@timerHFoutLast_ms:
   367                           	opt stack 0
   368  000070                     	ds	4
   369  000074                     mcpUpdatePower@meterEnergyUsedPart:
   370                           	opt stack 0
   371  000074                     	ds	4
   372  000078                     _meterEnergyUsedPart:
   373                           	opt stack 0
   374  000078                     	ds	4
   375  00007C                     _meterWatts_global:
   376                           	opt stack 0
   377  00007C                     	ds	4
   378  000080                     main@oneShot:
   379                           	opt stack 0
   380  000080                     	ds	1
   381  000081                     communications@last_state_active:
   382                           	opt stack 0
   383  000081                     	ds	1
   384  000082                     communications@receive_current_state:
   385                           	opt stack 0
   386  000082                     	ds	1
   387  000083                     communications@end_of_transmission_received:
   388                           	opt stack 0
   389  000083                     	ds	1
   390  000084                     communications@send_buffer:
   391                           	opt stack 0
   392  000084                     	ds	42
   393                           tblptru	equ	0xFF8
   394                           postinc0	equ	0xFEE
   395                           wreg	equ	0xFE8
   396                           
   397                           	psect	bssBANK1
   398  000133                     __pbssBANK1:
   399                           	opt stack 0
   400  000133                     communications@receive_buffer:
   401                           	opt stack 0
   402  000133                     	ds	42
   403                           tblptru	equ	0xFF8
   404                           postinc0	equ	0xFEE
   405                           wreg	equ	0xFE8
   406                           
   407                           	psect	cstackBANK1
   408  000100                     __pcstackBANK1:
   409                           	opt stack 0
   410  000100                     process_data@parameters:
   411                           	opt stack 0
   412                           
   413                           ; 50 bytes @ 0x0
   414  000100                     	ds	50
   415  000132                     process_data@end_of_transmission_received:
   416                           	opt stack 0
   417                           
   418                           ; 1 bytes @ 0x32
   419  000132                     	ds	1
   420                           tblptru	equ	0xFF8
   421                           postinc0	equ	0xFEE
   422                           wreg	equ	0xFE8
   423                           
   424                           	psect	cstackBANK0
   425  0000AE                     __pcstackBANK0:
   426                           	opt stack 0
   427  0000AE                     xsum_builder@xsumBuf:
   428                           	opt stack 0
   429                           
   430                           ; 16 bytes @ 0x0
   431  0000AE                     	ds	16
   432  0000BE                     com_command_setPower@temp:
   433                           	opt stack 0
   434  0000BE                     com_command_setEnergyUsed@temp:
   435                           	opt stack 0
   436                           
   437                           ; 12 bytes @ 0x10
   438  0000BE                     	ds	12
   439  0000CA                     ??_resetCommunications:
   440  0000CA                     process_data_parameters@parameters:
   441                           	opt stack 0
   442                           
   443                           ; 2 bytes @ 0x1C
   444  0000CA                     	ds	2
   445  0000CC                     process_data_parameters@send_buffer:
   446                           	opt stack 0
   447                           
   448                           ; 2 bytes @ 0x1E
   449  0000CC                     	ds	2
   450  0000CE                     process_data@receive_buffer:
   451                           	opt stack 0
   452                           
   453                           ; 2 bytes @ 0x20
   454  0000CE                     	ds	2
   455  0000D0                     process_data@send_buffer:
   456                           	opt stack 0
   457                           
   458                           ; 2 bytes @ 0x22
   459  0000D0                     	ds	2
   460  0000D2                     communications@no_more_to_send:
   461                           	opt stack 0
   462                           
   463                           ; 1 bytes @ 0x24
   464  0000D2                     	ds	1
   465  0000D3                     communications@firstTime:
   466                           	opt stack 0
   467                           
   468                           ; 1 bytes @ 0x25
   469  0000D3                     	ds	1
   470  0000D4                     ??_main:
   471                           
   472                           ; 1 bytes @ 0x26
   473  0000D4                     	ds	1
   474  0000D5                     main@timerHeartbeat:
   475                           	opt stack 0
   476                           
   477                           ; 4 bytes @ 0x27
   478  0000D5                     	ds	4
   479  0000D9                     main@inx:
   480                           	opt stack 0
   481                           
   482                           ; 2 bytes @ 0x2B
   483  0000D9                     	ds	2
   484                           tblptru	equ	0xFF8
   485                           postinc0	equ	0xFEE
   486                           wreg	equ	0xFE8
   487                           
   488                           	psect	cstackCOMRAM
   489  000001                     __pcstackCOMRAM:
   490                           	opt stack 0
   491  000001                     ??_Timer0_ISR:
   492                           
   493                           ; 1 bytes @ 0x0
   494  000001                     	ds	18
   495  000013                     ??_isdigit:
   496  000013                     ?_command_builder_add_char:
   497                           	opt stack 0
   498  000013                     ?_strcmp2:
   499                           	opt stack 0
   500  000013                     ?___wmul:
   501                           	opt stack 0
   502  000013                     ?___awdiv:
   503                           	opt stack 0
   504  000013                     ?___lwdiv:
   505                           	opt stack 0
   506  000013                     ?___lwmod:
   507                           	opt stack 0
   508  000013                     ?_timerGetCount:
   509                           	opt stack 0
   510  000013                     ?___lmul:
   511                           	opt stack 0
   512  000013                     ?___lldiv:
   513                           	opt stack 0
   514  000013                     ?___llmod:
   515                           	opt stack 0
   516  000013                     SPI_send_data@data:
   517                           	opt stack 0
   518  000013                     ledSet@ledNum:
   519                           	opt stack 0
   520  000013                     command_builder_add_char@send_buffer:
   521                           	opt stack 0
   522  000013                     strcmp2@a:
   523                           	opt stack 0
   524  000013                     SPI_receive_data@data:
   525                           	opt stack 0
   526  000013                     timerGetCount@timerIndex:
   527                           	opt stack 0
   528  000013                     timerResetCount@timerIndex:
   529                           	opt stack 0
   530  000013                     delayMS10@count:
   531                           	opt stack 0
   532  000013                     ___wmul@multiplier:
   533                           	opt stack 0
   534  000013                     ___awdiv@dividend:
   535                           	opt stack 0
   536  000013                     ___lwdiv@dividend:
   537                           	opt stack 0
   538  000013                     ___lwmod@dividend:
   539                           	opt stack 0
   540  000013                     ___lmul@multiplier:
   541                           	opt stack 0
   542  000013                     ___lldiv@dividend:
   543                           	opt stack 0
   544  000013                     ___llmod@dividend:
   545                           	opt stack 0
   546                           
   547                           ; 4 bytes @ 0x12
   548  000013                     	ds	1
   549  000014                     SPI_send_data@sendGood:
   550                           	opt stack 0
   551  000014                     _isdigit$2299:
   552                           	opt stack 0
   553                           
   554                           ; 1 bytes @ 0x13
   555  000014                     	ds	1
   556  000015                     ??_delayMS10:
   557  000015                     ??_timerResetCount:
   558  000015                     command_builder_add_char@data:
   559                           	opt stack 0
   560  000015                     SPI_receive_data@recvGood:
   561                           	opt stack 0
   562  000015                     isdigit@c:
   563                           	opt stack 0
   564  000015                     ledSet@setValue:
   565                           	opt stack 0
   566  000015                     send_data@send_buffer:
   567                           	opt stack 0
   568  000015                     strcmp2@b:
   569                           	opt stack 0
   570  000015                     ___wmul@multiplicand:
   571                           	opt stack 0
   572  000015                     ___awdiv@divisor:
   573                           	opt stack 0
   574  000015                     ___lwdiv@divisor:
   575                           	opt stack 0
   576  000015                     ___lwmod@divisor:
   577                           	opt stack 0
   578                           
   579                           ; 2 bytes @ 0x14
   580  000015                     	ds	1
   581  000016                     ??_command_builder_add_char:
   582  000016                     receive_data@receive_buffer:
   583                           	opt stack 0
   584  000016                     delayMS10@inx:
   585                           	opt stack 0
   586                           
   587                           ; 2 bytes @ 0x15
   588  000016                     	ds	1
   589  000017                     ??_send_data:
   590  000017                     ??_strcmp2:
   591  000017                     ??_timerGetCount:
   592  000017                     ??_ledSet:
   593  000017                     ?_command_builder_add_string:
   594                           	opt stack 0
   595  000017                     ___awdiv@counter:
   596                           	opt stack 0
   597  000017                     ___lwdiv@counter:
   598                           	opt stack 0
   599  000017                     ___lwmod@counter:
   600                           	opt stack 0
   601  000017                     command_builder_add_string@send_buffer:
   602                           	opt stack 0
   603  000017                     ___wmul@product:
   604                           	opt stack 0
   605  000017                     ___lmul@multiplicand:
   606                           	opt stack 0
   607  000017                     ___lldiv@divisor:
   608                           	opt stack 0
   609  000017                     ___llmod@divisor:
   610                           	opt stack 0
   611                           
   612                           ; 4 bytes @ 0x16
   613  000017                     	ds	1
   614  000018                     ??_receive_data:
   615  000018                     ??_mcpInitF:
   616  000018                     ___awdiv@sign:
   617                           	opt stack 0
   618  000018                     ___lwdiv@quotient:
   619                           	opt stack 0
   620                           
   621                           ; 2 bytes @ 0x17
   622  000018                     	ds	1
   623  000019                     receive_data@data:
   624                           	opt stack 0
   625  000019                     send_data@send_end:
   626                           	opt stack 0
   627  000019                     ledSetAll@led1Value:
   628                           	opt stack 0
   629  000019                     ledToggle@ledNum:
   630                           	opt stack 0
   631  000019                     process_data_parameterize@parameters:
   632                           	opt stack 0
   633  000019                     command_builder_add_string@data_string:
   634                           	opt stack 0
   635  000019                     ___awdiv@quotient:
   636                           	opt stack 0
   637                           
   638                           ; 2 bytes @ 0x18
   639  000019                     	ds	1
   640  00001A                     strcmp2@match:
   641                           	opt stack 0
   642  00001A                     utoa@buf:
   643                           	opt stack 0
   644                           
   645                           ; 2 bytes @ 0x19
   646  00001A                     	ds	1
   647  00001B                     ??_command_builder_add_string:
   648  00001B                     ??_ledToggle:
   649  00001B                     ___llmod@counter:
   650                           	opt stack 0
   651  00001B                     ledSetAll@led2Value:
   652                           	opt stack 0
   653  00001B                     process_data_parameterize@buffer_to_parameterize:
   654                           	opt stack 0
   655  00001B                     ___lmul@product:
   656                           	opt stack 0
   657  00001B                     ___lldiv@quotient:
   658                           	opt stack 0
   659                           
   660                           ; 4 bytes @ 0x1A
   661  00001B                     	ds	1
   662  00001C                     strcmp2@inx:
   663                           	opt stack 0
   664  00001C                     utoa@val:
   665                           	opt stack 0
   666                           
   667                           ; 2 bytes @ 0x1B
   668  00001C                     	ds	1
   669  00001D                     ??_process_data_parameterize:
   670  00001D                     ledSetAll@led3Value:
   671                           	opt stack 0
   672  00001D                     ledToggle@setValue:
   673                           	opt stack 0
   674  00001D                     command_builder_add_string@xsumAdd:
   675                           	opt stack 0
   676                           
   677                           ; 2 bytes @ 0x1C
   678  00001D                     	ds	1
   679  00001E                     strmatch@a:
   680                           	opt stack 0
   681  00001E                     utoa@base:
   682                           	opt stack 0
   683                           
   684                           ; 2 bytes @ 0x1D
   685  00001E                     	ds	1
   686  00001F                     ?_atol:
   687                           	opt stack 0
   688  00001F                     ___lldiv@counter:
   689                           	opt stack 0
   690  00001F                     ledToggle@getValue:
   691                           	opt stack 0
   692  00001F                     ledRunUp@ledRunDelay:
   693                           	opt stack 0
   694  00001F                     ledRunDown@ledRunDelay:
   695                           	opt stack 0
   696  00001F                     command_builder_add_string@inx:
   697                           	opt stack 0
   698  00001F                     atol@s:
   699                           	opt stack 0
   700                           
   701                           ; 2 bytes @ 0x1E
   702  00001F                     	ds	1
   703  000020                     ?_powerCalculateWatts:
   704                           	opt stack 0
   705  000020                     process_data_parameterize@inx:
   706                           	opt stack 0
   707  000020                     strmatch@b:
   708                           	opt stack 0
   709  000020                     utoa@v:
   710                           	opt stack 0
   711  000020                     ultoa@buf:
   712                           	opt stack 0
   713  000020                     powerCalculateWatts@timer_ms:
   714                           	opt stack 0
   715  000020                     powerReduction@timerLast_ms:
   716                           	opt stack 0
   717                           
   718                           ; 4 bytes @ 0x1F
   719  000020                     	ds	1
   720  000021                     ledTestToggle@ledNum:
   721                           	opt stack 0
   722  000021                     ledGoToggle@ledNum:
   723                           	opt stack 0
   724  000021                     ledRunUp@delay10ms:
   725                           	opt stack 0
   726  000021                     ledRunDown@delay10ms:
   727                           	opt stack 0
   728                           
   729                           ; 2 bytes @ 0x20
   730  000021                     	ds	1
   731  000022                     process_data_parameterize@parameter_index:
   732                           	opt stack 0
   733  000022                     utoa@c:
   734                           	opt stack 0
   735  000022                     strmatch@result:
   736                           	opt stack 0
   737  000022                     ultoa@val:
   738                           	opt stack 0
   739                           
   740                           ; 4 bytes @ 0x21
   741  000022                     	ds	1
   742  000023                     ??_atol:
   743  000023                     process_data_parameterize@parameter_position:
   744                           	opt stack 0
   745  000023                     ledRun@ledRunDelay:
   746                           	opt stack 0
   747  000023                     itoa@buf:
   748                           	opt stack 0
   749                           
   750                           ; 2 bytes @ 0x22
   751  000023                     	ds	1
   752  000024                     strmatch@match:
   753                           	opt stack 0
   754  000024                     powerCalculateWatts@outHF:
   755                           	opt stack 0
   756  000024                     powerReduction@timerReduce_ms:
   757                           	opt stack 0
   758                           
   759                           ; 4 bytes @ 0x23
   760  000024                     	ds	1
   761  000025                     powerCalculateWatts@calcWatts:
   762                           	opt stack 0
   763  000025                     itoa@val:
   764                           	opt stack 0
   765                           
   766                           ; 2 bytes @ 0x24
   767  000025                     	ds	1
   768  000026                     ultoa@base:
   769                           	opt stack 0
   770                           
   771                           ; 2 bytes @ 0x25
   772  000026                     	ds	1
   773  000027                     atol@sign:
   774                           	opt stack 0
   775  000027                     itoa@base:
   776                           	opt stack 0
   777                           
   778                           ; 2 bytes @ 0x26
   779  000027                     	ds	1
   780  000028                     mcpUpdatePower@timerLFout_ms:
   781                           	opt stack 0
   782  000028                     atol@a:
   783                           	opt stack 0
   784  000028                     ultoa@v:
   785                           	opt stack 0
   786                           
   787                           ; 4 bytes @ 0x27
   788  000028                     	ds	1
   789  000029                     itoa@cp:
   790                           	opt stack 0
   791                           
   792                           ; 2 bytes @ 0x28
   793  000029                     	ds	2
   794  00002B                     xsum_builder@send_buffer:
   795                           	opt stack 0
   796                           
   797                           ; 2 bytes @ 0x2A
   798  00002B                     	ds	1
   799  00002C                     atol@c:
   800                           	opt stack 0
   801  00002C                     ultoa@c:
   802                           	opt stack 0
   803  00002C                     mcpUpdatePower@timerHFout_ms:
   804                           	opt stack 0
   805                           
   806                           ; 4 bytes @ 0x2B
   807  00002C                     	ds	1
   808  00002D                     xsum_builder@xsum:
   809                           	opt stack 0
   810                           
   811                           ; 2 bytes @ 0x2C
   812  00002D                     	ds	2
   813  00002F                     command_builder1@send_buffer:
   814                           	opt stack 0
   815  00002F                     command_builder3@send_buffer:
   816                           	opt stack 0
   817                           
   818                           ; 2 bytes @ 0x2E
   819  00002F                     	ds	2
   820  000031                     command_builder1@data1:
   821                           	opt stack 0
   822  000031                     command_builder3@data1:
   823                           	opt stack 0
   824                           
   825                           ; 2 bytes @ 0x30
   826  000031                     	ds	2
   827  000033                     command_builder1@xsum:
   828                           	opt stack 0
   829  000033                     command_builder3@data2:
   830                           	opt stack 0
   831                           
   832                           ; 2 bytes @ 0x32
   833  000033                     	ds	2
   834  000035                     command_builder3@data3:
   835                           	opt stack 0
   836  000035                     send_end_of_transmission@send_buffer:
   837                           	opt stack 0
   838                           
   839                           ; 2 bytes @ 0x34
   840  000035                     	ds	2
   841  000037                     command_builder3@xsum:
   842                           	opt stack 0
   843                           
   844                           ; 2 bytes @ 0x36
   845  000037                     	ds	2
   846  000039                     com_command_setPower@send_buffer:
   847                           	opt stack 0
   848  000039                     com_command_setEnergyUsed@send_buffer:
   849                           	opt stack 0
   850  000039                     com_command_setVersion@send_buffer:
   851                           	opt stack 0
   852                           
   853                           ; 2 bytes @ 0x38
   854  000039                     	ds	2
   855  00003B                     process_data_parameters@end_of_transmission_received:
   856                           	opt stack 0
   857  00003B                     resetCommunications@send_buffer:
   858                           	opt stack 0
   859                           
   860                           ; 2 bytes @ 0x3A
   861  00003B                     	ds	1
   862  00003C                     
   863                           ; 1 bytes @ 0x3B
   864  00003C                     	ds	1
   865  00003D                     tblptru	equ	0xFF8
   866                           postinc0	equ	0xFEE
   867                           wreg	equ	0xFE8
   868                           
   869                           ; 1 bytes @ 0x3C
   870 ;;
   871 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   872 ;;
   873 ;; *************** function _main *****************
   874 ;; Defined at:
   875 ;;		line 48 in file "Main_PowerSense.c"
   876 ;; Parameters:    Size  Location     Type
   877 ;;		None
   878 ;; Auto vars:     Size  Location     Type
   879 ;;  timerHeartbe    4   39[BANK0 ] unsigned long 
   880 ;;  inx             2   43[BANK0 ] int 
   881 ;; Return value:  Size  Location     Type
   882 ;;                  1    wreg      void 
   883 ;; Registers used:
   884 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   885 ;; Tracked objects:
   886 ;;		On entry : 0/0
   887 ;;		On exit  : 0/0
   888 ;;		Unchanged: 0/0
   889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   890 ;;      Params:         0       0       0       0       0       0       0
   891 ;;      Locals:         0       6       0       0       0       0       0
   892 ;;      Temps:          0       1       0       0       0       0       0
   893 ;;      Totals:         0       7       0       0       0       0       0
   894 ;;Total ram usage:        7 bytes
   895 ;; Hardware stack levels required when called:   11
   896 ;; This function calls:
   897 ;;		___llmod
   898 ;;		_commInit
   899 ;;		_commRun
   900 ;;		_initIO
   901 ;;		_initInterruptsClear
   902 ;;		_initOSC
   903 ;;		_ledInit
   904 ;;		_ledRun
   905 ;;		_ledSetAllOff
   906 ;;		_ledSetAllOn
   907 ;;		_ledTestToggle
   908 ;;		_mcpInit
   909 ;;		_mcpUpdatePower
   910 ;;		_timerGetCount
   911 ;;		_timerInit
   912 ;; This function is called by:
   913 ;;		Startup code after reset
   914 ;; This function uses a non-reentrant model
   915 ;;
   916                           
   917                           	psect	text0
   918  000E4A                     __ptext0:
   919                           	opt stack 0
   920  000E4A                     _main:
   921                           	opt stack 20
   922                           
   923                           ;Main_PowerSense.c: 51: initOSC( );
   924                           
   925                           ;incstack = 0
   926  000E4A  EC95  F00F         	call	_initOSC	;wreg free
   927                           
   928                           ;Main_PowerSense.c: 52: initIO( );
   929  000E4E  ECAC  F00F         	call	_initIO	;wreg free
   930                           
   931                           ;Main_PowerSense.c: 53: ledInit( );
   932  000E52  ECBC  F00F         	call	_ledInit	;wreg free
   933                           
   934                           ;Main_PowerSense.c: 55: ledSetAllOff( );
   935  000E56  EC6A  F00F         	call	_ledSetAllOff	;wreg free
   936                           
   937                           ;Main_PowerSense.c: 57: initInterruptsClear( );
   938  000E5A  EC5B  F00D         	call	_initInterruptsClear	;wreg free
   939                           
   940                           ;Main_PowerSense.c: 58: timerInit( );
   941  000E5E  EC17  F00C         	call	_timerInit	;wreg free
   942                           
   943                           ;Main_PowerSense.c: 60: mcpInit( );
   944  000E62  EC52  F00E         	call	_mcpInit	;wreg free
   945                           
   946                           ;Main_PowerSense.c: 63: for( int inx = 0; inx < 5; inx++ )
   947  000E66  0E00               	movlw	0
   948  000E68  0100               	movlb	0	; () banked
   949  000E6A  6FDA               	movwf	(main@inx+1)& (0+255),b
   950  000E6C  0E00               	movlw	0
   951  000E6E  6FD9               	movwf	main@inx& (0+255),b
   952  000E70  BFDA               	btfsc	(main@inx+1)& (0+255),7,b
   953  000E72  D006               	goto	l450
   954  000E74  51DA               	movf	(main@inx+1)& (0+255),w,b
   955  000E76  E11E               	bnz	l4123
   956  000E78  0E05               	movlw	5
   957  000E7A  5DD9               	subwf	main@inx& (0+255),w,b
   958  000E7C  B0D8               	btfsc	status,0,c
   959  000E7E  D01A               	goto	u2950
   960  000E80                     l450:
   961                           
   962                           ; BSR set to: 0
   963                           ;Main_PowerSense.c: 64: {
   964                           ;Main_PowerSense.c: 65: ledSetAllOn( );
   965                           
   966                           ; BSR set to: 0
   967  000E80  EC5B  F00F         	call	_ledSetAllOn	;wreg free
   968                           
   969                           ;Main_PowerSense.c: 66: _delay((unsigned long)((10)*(16000000UL/4000.0)));
   970  000E84  0E34               	movlw	52
   971  000E86  0100               	movlb	0	; () banked
   972  000E88  6FD4               	movwf	??_main& (0+255),b
   973  000E8A  0EF1               	movlw	241
   974  000E8C                     u2987:
   975  000E8C  2EE8               	decfsz	wreg,f,c
   976  000E8E  D7FE               	bra	u2987
   977  000E90  2FD4               	decfsz	??_main& (0+255),f,b
   978  000E92  D7FC               	bra	u2987
   979  000E94  D000               	nop2	
   980                           
   981                           ;Main_PowerSense.c: 67: ledSetAllOff( );
   982  000E96  EC6A  F00F         	call	_ledSetAllOff	;wreg free
   983                           
   984                           ;Main_PowerSense.c: 68: _delay((unsigned long)((10)*(16000000UL/4000.0)));
   985  000E9A  0E34               	movlw	52
   986  000E9C  0100               	movlb	0	; () banked
   987  000E9E  6FD4               	movwf	??_main& (0+255),b
   988  000EA0  0EF1               	movlw	241
   989  000EA2                     u2997:
   990  000EA2  2EE8               	decfsz	wreg,f,c
   991  000EA4  D7FE               	bra	u2997
   992  000EA6  2FD4               	decfsz	??_main& (0+255),f,b
   993  000EA8  D7FC               	bra	u2997
   994  000EAA  D000               	nop2	
   995  000EAC  0100               	movlb	0	; () banked
   996  000EAE  4BD9               	infsnz	main@inx& (0+255),f,b
   997  000EB0  2BDA               	incf	(main@inx+1)& (0+255),f,b
   998  000EB2  D7DE               	goto	L1
   999  000EB4                     u2950:
  1000  000EB4                     l4123:
  1001                           
  1002                           ; BSR set to: 0
  1003                           ;Main_PowerSense.c: 69: }
  1004                           ;Main_PowerSense.c: 72: commInit( );
  1005  000EB4  ECC2  F00F         	call	_commInit	;wreg free
  1006                           
  1007                           ;Main_PowerSense.c: 74: ledRun( 100 );
  1008  000EB8  0E00               	movlw	0
  1009  000EBA  6E24               	movwf	ledRun@ledRunDelay+1,c
  1010  000EBC  0E64               	movlw	100
  1011  000EBE  6E23               	movwf	ledRun@ledRunDelay,c
  1012  000EC0  EC88  F00F         	call	_ledRun	;wreg free
  1013  000EC4                     
  1014                           ;Main_PowerSense.c: 77: {
  1015                           ;Main_PowerSense.c: 78: mcpUpdatePower( );
  1016  000EC4  EC0F  F004         	call	_mcpUpdatePower	;wreg free
  1017                           
  1018                           ;Main_PowerSense.c: 79: commRun( );
  1019  000EC8  ECC8  F00F         	call	_commRun	;wreg free
  1020                           
  1021                           ;Main_PowerSense.c: 82: {
  1022                           ;Main_PowerSense.c: 83: static bool oneShot = 0;
  1023                           ;Main_PowerSense.c: 84: unsigned long timerHeartbeat;
  1024                           ;Main_PowerSense.c: 85: timerHeartbeat = timerGetCount( 3 );
  1025  000ECC  0E00               	movlw	0
  1026  000ECE  6E14               	movwf	timerGetCount@timerIndex+1,c
  1027  000ED0  0E03               	movlw	3
  1028  000ED2  6E13               	movwf	timerGetCount@timerIndex,c
  1029  000ED4  EC85  F00E         	call	_timerGetCount	;wreg free
  1030  000ED8  C013  F0D5         	movff	?_timerGetCount,main@timerHeartbeat
  1031  000EDC  C014  F0D6         	movff	?_timerGetCount+1,main@timerHeartbeat+1
  1032  000EE0  C015  F0D7         	movff	?_timerGetCount+2,main@timerHeartbeat+2
  1033  000EE4  C016  F0D8         	movff	?_timerGetCount+3,main@timerHeartbeat+3
  1034                           
  1035                           ;Main_PowerSense.c: 86: if( (timerHeartbeat % 500) == 0 )
  1036  000EE8  C0D5  F013         	movff	main@timerHeartbeat,___llmod@dividend
  1037  000EEC  C0D6  F014         	movff	main@timerHeartbeat+1,___llmod@dividend+1
  1038  000EF0  C0D7  F015         	movff	main@timerHeartbeat+2,___llmod@dividend+2
  1039  000EF4  C0D8  F016         	movff	main@timerHeartbeat+3,___llmod@dividend+3
  1040  000EF8  0EF4               	movlw	244
  1041  000EFA  6E17               	movwf	___llmod@divisor,c
  1042  000EFC  0E01               	movlw	1
  1043  000EFE  6E18               	movwf	___llmod@divisor+1,c
  1044  000F00  0E00               	movlw	0
  1045  000F02  6E19               	movwf	___llmod@divisor+2,c
  1046  000F04  0E00               	movlw	0
  1047  000F06  6E1A               	movwf	___llmod@divisor+3,c
  1048  000F08  ECE4  F00B         	call	___llmod	;wreg free
  1049  000F0C  5013               	movf	?___llmod,w,c
  1050  000F0E  1014               	iorwf	?___llmod+1,w,c
  1051  000F10  1015               	iorwf	?___llmod+2,w,c
  1052  000F12  1016               	iorwf	?___llmod+3,w,c
  1053  000F14  A4D8               	btfss	status,2,c
  1054  000F16  D00D               	goto	l455
  1055                           
  1056                           ;Main_PowerSense.c: 87: {
  1057                           ;Main_PowerSense.c: 88: if( oneShot == 0 )
  1058  000F18  0100               	movlb	0	; () banked
  1059  000F1A  5180               	movf	main@oneShot& (0+255),w,b
  1060  000F1C  A4D8               	btfss	status,2,c
  1061  000F1E  D7D2               	goto	l452
  1062                           
  1063                           ; BSR set to: 0
  1064                           ;Main_PowerSense.c: 89: {
  1065                           ;Main_PowerSense.c: 90: oneShot = 1;
  1066  000F20  0E01               	movlw	1
  1067  000F22  6F80               	movwf	main@oneShot& (0+255),b
  1068                           
  1069                           ; BSR set to: 0
  1070                           ;Main_PowerSense.c: 91: ledTestToggle( 1 );
  1071  000F24  0E00               	movlw	0
  1072  000F26  6E22               	movwf	ledTestToggle@ledNum+1,c
  1073  000F28  0E01               	movlw	1
  1074  000F2A  6E21               	movwf	ledTestToggle@ledNum,c
  1075  000F2C  ECB5  F00F         	call	_ledTestToggle	;wreg free
  1076                           
  1077                           ;Main_PowerSense.c: 92: }
  1078                           ;Main_PowerSense.c: 94: }
  1079  000F30  D7C9               	goto	l452
  1080  000F32                     l455:
  1081                           
  1082                           ;Main_PowerSense.c: 95: else
  1083                           ;Main_PowerSense.c: 96: {
  1084                           ;Main_PowerSense.c: 97: oneShot = 0;
  1085  000F32  0E00               	movlw	0
  1086  000F34  0100               	movlb	0	; () banked
  1087  000F36  6F80               	movwf	main@oneShot& (0+255),b
  1088                           
  1089                           ; BSR set to: 0
  1090                           
  1091                           ; BSR set to: 0
  1092  000F38  D7C5               	goto	l452
  1093  000F3A                     __end_of_main:
  1094                           	opt stack 0
  1095                           tblptru	equ	0xFF8
  1096                           postinc0	equ	0xFEE
  1097                           wreg	equ	0xFE8
  1098                           status	equ	0xFD8
  1099                           
  1100 ;; *************** function _timerInit *****************
  1101 ;; Defined at:
  1102 ;;		line 53 in file "Timer.c"
  1103 ;; Parameters:    Size  Location     Type
  1104 ;;		None
  1105 ;; Auto vars:     Size  Location     Type
  1106 ;;		None
  1107 ;; Return value:  Size  Location     Type
  1108 ;;                  1    wreg      void 
  1109 ;; Registers used:
  1110 ;;		wreg, status,2
  1111 ;; Tracked objects:
  1112 ;;		On entry : 0/0
  1113 ;;		On exit  : 0/0
  1114 ;;		Unchanged: 0/0
  1115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1116 ;;      Params:         0       0       0       0       0       0       0
  1117 ;;      Locals:         0       0       0       0       0       0       0
  1118 ;;      Temps:          0       0       0       0       0       0       0
  1119 ;;      Totals:         0       0       0       0       0       0       0
  1120 ;;Total ram usage:        0 bytes
  1121 ;; Hardware stack levels used:    1
  1122 ;; Hardware stack levels required when called:    1
  1123 ;; This function calls:
  1124 ;;		Nothing
  1125 ;; This function is called by:
  1126 ;;		_main
  1127 ;; This function uses a non-reentrant model
  1128 ;;
  1129                           
  1130                           	psect	text1
  1131  00182E                     __ptext1:
  1132                           	opt stack 0
  1133  00182E                     _timerInit:
  1134                           	opt stack 29
  1135                           
  1136                           ;Timer.c: 56: T0CONbits.TMR0ON = 0;
  1137                           
  1138                           ; BSR set to: 0
  1139                           ;incstack = 0
  1140  00182E  9ED5               	bcf	4053,7,c	;volatile
  1141                           
  1142                           ;Timer.c: 57: T0CONbits.T08BIT = 0;
  1143  001830  9CD5               	bcf	4053,6,c	;volatile
  1144                           
  1145                           ;Timer.c: 58: T0CONbits.T0CS = 0;
  1146  001832  9AD5               	bcf	4053,5,c	;volatile
  1147                           
  1148                           ;Timer.c: 59: T0CONbits.PSA = 0;
  1149  001834  96D5               	bcf	4053,3,c	;volatile
  1150                           
  1151                           ;Timer.c: 60: T0CONbits.T0PS = 0b001;
  1152  001836  50D5               	movf	4053,w,c	;volatile
  1153  001838  0BF8               	andlw	-8
  1154  00183A  0901               	iorlw	1
  1155  00183C  6ED5               	movwf	4053,c	;volatile
  1156                           
  1157                           ;Timer.c: 62: INTCONbits.TMR0IE = 1;
  1158  00183E  8AF2               	bsf	intcon,5,c	;volatile
  1159                           
  1160                           ;Timer.c: 63: INTCONbits.GIE = 1;
  1161  001840  8EF2               	bsf	intcon,7,c	;volatile
  1162                           
  1163                           ;Timer.c: 64: T0CONbits.TMR0ON = 1;
  1164  001842  8ED5               	bsf	4053,7,c	;volatile
  1165                           
  1166                           ;Timer.c: 68: timerCount_ms[0] = 0;
  1167  001844  0E00               	movlw	0
  1168  001846  0100               	movlb	0	; () banked
  1169  001848  6F60               	movwf	_timerCount_ms& (0+255),b	;volatile
  1170  00184A  0E00               	movlw	0
  1171  00184C  6F61               	movwf	(_timerCount_ms+1)& (0+255),b	;volatile
  1172  00184E  0E00               	movlw	0
  1173  001850  6F62               	movwf	(_timerCount_ms+2)& (0+255),b	;volatile
  1174  001852  0E00               	movlw	0
  1175  001854  6F63               	movwf	(_timerCount_ms+3)& (0+255),b	;volatile
  1176                           
  1177                           ;Timer.c: 69: timerCount_ms[1] = 0;
  1178  001856  0E00               	movlw	0
  1179  001858  6F64               	movwf	(_timerCount_ms+4)& (0+255),b	;volatile
  1180  00185A  0E00               	movlw	0
  1181  00185C  6F65               	movwf	(_timerCount_ms+5)& (0+255),b	;volatile
  1182  00185E  0E00               	movlw	0
  1183  001860  6F66               	movwf	(_timerCount_ms+6)& (0+255),b	;volatile
  1184  001862  0E00               	movlw	0
  1185  001864  6F67               	movwf	(_timerCount_ms+7)& (0+255),b	;volatile
  1186                           
  1187                           ;Timer.c: 70: timerCount_ms[2] = 0;
  1188  001866  0E00               	movlw	0
  1189  001868  6F68               	movwf	(_timerCount_ms+8)& (0+255),b	;volatile
  1190  00186A  0E00               	movlw	0
  1191  00186C  6F69               	movwf	(_timerCount_ms+9)& (0+255),b	;volatile
  1192  00186E  0E00               	movlw	0
  1193  001870  6F6A               	movwf	(_timerCount_ms+10)& (0+255),b	;volatile
  1194  001872  0E00               	movlw	0
  1195  001874  6F6B               	movwf	(_timerCount_ms+11)& (0+255),b	;volatile
  1196                           
  1197                           ;Timer.c: 71: timerCount_ms[3] = 0;
  1198  001876  0E00               	movlw	0
  1199  001878  6F6C               	movwf	(_timerCount_ms+12)& (0+255),b	;volatile
  1200  00187A  0E00               	movlw	0
  1201  00187C  6F6D               	movwf	(_timerCount_ms+13)& (0+255),b	;volatile
  1202  00187E  0E00               	movlw	0
  1203  001880  6F6E               	movwf	(_timerCount_ms+14)& (0+255),b	;volatile
  1204  001882  0E00               	movlw	0
  1205  001884  6F6F               	movwf	(_timerCount_ms+15)& (0+255),b	;volatile
  1206                           
  1207                           ; BSR set to: 0
  1208                           ;Timer.c: 73: INTCONbits.TMR0IF = 0;
  1209  001886  94F2               	bcf	intcon,2,c	;volatile
  1210                           
  1211                           ;Timer.c: 75: TMR0H = ((unsigned char)(((( 65536 - 1000 ))>>8)&0xFF));
  1212  001888  0EFC               	movlw	252
  1213  00188A  6ED7               	movwf	4055,c	;volatile
  1214                           
  1215                           ;Timer.c: 76: TMR0L = ((unsigned char)((( 65536 - 1000 ))&0xFF));
  1216  00188C  0E18               	movlw	24
  1217  00188E  6ED6               	movwf	4054,c	;volatile
  1218                           
  1219                           ; BSR set to: 0
  1220  001890  0012               	return		;funcret
  1221  001892                     __end_of_timerInit:
  1222                           	opt stack 0
  1223                           tblptru	equ	0xFF8
  1224                           intcon	equ	0xFF2
  1225                           postinc0	equ	0xFEE
  1226                           wreg	equ	0xFE8
  1227                           status	equ	0xFD8
  1228                           
  1229 ;; *************** function _mcpUpdatePower *****************
  1230 ;; Defined at:
  1231 ;;		line 205 in file "MCP3909_Interface.c"
  1232 ;; Parameters:    Size  Location     Type
  1233 ;;		None
  1234 ;; Auto vars:     Size  Location     Type
  1235 ;;  timerLFout_m    4   39[COMRAM] unsigned long 
  1236 ;;  timerHFout_m    4   43[COMRAM] unsigned long 
  1237 ;; Return value:  Size  Location     Type
  1238 ;;                  1    wreg      void 
  1239 ;; Registers used:
  1240 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1241 ;; Tracked objects:
  1242 ;;		On entry : 0/0
  1243 ;;		On exit  : 0/0
  1244 ;;		Unchanged: 0/0
  1245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1246 ;;      Params:         0       0       0       0       0       0       0
  1247 ;;      Locals:         8       0       0       0       0       0       0
  1248 ;;      Temps:          0       0       0       0       0       0       0
  1249 ;;      Totals:         8       0       0       0       0       0       0
  1250 ;;Total ram usage:        8 bytes
  1251 ;; Hardware stack levels used:    1
  1252 ;; Hardware stack levels required when called:    4
  1253 ;; This function calls:
  1254 ;;		_ledGoToggle
  1255 ;;		_powerCalculateWatts
  1256 ;;		_powerReduction
  1257 ;;		_timerGetCount
  1258 ;;		_timerResetCount
  1259 ;; This function is called by:
  1260 ;;		_main
  1261 ;; This function uses a non-reentrant model
  1262 ;;
  1263                           
  1264                           	psect	text2
  1265  00081E                     __ptext2:
  1266                           	opt stack 0
  1267  00081E                     _mcpUpdatePower:
  1268                           	opt stack 26
  1269                           
  1270                           ;MCP3909_Interface.c: 212: static unsigned long meterEnergyUsedPart = 0;
  1271                           ;MCP3909_Interface.c: 221: static int meterWattsHF = 0;
  1272                           ;MCP3909_Interface.c: 222: static unsigned long timerHFoutLast_ms = 0;
  1273                           ;MCP3909_Interface.c: 224: static bool oneShotHFout = 0;
  1274                           ;MCP3909_Interface.c: 226: if( PORTAbits.RA3 == 0 )
  1275                           
  1276                           ; BSR set to: 0
  1277                           ;incstack = 0
  1278  00081E  B680               	btfsc	3968,3,c	;volatile
  1279  000820  D03E               	goto	l516
  1280                           
  1281                           ;MCP3909_Interface.c: 227: {
  1282                           ;MCP3909_Interface.c: 228: if( oneShotHFout == 0 )
  1283  000822  504A               	movf	mcpUpdatePower@oneShotHFout,w,c
  1284  000824  A4D8               	btfss	status,2,c
  1285  000826  D03D               	goto	l518
  1286                           
  1287                           ;MCP3909_Interface.c: 229: {
  1288                           ;MCP3909_Interface.c: 230: ledGoToggle( 0 );
  1289  000828  0E00               	movlw	0
  1290  00082A  6E22               	movwf	ledGoToggle@ledNum+1,c
  1291  00082C  0E00               	movlw	0
  1292  00082E  6E21               	movwf	ledGoToggle@ledNum,c
  1293  000830  ECCC  F00F         	call	_ledGoToggle	;wreg free
  1294                           
  1295                           ;MCP3909_Interface.c: 232: oneShotHFout = 1;
  1296  000834  0E01               	movlw	1
  1297  000836  6E4A               	movwf	mcpUpdatePower@oneShotHFout,c
  1298                           
  1299                           ;MCP3909_Interface.c: 234: unsigned long timerHFout_ms;
  1300                           ;MCP3909_Interface.c: 235: timerHFout_ms = timerGetCount( 0 );
  1301  000838  0E00               	movlw	0
  1302  00083A  6E14               	movwf	timerGetCount@timerIndex+1,c
  1303  00083C  0E00               	movlw	0
  1304  00083E  6E13               	movwf	timerGetCount@timerIndex,c
  1305  000840  EC85  F00E         	call	_timerGetCount	;wreg free
  1306  000844  C013  F02C         	movff	?_timerGetCount,mcpUpdatePower@timerHFout_ms
  1307  000848  C014  F02D         	movff	?_timerGetCount+1,mcpUpdatePower@timerHFout_ms+1
  1308  00084C  C015  F02E         	movff	?_timerGetCount+2,mcpUpdatePower@timerHFout_ms+2
  1309  000850  C016  F02F         	movff	?_timerGetCount+3,mcpUpdatePower@timerHFout_ms+3
  1310                           
  1311                           ;MCP3909_Interface.c: 236: timerResetCount( 0 );
  1312  000854  0E00               	movlw	0
  1313  000856  6E14               	movwf	timerResetCount@timerIndex+1,c
  1314  000858  0E00               	movlw	0
  1315  00085A  6E13               	movwf	timerResetCount@timerIndex,c
  1316  00085C  ECE8  F00E         	call	_timerResetCount	;wreg free
  1317                           
  1318                           ;MCP3909_Interface.c: 237: timerResetCount( 2 );
  1319  000860  0E00               	movlw	0
  1320  000862  6E14               	movwf	timerResetCount@timerIndex+1,c
  1321  000864  0E02               	movlw	2
  1322  000866  6E13               	movwf	timerResetCount@timerIndex,c
  1323  000868  ECE8  F00E         	call	_timerResetCount	;wreg free
  1324                           
  1325                           ;MCP3909_Interface.c: 239: meterWattsHF = powerCalculateWatts( timerHFout_ms, 1 );
  1326  00086C  C02C  F020         	movff	mcpUpdatePower@timerHFout_ms,powerCalculateWatts@timer_ms
  1327  000870  C02D  F021         	movff	mcpUpdatePower@timerHFout_ms+1,powerCalculateWatts@timer_ms+1
  1328  000874  C02E  F022         	movff	mcpUpdatePower@timerHFout_ms+2,powerCalculateWatts@timer_ms+2
  1329  000878  C02F  F023         	movff	mcpUpdatePower@timerHFout_ms+3,powerCalculateWatts@timer_ms+3
  1330  00087C  0E01               	movlw	1
  1331  00087E  6E24               	movwf	powerCalculateWatts@outHF,c
  1332  000880  ECAE  F00B         	call	_powerCalculateWatts	;wreg free
  1333  000884  C020  F045         	movff	?_powerCalculateWatts,mcpUpdatePower@meterWattsHF
  1334  000888  C021  F046         	movff	?_powerCalculateWatts+1,mcpUpdatePower@meterWattsHF+1
  1335                           
  1336                           ;MCP3909_Interface.c: 241: timerHFoutLast_ms = timerHFout_ms;
  1337  00088C  C02C  F070         	movff	mcpUpdatePower@timerHFout_ms,mcpUpdatePower@timerHFoutLast_ms
  1338  000890  C02D  F071         	movff	mcpUpdatePower@timerHFout_ms+1,mcpUpdatePower@timerHFoutLast_ms+1
  1339  000894  C02E  F072         	movff	mcpUpdatePower@timerHFout_ms+2,mcpUpdatePower@timerHFoutLast_ms+2
  1340  000898  C02F  F073         	movff	mcpUpdatePower@timerHFout_ms+3,mcpUpdatePower@timerHFoutLast_ms+3
  1341                           
  1342                           ;MCP3909_Interface.c: 242: }
  1343                           ;MCP3909_Interface.c: 243: }
  1344  00089C  D002               	goto	l518
  1345  00089E                     l516:
  1346                           
  1347                           ;MCP3909_Interface.c: 244: else
  1348                           ;MCP3909_Interface.c: 245: {
  1349                           ;MCP3909_Interface.c: 246: oneShotHFout = 0;
  1350  00089E  0E00               	movlw	0
  1351  0008A0  6E4A               	movwf	mcpUpdatePower@oneShotHFout,c
  1352  0008A2                     l518:
  1353                           
  1354                           ;MCP3909_Interface.c: 247: }
  1355                           ;MCP3909_Interface.c: 251: static int meterWattsLF = 0;
  1356                           ;MCP3909_Interface.c: 253: static bool oneShotLFout = 0;
  1357                           ;MCP3909_Interface.c: 255: if( (PORTAbits.RA2 == 0) || (PORTAbits.RA4 == 0) )
  1358  0008A2  A480               	btfss	3968,2,c	;volatile
  1359  0008A4  D002               	goto	u2900
  1360  0008A6  B880               	btfsc	3968,4,c	;volatile
  1361  0008A8  D058               	goto	l523
  1362  0008AA                     u2900:
  1363                           
  1364                           ;MCP3909_Interface.c: 256: {
  1365                           ;MCP3909_Interface.c: 257: if( oneShotLFout == 0 )
  1366  0008AA  5049               	movf	mcpUpdatePower@oneShotLFout,w,c
  1367  0008AC  A4D8               	btfss	status,2,c
  1368  0008AE  D057               	goto	l530
  1369                           
  1370                           ;MCP3909_Interface.c: 258: {
  1371                           ;MCP3909_Interface.c: 259: ledGoToggle( 1 );
  1372  0008B0  0E00               	movlw	0
  1373  0008B2  6E22               	movwf	ledGoToggle@ledNum+1,c
  1374  0008B4  0E01               	movlw	1
  1375  0008B6  6E21               	movwf	ledGoToggle@ledNum,c
  1376  0008B8  ECCC  F00F         	call	_ledGoToggle	;wreg free
  1377                           
  1378                           ;MCP3909_Interface.c: 261: oneShotLFout = 1;
  1379  0008BC  0E01               	movlw	1
  1380  0008BE  6E49               	movwf	mcpUpdatePower@oneShotLFout,c
  1381                           
  1382                           ;MCP3909_Interface.c: 263: unsigned long timerLFout_ms;
  1383                           ;MCP3909_Interface.c: 264: timerLFout_ms = timerGetCount( 1 );
  1384  0008C0  0E00               	movlw	0
  1385  0008C2  6E14               	movwf	timerGetCount@timerIndex+1,c
  1386  0008C4  0E01               	movlw	1
  1387  0008C6  6E13               	movwf	timerGetCount@timerIndex,c
  1388  0008C8  EC85  F00E         	call	_timerGetCount	;wreg free
  1389  0008CC  C013  F028         	movff	?_timerGetCount,mcpUpdatePower@timerLFout_ms
  1390  0008D0  C014  F029         	movff	?_timerGetCount+1,mcpUpdatePower@timerLFout_ms+1
  1391  0008D4  C015  F02A         	movff	?_timerGetCount+2,mcpUpdatePower@timerLFout_ms+2
  1392  0008D8  C016  F02B         	movff	?_timerGetCount+3,mcpUpdatePower@timerLFout_ms+3
  1393                           
  1394                           ;MCP3909_Interface.c: 265: timerResetCount( 1 );
  1395  0008DC  0E00               	movlw	0
  1396  0008DE  6E14               	movwf	timerResetCount@timerIndex+1,c
  1397  0008E0  0E01               	movlw	1
  1398  0008E2  6E13               	movwf	timerResetCount@timerIndex,c
  1399  0008E4  ECE8  F00E         	call	_timerResetCount	;wreg free
  1400                           
  1401                           ;MCP3909_Interface.c: 266: timerResetCount( 2 );
  1402  0008E8  0E00               	movlw	0
  1403  0008EA  6E14               	movwf	timerResetCount@timerIndex+1,c
  1404  0008EC  0E02               	movlw	2
  1405  0008EE  6E13               	movwf	timerResetCount@timerIndex,c
  1406  0008F0  ECE8  F00E         	call	_timerResetCount	;wreg free
  1407                           
  1408                           ;MCP3909_Interface.c: 268: meterWattsLF = powerCalculateWatts( timerLFout_ms, 0 );
  1409  0008F4  C028  F020         	movff	mcpUpdatePower@timerLFout_ms,powerCalculateWatts@timer_ms
  1410  0008F8  C029  F021         	movff	mcpUpdatePower@timerLFout_ms+1,powerCalculateWatts@timer_ms+1
  1411  0008FC  C02A  F022         	movff	mcpUpdatePower@timerLFout_ms+2,powerCalculateWatts@timer_ms+2
  1412  000900  C02B  F023         	movff	mcpUpdatePower@timerLFout_ms+3,powerCalculateWatts@timer_ms+3
  1413  000904  0E00               	movlw	0
  1414  000906  6E24               	movwf	powerCalculateWatts@outHF,c
  1415  000908  ECAE  F00B         	call	_powerCalculateWatts	;wreg free
  1416  00090C  C020  F043         	movff	?_powerCalculateWatts,mcpUpdatePower@meterWattsLF
  1417  000910  C021  F044         	movff	?_powerCalculateWatts+1,mcpUpdatePower@meterWattsLF+1
  1418                           
  1419                           ;MCP3909_Interface.c: 271: meterEnergyUsedPart += 27000 * (unsigned long) 16;
  1420  000914  0E80               	movlw	128
  1421  000916  0100               	movlb	0	; () banked
  1422  000918  2774               	addwf	mcpUpdatePower@meterEnergyUsedPart& (0+255),f,b
  1423  00091A  0E97               	movlw	151
  1424  00091C  2375               	addwfc	(mcpUpdatePower@meterEnergyUsedPart+1)& (0+255),f,b
  1425  00091E  0E06               	movlw	6
  1426  000920  2376               	addwfc	(mcpUpdatePower@meterEnergyUsedPart+2)& (0+255),f,b
  1427  000922  0E00               	movlw	0
  1428  000924  2377               	addwfc	(mcpUpdatePower@meterEnergyUsedPart+3)& (0+255),f,b
  1429                           
  1430                           ;MCP3909_Interface.c: 272: while( meterEnergyUsedPart > 100000 )
  1431  000926  D00E               	goto	l527
  1432  000928                     l4049:
  1433                           
  1434                           ; BSR set to: 0
  1435                           ;MCP3909_Interface.c: 273: {
  1436                           ;MCP3909_Interface.c: 274: meterEnergyUsed_global++;
  1437  000928  0E01               	movlw	1
  1438  00092A  263D               	addwf	_meterEnergyUsed_global,f,c
  1439  00092C  0E00               	movlw	0
  1440  00092E  223E               	addwfc	_meterEnergyUsed_global+1,f,c
  1441  000930  223F               	addwfc	_meterEnergyUsed_global+2,f,c
  1442  000932  2240               	addwfc	_meterEnergyUsed_global+3,f,c
  1443                           
  1444                           ;MCP3909_Interface.c: 275: meterEnergyUsedPart -= 100000;
  1445  000934  0EA0               	movlw	160
  1446  000936  5F74               	subwf	mcpUpdatePower@meterEnergyUsedPart& (0+255),f,b
  1447  000938  0E86               	movlw	134
  1448  00093A  5B75               	subwfb	(mcpUpdatePower@meterEnergyUsedPart+1)& (0+255),f,b
  1449  00093C  0E01               	movlw	1
  1450  00093E  5B76               	subwfb	(mcpUpdatePower@meterEnergyUsedPart+2)& (0+255),f,b
  1451  000940  0E00               	movlw	0
  1452  000942  5B77               	subwfb	(mcpUpdatePower@meterEnergyUsedPart+3)& (0+255),f,b
  1453  000944                     l527:
  1454                           
  1455                           ; BSR set to: 0
  1456  000944  5177               	movf	(mcpUpdatePower@meterEnergyUsedPart+3)& (0+255),w,b
  1457  000946  E1F0               	bnz	l4049
  1458  000948  0EA1               	movlw	161
  1459  00094A  5D74               	subwf	mcpUpdatePower@meterEnergyUsedPart& (0+255),w,b
  1460  00094C  0E86               	movlw	134
  1461  00094E  5975               	subwfb	(mcpUpdatePower@meterEnergyUsedPart+1)& (0+255),w,b
  1462  000950  0E01               	movlw	1
  1463  000952  5976               	subwfb	(mcpUpdatePower@meterEnergyUsedPart+2)& (0+255),w,b
  1464  000954  A0D8               	btfss	status,0,c
  1465  000956  D003               	goto	l530
  1466  000958  D7E7               	goto	l528
  1467  00095A                     l523:
  1468                           
  1469                           ;MCP3909_Interface.c: 279: else
  1470                           ;MCP3909_Interface.c: 280: {
  1471                           ;MCP3909_Interface.c: 281: oneShotLFout = 0;
  1472                           
  1473                           ; BSR set to: 0
  1474  00095A  0E00               	movlw	0
  1475  00095C  6E49               	movwf	mcpUpdatePower@oneShotLFout,c
  1476  00095E                     l530:
  1477                           
  1478                           ;MCP3909_Interface.c: 282: }
  1479                           ;MCP3909_Interface.c: 293: if( meterWattsLF > 500 )
  1480  00095E  BE44               	btfsc	mcpUpdatePower@meterWattsLF+1,7,c
  1481  000960  D00B               	goto	l531
  1482  000962  0EF5               	movlw	245
  1483  000964  5C43               	subwf	mcpUpdatePower@meterWattsLF,w,c
  1484  000966  0E01               	movlw	1
  1485  000968  5844               	subwfb	mcpUpdatePower@meterWattsLF+1,w,c
  1486  00096A  A0D8               	btfss	status,0,c
  1487  00096C  D005               	goto	l531
  1488                           
  1489                           ;MCP3909_Interface.c: 294: {
  1490                           ;MCP3909_Interface.c: 295: meterWatts_global = meterWattsLF;
  1491  00096E  C043  F07C         	movff	mcpUpdatePower@meterWattsLF,_meterWatts_global
  1492  000972  C044  F07D         	movff	mcpUpdatePower@meterWattsLF+1,_meterWatts_global+1
  1493  000976  D004               	goto	L2
  1494  000978                     l531:
  1495                           
  1496                           ;MCP3909_Interface.c: 297: else
  1497                           ;MCP3909_Interface.c: 298: {
  1498                           ;MCP3909_Interface.c: 299: meterWatts_global = meterWattsHF;
  1499                           
  1500                           ; BSR set to: 0
  1501  000978  C045  F07C         	movff	mcpUpdatePower@meterWattsHF,_meterWatts_global
  1502  00097C  C046  F07D         	movff	mcpUpdatePower@meterWattsHF+1,_meterWatts_global+1
  1503  000980                     L2:
  1504  000980  0100               	movlb	0	; () banked
  1505  000982  0E00               	movlw	0
  1506  000984  BF7D               	btfsc	(_meterWatts_global+1)& (0+255),7,b
  1507  000986  0EFF               	movlw	-1
  1508  000988  6F7E               	movwf	(_meterWatts_global+2)& (0+255),b
  1509  00098A  6F7F               	movwf	(_meterWatts_global+3)& (0+255),b
  1510                           
  1511                           ; BSR set to: 0
  1512                           ;MCP3909_Interface.c: 300: }
  1513                           ;MCP3909_Interface.c: 303: powerReduction( timerHFoutLast_ms );
  1514                           
  1515                           ; BSR set to: 0
  1516  00098C  C070  F020         	movff	mcpUpdatePower@timerHFoutLast_ms,powerReduction@timerLast_ms
  1517  000990  C071  F021         	movff	mcpUpdatePower@timerHFoutLast_ms+1,powerReduction@timerLast_ms+1
  1518  000994  C072  F022         	movff	mcpUpdatePower@timerHFoutLast_ms+2,powerReduction@timerLast_ms+2
  1519  000998  C073  F023         	movff	mcpUpdatePower@timerHFoutLast_ms+3,powerReduction@timerLast_ms+3
  1520  00099C  EC11  F00A         	call	_powerReduction	;wreg free
  1521                           
  1522                           ;MCP3909_Interface.c: 307: meterWatts_global = 78;
  1523  0009A0  0E4E               	movlw	78
  1524  0009A2  0100               	movlb	0	; () banked
  1525  0009A4  6F7C               	movwf	_meterWatts_global& (0+255),b
  1526  0009A6  0E00               	movlw	0
  1527  0009A8  6F7D               	movwf	(_meterWatts_global+1)& (0+255),b
  1528  0009AA  0E00               	movlw	0
  1529  0009AC  6F7E               	movwf	(_meterWatts_global+2)& (0+255),b
  1530  0009AE  0E00               	movlw	0
  1531  0009B0  6F7F               	movwf	(_meterWatts_global+3)& (0+255),b
  1532  0009B2  0012               	return	
  1533  0009B4                     __end_of_mcpUpdatePower:
  1534                           	opt stack 0
  1535                           tblptru	equ	0xFF8
  1536                           intcon	equ	0xFF2
  1537                           postinc0	equ	0xFEE
  1538                           wreg	equ	0xFE8
  1539                           status	equ	0xFD8
  1540                           
  1541 ;; *************** function _timerResetCount *****************
  1542 ;; Defined at:
  1543 ;;		line 100 in file "Timer.c"
  1544 ;; Parameters:    Size  Location     Type
  1545 ;;  timerIndex      2   18[COMRAM] int 
  1546 ;; Auto vars:     Size  Location     Type
  1547 ;;		None
  1548 ;; Return value:  Size  Location     Type
  1549 ;;                  1    wreg      void 
  1550 ;; Registers used:
  1551 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1552 ;; Tracked objects:
  1553 ;;		On entry : 0/0
  1554 ;;		On exit  : 0/0
  1555 ;;		Unchanged: 0/0
  1556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1557 ;;      Params:         2       0       0       0       0       0       0
  1558 ;;      Locals:         0       0       0       0       0       0       0
  1559 ;;      Temps:          2       0       0       0       0       0       0
  1560 ;;      Totals:         4       0       0       0       0       0       0
  1561 ;;Total ram usage:        4 bytes
  1562 ;; Hardware stack levels used:    1
  1563 ;; Hardware stack levels required when called:    1
  1564 ;; This function calls:
  1565 ;;		Nothing
  1566 ;; This function is called by:
  1567 ;;		_mcpUpdatePower
  1568 ;; This function uses a non-reentrant model
  1569 ;;
  1570                           
  1571                           	psect	text3
  1572  001DD0                     __ptext3:
  1573                           	opt stack 0
  1574  001DD0                     _timerResetCount:
  1575                           	opt stack 28
  1576                           
  1577                           ;Timer.c: 102: timerCount_ms[timerIndex] = 0;
  1578                           
  1579                           ; BSR set to: 0
  1580                           ;incstack = 0
  1581  001DD0  0E60               	movlw	low _timerCount_ms
  1582  001DD2  6E15               	movwf	??_timerResetCount& (0+255),c
  1583  001DD4  0E00               	movlw	high _timerCount_ms
  1584  001DD6  6E16               	movwf	(??_timerResetCount+1)& (0+255),c
  1585  001DD8  90D8               	bcf	status,0,c
  1586  001DDA  3413               	rlcf	timerResetCount@timerIndex,w,c
  1587  001DDC  6ED9               	movwf	fsr2l,c
  1588  001DDE  3414               	rlcf	timerResetCount@timerIndex+1,w,c
  1589  001DE0  6EDA               	movwf	fsr2h,c
  1590  001DE2  90D8               	bcf	status,0,c
  1591  001DE4  36D9               	rlcf	fsr2l,f,c
  1592  001DE6  36DA               	rlcf	fsr2h,f,c
  1593  001DE8  5015               	movf	??_timerResetCount,w,c
  1594  001DEA  26D9               	addwf	fsr2l,f,c
  1595  001DEC  5016               	movf	??_timerResetCount+1,w,c
  1596  001DEE  22DA               	addwfc	fsr2h,f,c
  1597  001DF0  6ADE               	clrf	postinc2,c
  1598  001DF2  6ADE               	clrf	postinc2,c
  1599  001DF4  6ADE               	clrf	postinc2,c
  1600  001DF6  6ADD               	clrf	postdec2,c
  1601  001DF8  0012               	return	
  1602  001DFA                     __end_of_timerResetCount:
  1603                           	opt stack 0
  1604                           tblptru	equ	0xFF8
  1605                           intcon	equ	0xFF2
  1606                           postinc0	equ	0xFEE
  1607                           wreg	equ	0xFE8
  1608                           postinc2	equ	0xFDE
  1609                           postdec2	equ	0xFDD
  1610                           fsr2h	equ	0xFDA
  1611                           fsr2l	equ	0xFD9
  1612                           status	equ	0xFD8
  1613                           
  1614 ;; *************** function _powerReduction *****************
  1615 ;; Defined at:
  1616 ;;		line 335 in file "MCP3909_Interface.c"
  1617 ;; Parameters:    Size  Location     Type
  1618 ;;  timerLast_ms    4   31[COMRAM] unsigned long 
  1619 ;; Auto vars:     Size  Location     Type
  1620 ;;  timerReduce_    4   35[COMRAM] unsigned long 
  1621 ;; Return value:  Size  Location     Type
  1622 ;;                  1    wreg      void 
  1623 ;; Registers used:
  1624 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1625 ;; Tracked objects:
  1626 ;;		On entry : 0/0
  1627 ;;		On exit  : 0/0
  1628 ;;		Unchanged: 0/0
  1629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1630 ;;      Params:         4       0       0       0       0       0       0
  1631 ;;      Locals:         4       0       0       0       0       0       0
  1632 ;;      Temps:          0       0       0       0       0       0       0
  1633 ;;      Totals:         8       0       0       0       0       0       0
  1634 ;;Total ram usage:        8 bytes
  1635 ;; Hardware stack levels used:    1
  1636 ;; Hardware stack levels required when called:    2
  1637 ;; This function calls:
  1638 ;;		___lldiv
  1639 ;;		_timerGetCount
  1640 ;; This function is called by:
  1641 ;;		_mcpUpdatePower
  1642 ;; This function uses a non-reentrant model
  1643 ;;
  1644                           
  1645                           	psect	text4
  1646  001422                     __ptext4:
  1647                           	opt stack 0
  1648  001422                     _powerReduction:
  1649                           	opt stack 27
  1650                           
  1651                           ;MCP3909_Interface.c: 344: unsigned long timerReduce_ms;
  1652                           ;MCP3909_Interface.c: 345: static int countReduce = 0;
  1653                           ;MCP3909_Interface.c: 347: timerReduce_ms = timerGetCount( 2 );
  1654                           
  1655                           ;incstack = 0
  1656  001422  0E00               	movlw	0
  1657  001424  6E14               	movwf	timerGetCount@timerIndex+1,c
  1658  001426  0E02               	movlw	2
  1659  001428  6E13               	movwf	timerGetCount@timerIndex,c
  1660  00142A  EC85  F00E         	call	_timerGetCount	;wreg free
  1661  00142E  C013  F024         	movff	?_timerGetCount,powerReduction@timerReduce_ms
  1662  001432  C014  F025         	movff	?_timerGetCount+1,powerReduction@timerReduce_ms+1
  1663  001436  C015  F026         	movff	?_timerGetCount+2,powerReduction@timerReduce_ms+2
  1664  00143A  C016  F027         	movff	?_timerGetCount+3,powerReduction@timerReduce_ms+3
  1665                           
  1666                           ;MCP3909_Interface.c: 349: if( (timerReduce_ms > 90000) || (timerLast_ms == 0) )
  1667  00143E  5027               	movf	powerReduction@timerReduce_ms+3,w,c
  1668  001440  E10E               	bnz	l3977
  1669  001442  0E91               	movlw	145
  1670  001444  5C24               	subwf	powerReduction@timerReduce_ms,w,c
  1671  001446  0E5F               	movlw	95
  1672  001448  5825               	subwfb	powerReduction@timerReduce_ms+1,w,c
  1673  00144A  0E01               	movlw	1
  1674  00144C  5826               	subwfb	powerReduction@timerReduce_ms+2,w,c
  1675  00144E  B0D8               	btfsc	status,0,c
  1676  001450  D006               	goto	u2850
  1677  001452  5020               	movf	powerReduction@timerLast_ms,w,c
  1678  001454  1021               	iorwf	powerReduction@timerLast_ms+1,w,c
  1679  001456  1022               	iorwf	powerReduction@timerLast_ms+2,w,c
  1680  001458  1023               	iorwf	powerReduction@timerLast_ms+3,w,c
  1681  00145A  A4D8               	btfss	status,2,c
  1682  00145C  D00A               	goto	l543
  1683  00145E                     u2850:
  1684  00145E                     l3977:
  1685                           
  1686                           ;MCP3909_Interface.c: 350: {
  1687                           ;MCP3909_Interface.c: 351: meterWatts_global = 0;
  1688  00145E  0E00               	movlw	0
  1689  001460  0100               	movlb	0	; () banked
  1690  001462  6F7C               	movwf	_meterWatts_global& (0+255),b
  1691  001464  0E00               	movlw	0
  1692  001466  6F7D               	movwf	(_meterWatts_global+1)& (0+255),b
  1693  001468  0E00               	movlw	0
  1694  00146A  6F7E               	movwf	(_meterWatts_global+2)& (0+255),b
  1695  00146C  0E00               	movlw	0
  1696  00146E  6F7F               	movwf	(_meterWatts_global+3)& (0+255),b
  1697                           
  1698                           ;MCP3909_Interface.c: 352: }
  1699  001470  0012               	return	
  1700  001472                     l543:
  1701                           
  1702                           ;MCP3909_Interface.c: 353: else if( timerReduce_ms > timerLast_ms )
  1703                           
  1704                           ; BSR set to: 0
  1705  001472  5024               	movf	powerReduction@timerReduce_ms,w,c
  1706  001474  5C20               	subwf	powerReduction@timerLast_ms,w,c
  1707  001476  5025               	movf	powerReduction@timerReduce_ms+1,w,c
  1708  001478  5821               	subwfb	powerReduction@timerLast_ms+1,w,c
  1709  00147A  5026               	movf	powerReduction@timerReduce_ms+2,w,c
  1710  00147C  5822               	subwfb	powerReduction@timerLast_ms+2,w,c
  1711  00147E  5027               	movf	powerReduction@timerReduce_ms+3,w,c
  1712  001480  5823               	subwfb	powerReduction@timerLast_ms+3,w,c
  1713  001482  B0D8               	btfsc	status,0,c
  1714  001484  0012               	return	
  1715                           
  1716                           ;MCP3909_Interface.c: 354: {
  1717                           ;MCP3909_Interface.c: 355: meterWatts_global = (((((unsigned long) 27000 * (unsigned lon
      +                          g) 3600) / ((unsigned long) 100000 / (unsigned long) 1000))) * (unsigned long) 1) / (uns
      +                          igned long) timerReduce_ms;
  1718  001486  0EE0               	movlw	224
  1719  001488  6E13               	movwf	___lldiv@dividend,c
  1720  00148A  0ED4               	movlw	212
  1721  00148C  6E14               	movwf	___lldiv@dividend+1,c
  1722  00148E  0E0E               	movlw	14
  1723  001490  6E15               	movwf	___lldiv@dividend+2,c
  1724  001492  0E00               	movlw	0
  1725  001494  6E16               	movwf	___lldiv@dividend+3,c
  1726  001496  C024  F017         	movff	powerReduction@timerReduce_ms,___lldiv@divisor
  1727  00149A  C025  F018         	movff	powerReduction@timerReduce_ms+1,___lldiv@divisor+1
  1728  00149E  C026  F019         	movff	powerReduction@timerReduce_ms+2,___lldiv@divisor+2
  1729  0014A2  C027  F01A         	movff	powerReduction@timerReduce_ms+3,___lldiv@divisor+3
  1730  0014A6  EC32  F00B         	call	___lldiv	;wreg free
  1731  0014AA  C013  F07C         	movff	?___lldiv,_meterWatts_global
  1732  0014AE  C014  F07D         	movff	?___lldiv+1,_meterWatts_global+1
  1733  0014B2  C015  F07E         	movff	?___lldiv+2,_meterWatts_global+2
  1734  0014B6  C016  F07F         	movff	?___lldiv+3,_meterWatts_global+3
  1735  0014BA  0012               	return	
  1736  0014BC                     __end_of_powerReduction:
  1737                           	opt stack 0
  1738                           tblptru	equ	0xFF8
  1739                           intcon	equ	0xFF2
  1740                           postinc0	equ	0xFEE
  1741                           wreg	equ	0xFE8
  1742                           postinc2	equ	0xFDE
  1743                           postdec2	equ	0xFDD
  1744                           fsr2h	equ	0xFDA
  1745                           fsr2l	equ	0xFD9
  1746                           status	equ	0xFD8
  1747                           
  1748 ;; *************** function _timerGetCount *****************
  1749 ;; Defined at:
  1750 ;;		line 95 in file "Timer.c"
  1751 ;; Parameters:    Size  Location     Type
  1752 ;;  timerIndex      2   18[COMRAM] int 
  1753 ;; Auto vars:     Size  Location     Type
  1754 ;;		None
  1755 ;; Return value:  Size  Location     Type
  1756 ;;                  4   18[COMRAM] unsigned long 
  1757 ;; Registers used:
  1758 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1759 ;; Tracked objects:
  1760 ;;		On entry : 0/0
  1761 ;;		On exit  : 0/0
  1762 ;;		Unchanged: 0/0
  1763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1764 ;;      Params:         4       0       0       0       0       0       0
  1765 ;;      Locals:         0       0       0       0       0       0       0
  1766 ;;      Temps:          2       0       0       0       0       0       0
  1767 ;;      Totals:         6       0       0       0       0       0       0
  1768 ;;Total ram usage:        6 bytes
  1769 ;; Hardware stack levels used:    1
  1770 ;; Hardware stack levels required when called:    1
  1771 ;; This function calls:
  1772 ;;		Nothing
  1773 ;; This function is called by:
  1774 ;;		_main
  1775 ;;		_mcpUpdatePower
  1776 ;;		_powerReduction
  1777 ;; This function uses a non-reentrant model
  1778 ;;
  1779                           
  1780                           	psect	text5
  1781  001D0A                     __ptext5:
  1782                           	opt stack 0
  1783  001D0A                     _timerGetCount:
  1784                           	opt stack 29
  1785                           
  1786                           ;Timer.c: 97: return timerCount_ms[timerIndex];
  1787                           
  1788                           ;incstack = 0
  1789  001D0A  0E60               	movlw	low _timerCount_ms
  1790  001D0C  6E17               	movwf	??_timerGetCount& (0+255),c
  1791  001D0E  0E00               	movlw	high _timerCount_ms
  1792  001D10  6E18               	movwf	(??_timerGetCount+1)& (0+255),c
  1793  001D12  90D8               	bcf	status,0,c
  1794  001D14  3413               	rlcf	timerGetCount@timerIndex,w,c
  1795  001D16  6ED9               	movwf	fsr2l,c
  1796  001D18  3414               	rlcf	timerGetCount@timerIndex+1,w,c
  1797  001D1A  6EDA               	movwf	fsr2h,c
  1798  001D1C  90D8               	bcf	status,0,c
  1799  001D1E  36D9               	rlcf	fsr2l,f,c
  1800  001D20  36DA               	rlcf	fsr2h,f,c
  1801  001D22  5017               	movf	??_timerGetCount,w,c
  1802  001D24  26D9               	addwf	fsr2l,f,c
  1803  001D26  5018               	movf	??_timerGetCount+1,w,c
  1804  001D28  22DA               	addwfc	fsr2h,f,c
  1805  001D2A  CFDE F013          	movff	postinc2,?_timerGetCount
  1806  001D2E  CFDE F014          	movff	postinc2,?_timerGetCount+1
  1807  001D32  CFDE F015          	movff	postinc2,?_timerGetCount+2
  1808  001D36  CFDE F016          	movff	postinc2,?_timerGetCount+3
  1809  001D3A  0012               	return	
  1810  001D3C                     __end_of_timerGetCount:
  1811                           	opt stack 0
  1812                           tblptru	equ	0xFF8
  1813                           intcon	equ	0xFF2
  1814                           postinc0	equ	0xFEE
  1815                           wreg	equ	0xFE8
  1816                           postinc2	equ	0xFDE
  1817                           postdec2	equ	0xFDD
  1818                           fsr2h	equ	0xFDA
  1819                           fsr2l	equ	0xFD9
  1820                           status	equ	0xFD8
  1821                           
  1822 ;; *************** function _powerCalculateWatts *****************
  1823 ;; Defined at:
  1824 ;;		line 312 in file "MCP3909_Interface.c"
  1825 ;; Parameters:    Size  Location     Type
  1826 ;;  timer_ms        4   31[COMRAM] unsigned long 
  1827 ;;  outHF           1   35[COMRAM] unsigned char 
  1828 ;; Auto vars:     Size  Location     Type
  1829 ;;  calcWatts       2   36[COMRAM] int 
  1830 ;; Return value:  Size  Location     Type
  1831 ;;                  4   31[COMRAM] unsigned long 
  1832 ;; Registers used:
  1833 ;;		wreg, status,2, status,0, cstack
  1834 ;; Tracked objects:
  1835 ;;		On entry : 0/0
  1836 ;;		On exit  : 0/0
  1837 ;;		Unchanged: 0/0
  1838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1839 ;;      Params:         5       0       0       0       0       0       0
  1840 ;;      Locals:         2       0       0       0       0       0       0
  1841 ;;      Temps:          0       0       0       0       0       0       0
  1842 ;;      Totals:         7       0       0       0       0       0       0
  1843 ;;Total ram usage:        7 bytes
  1844 ;; Hardware stack levels used:    1
  1845 ;; Hardware stack levels required when called:    2
  1846 ;; This function calls:
  1847 ;;		___lldiv
  1848 ;; This function is called by:
  1849 ;;		_mcpUpdatePower
  1850 ;; This function uses a non-reentrant model
  1851 ;;
  1852                           
  1853                           	psect	text6
  1854  00175C                     __ptext6:
  1855                           	opt stack 0
  1856  00175C                     _powerCalculateWatts:
  1857                           	opt stack 27
  1858                           
  1859                           ;MCP3909_Interface.c: 319: int calcWatts;
  1860                           ;MCP3909_Interface.c: 321: if( outHF == 1 )
  1861                           
  1862                           ;incstack = 0
  1863  00175C  0424               	decf	powerCalculateWatts@outHF,w,c
  1864  00175E  A4D8               	btfss	status,2,c
  1865  001760  D013               	goto	l536
  1866                           
  1867                           ;MCP3909_Interface.c: 322: {
  1868                           ;MCP3909_Interface.c: 324: calcWatts = (((((unsigned long) 27000 * (unsigned long) 3600)
      +                           / ((unsigned long) 100000 / (unsigned long) 1000))) * (unsigned long) 1) / (unsigned lo
      +                          ng) timer_ms;
  1869  001762  0EE0               	movlw	224
  1870  001764  6E13               	movwf	___lldiv@dividend,c
  1871  001766  0ED4               	movlw	212
  1872  001768  6E14               	movwf	___lldiv@dividend+1,c
  1873  00176A  0E0E               	movlw	14
  1874  00176C  6E15               	movwf	___lldiv@dividend+2,c
  1875  00176E  0E00               	movlw	0
  1876  001770  6E16               	movwf	___lldiv@dividend+3,c
  1877  001772  C020  F017         	movff	powerCalculateWatts@timer_ms,___lldiv@divisor
  1878  001776  C021  F018         	movff	powerCalculateWatts@timer_ms+1,___lldiv@divisor+1
  1879  00177A  C022  F019         	movff	powerCalculateWatts@timer_ms+2,___lldiv@divisor+2
  1880  00177E  C023  F01A         	movff	powerCalculateWatts@timer_ms+3,___lldiv@divisor+3
  1881  001782  EC32  F00B         	call	___lldiv	;wreg free
  1882  001786  D012               	goto	L3
  1883  001788                     l536:
  1884                           
  1885                           ;MCP3909_Interface.c: 326: else
  1886                           ;MCP3909_Interface.c: 327: {
  1887                           ;MCP3909_Interface.c: 329: calcWatts = (((((unsigned long) 27000 * (unsigned long) 3600)
      +                           / ((unsigned long) 100000 / (unsigned long) 1000))) * (unsigned long) 1) / (unsigned lo
      +                          ng) timer_ms;
  1888  001788  0EE0               	movlw	224
  1889  00178A  6E13               	movwf	___lldiv@dividend,c
  1890  00178C  0ED4               	movlw	212
  1891  00178E  6E14               	movwf	___lldiv@dividend+1,c
  1892  001790  0E0E               	movlw	14
  1893  001792  6E15               	movwf	___lldiv@dividend+2,c
  1894  001794  0E00               	movlw	0
  1895  001796  6E16               	movwf	___lldiv@dividend+3,c
  1896  001798  C020  F017         	movff	powerCalculateWatts@timer_ms,___lldiv@divisor
  1897  00179C  C021  F018         	movff	powerCalculateWatts@timer_ms+1,___lldiv@divisor+1
  1898  0017A0  C022  F019         	movff	powerCalculateWatts@timer_ms+2,___lldiv@divisor+2
  1899  0017A4  C023  F01A         	movff	powerCalculateWatts@timer_ms+3,___lldiv@divisor+3
  1900  0017A8  EC32  F00B         	call	___lldiv	;wreg free
  1901  0017AC                     L3:
  1902  0017AC  C013  F025         	movff	?___lldiv,powerCalculateWatts@calcWatts
  1903  0017B0  C014  F026         	movff	?___lldiv+1,powerCalculateWatts@calcWatts+1
  1904                           
  1905                           ;MCP3909_Interface.c: 330: }
  1906                           ;MCP3909_Interface.c: 332: return calcWatts;
  1907  0017B4  C025  F020         	movff	powerCalculateWatts@calcWatts,?_powerCalculateWatts
  1908  0017B8  C026  F021         	movff	powerCalculateWatts@calcWatts+1,?_powerCalculateWatts+1
  1909  0017BC  0E00               	movlw	0
  1910  0017BE  BE21               	btfsc	?_powerCalculateWatts+1,7,c
  1911  0017C0  0EFF               	movlw	-1
  1912  0017C2  6E22               	movwf	?_powerCalculateWatts+2,c
  1913  0017C4  6E23               	movwf	?_powerCalculateWatts+3,c
  1914  0017C6  0012               	return	
  1915  0017C8                     __end_of_powerCalculateWatts:
  1916                           	opt stack 0
  1917                           tblptru	equ	0xFF8
  1918                           intcon	equ	0xFF2
  1919                           postinc0	equ	0xFEE
  1920                           wreg	equ	0xFE8
  1921                           postinc2	equ	0xFDE
  1922                           postdec2	equ	0xFDD
  1923                           fsr2h	equ	0xFDA
  1924                           fsr2l	equ	0xFD9
  1925                           status	equ	0xFD8
  1926                           
  1927 ;; *************** function _ledGoToggle *****************
  1928 ;; Defined at:
  1929 ;;		line 286 in file "LEDControl.c"
  1930 ;; Parameters:    Size  Location     Type
  1931 ;;  ledNum          2   32[COMRAM] int 
  1932 ;; Auto vars:     Size  Location     Type
  1933 ;;		None
  1934 ;; Return value:  Size  Location     Type
  1935 ;;                  1    wreg      void 
  1936 ;; Registers used:
  1937 ;;		wreg, status,2, status,0, cstack
  1938 ;; Tracked objects:
  1939 ;;		On entry : 0/0
  1940 ;;		On exit  : 0/0
  1941 ;;		Unchanged: 0/0
  1942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1943 ;;      Params:         2       0       0       0       0       0       0
  1944 ;;      Locals:         0       0       0       0       0       0       0
  1945 ;;      Temps:          0       0       0       0       0       0       0
  1946 ;;      Totals:         2       0       0       0       0       0       0
  1947 ;;Total ram usage:        2 bytes
  1948 ;; Hardware stack levels used:    1
  1949 ;; Hardware stack levels required when called:    3
  1950 ;; This function calls:
  1951 ;;		_ledToggle
  1952 ;; This function is called by:
  1953 ;;		_mcpUpdatePower
  1954 ;; This function uses a non-reentrant model
  1955 ;;
  1956                           
  1957                           	psect	text7
  1958  001F98                     __ptext7:
  1959                           	opt stack 0
  1960  001F98                     _ledGoToggle:
  1961                           	opt stack 26
  1962                           
  1963                           ;LEDControl.c: 288: if( 1 != 1 )
  1964                           
  1965                           ;incstack = 0
  1966  001F98  0012               	return	
  1967  001F9A                     __end_of_ledGoToggle:
  1968                           	opt stack 0
  1969                           tblptru	equ	0xFF8
  1970                           intcon	equ	0xFF2
  1971                           postinc0	equ	0xFEE
  1972                           wreg	equ	0xFE8
  1973                           postinc2	equ	0xFDE
  1974                           postdec2	equ	0xFDD
  1975                           fsr2h	equ	0xFDA
  1976                           fsr2l	equ	0xFD9
  1977                           status	equ	0xFD8
  1978                           
  1979 ;; *************** function _mcpInit *****************
  1980 ;; Defined at:
  1981 ;;		line 153 in file "MCP3909_Interface.c"
  1982 ;; Parameters:    Size  Location     Type
  1983 ;;		None
  1984 ;; Auto vars:     Size  Location     Type
  1985 ;;		None
  1986 ;; Return value:  Size  Location     Type
  1987 ;;                  1    wreg      void 
  1988 ;; Registers used:
  1989 ;;		wreg, status,2, status,0, cstack
  1990 ;; Tracked objects:
  1991 ;;		On entry : 0/0
  1992 ;;		On exit  : 0/0
  1993 ;;		Unchanged: 0/0
  1994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1995 ;;      Params:         0       0       0       0       0       0       0
  1996 ;;      Locals:         0       0       0       0       0       0       0
  1997 ;;      Temps:          0       0       0       0       0       0       0
  1998 ;;      Totals:         0       0       0       0       0       0       0
  1999 ;;Total ram usage:        0 bytes
  2000 ;; Hardware stack levels used:    1
  2001 ;; Hardware stack levels required when called:    3
  2002 ;; This function calls:
  2003 ;;		_delayMS10
  2004 ;;		_mcpInitF
  2005 ;; This function is called by:
  2006 ;;		_main
  2007 ;; This function uses a non-reentrant model
  2008 ;;
  2009                           
  2010                           	psect	text8
  2011  001CA4                     __ptext8:
  2012                           	opt stack 0
  2013  001CA4                     _mcpInit:
  2014                           	opt stack 27
  2015                           
  2016                           ;MCP3909_Interface.c: 155: TRISAbits.TRISA3 = 1;
  2017                           
  2018                           ;incstack = 0
  2019  001CA4  8692               	bsf	3986,3,c	;volatile
  2020                           
  2021                           ;MCP3909_Interface.c: 156: TRISAbits.TRISA2 = 1;
  2022  001CA6  8492               	bsf	3986,2,c	;volatile
  2023                           
  2024                           ;MCP3909_Interface.c: 157: TRISAbits.TRISA4 = 1;
  2025  001CA8  8892               	bsf	3986,4,c	;volatile
  2026                           
  2027                           ;MCP3909_Interface.c: 159: TRISCbits.TRISC6 = 0;
  2028  001CAA  9C94               	bcf	3988,6,c	;volatile
  2029                           
  2030                           ;MCP3909_Interface.c: 160: TRISCbits.TRISC7 = 0;
  2031  001CAC  9E94               	bcf	3988,7,c	;volatile
  2032                           
  2033                           ;MCP3909_Interface.c: 161: TRISCbits.TRISC4 = 0;
  2034  001CAE  9894               	bcf	3988,4,c	;volatile
  2035                           
  2036                           ;MCP3909_Interface.c: 162: TRISCbits.TRISC3 = 0;
  2037  001CB0  9694               	bcf	3988,3,c	;volatile
  2038                           
  2039                           ;MCP3909_Interface.c: 164: LATCbits.LATC6 = 1;
  2040  001CB2  8C8B               	bsf	3979,6,c	;volatile
  2041                           
  2042                           ;MCP3909_Interface.c: 166: meterEnergyUsedPart = 0;
  2043  001CB4  0E00               	movlw	0
  2044  001CB6  0100               	movlb	0	; () banked
  2045  001CB8  6F78               	movwf	_meterEnergyUsedPart& (0+255),b
  2046  001CBA  0E00               	movlw	0
  2047  001CBC  6F79               	movwf	(_meterEnergyUsedPart+1)& (0+255),b
  2048  001CBE  0E00               	movlw	0
  2049  001CC0  6F7A               	movwf	(_meterEnergyUsedPart+2)& (0+255),b
  2050  001CC2  0E00               	movlw	0
  2051  001CC4  6F7B               	movwf	(_meterEnergyUsedPart+3)& (0+255),b
  2052                           
  2053                           ; BSR set to: 0
  2054                           ;MCP3909_Interface.c: 168: delayMS10( 100 );
  2055  001CC6  0E00               	movlw	0
  2056  001CC8  6E14               	movwf	delayMS10@count+1,c
  2057  001CCA  0E64               	movlw	100
  2058  001CCC  6E13               	movwf	delayMS10@count,c
  2059  001CCE  EC9E  F00E         	call	_delayMS10	;wreg free
  2060                           
  2061                           ;MCP3909_Interface.c: 170: mcpInitF( );
  2062  001CD2  EC49  F00C         	call	_mcpInitF	;wreg free
  2063  001CD6  0012               	return	
  2064  001CD8                     __end_of_mcpInit:
  2065                           	opt stack 0
  2066                           tblptru	equ	0xFF8
  2067                           intcon	equ	0xFF2
  2068                           postinc0	equ	0xFEE
  2069                           wreg	equ	0xFE8
  2070                           postinc2	equ	0xFDE
  2071                           postdec2	equ	0xFDD
  2072                           fsr2h	equ	0xFDA
  2073                           fsr2l	equ	0xFD9
  2074                           status	equ	0xFD8
  2075                           
  2076 ;; *************** function _mcpInitF *****************
  2077 ;; Defined at:
  2078 ;;		line 175 in file "MCP3909_Interface.c"
  2079 ;; Parameters:    Size  Location     Type
  2080 ;;		None
  2081 ;; Auto vars:     Size  Location     Type
  2082 ;;		None
  2083 ;; Return value:  Size  Location     Type
  2084 ;;                  1    wreg      void 
  2085 ;; Registers used:
  2086 ;;		wreg, status,2, status,0, cstack
  2087 ;; Tracked objects:
  2088 ;;		On entry : 0/0
  2089 ;;		On exit  : 0/0
  2090 ;;		Unchanged: 0/0
  2091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2092 ;;      Params:         0       0       0       0       0       0       0
  2093 ;;      Locals:         0       0       0       0       0       0       0
  2094 ;;      Temps:          1       0       0       0       0       0       0
  2095 ;;      Totals:         1       0       0       0       0       0       0
  2096 ;;Total ram usage:        1 bytes
  2097 ;; Hardware stack levels used:    1
  2098 ;; Hardware stack levels required when called:    2
  2099 ;; This function calls:
  2100 ;;		_delayMS10
  2101 ;; This function is called by:
  2102 ;;		_mcpInit
  2103 ;; This function uses a non-reentrant model
  2104 ;;
  2105                           
  2106                           	psect	text9
  2107  001892                     __ptext9:
  2108                           	opt stack 0
  2109  001892                     _mcpInitF:
  2110                           	opt stack 27
  2111                           
  2112                           ;MCP3909_Interface.c: 180: LATCbits.LC7 = 0;
  2113                           
  2114                           ;incstack = 0
  2115  001892  9E8B               	bcf	3979,7,c	;volatile
  2116                           
  2117                           ;MCP3909_Interface.c: 181: LATCbits.LC4 = 0;
  2118  001894  988B               	bcf	3979,4,c	;volatile
  2119                           
  2120                           ;MCP3909_Interface.c: 182: LATCbits.LC4 = 0;
  2121  001896  988B               	bcf	3979,4,c	;volatile
  2122                           
  2123                           ;MCP3909_Interface.c: 184: _delay((unsigned long)((5)*(16000000UL/4000.0)));
  2124  001898  0E1A               	movlw	26
  2125  00189A  6E18               	movwf	??_mcpInitF& (0+255),c
  2126  00189C  0EF8               	movlw	248
  2127  00189E                     u3007:
  2128  00189E  2EE8               	decfsz	wreg,f,c
  2129  0018A0  D7FE               	bra	u3007
  2130  0018A2  2E18               	decfsz	??_mcpInitF& (0+255),f,c
  2131  0018A4  D7FC               	bra	u3007
  2132  0018A6  D000               	nop2	
  2133                           
  2134                           ;MCP3909_Interface.c: 185: LATCbits.LATC6 = 0;
  2135  0018A8  9C8B               	bcf	3979,6,c	;volatile
  2136                           
  2137                           ;MCP3909_Interface.c: 186: _delay((unsigned long)((5)*(16000000UL/4000.0)));
  2138  0018AA  0E1A               	movlw	26
  2139  0018AC  6E18               	movwf	??_mcpInitF& (0+255),c
  2140  0018AE  0EF8               	movlw	248
  2141  0018B0                     u3017:
  2142  0018B0  2EE8               	decfsz	wreg,f,c
  2143  0018B2  D7FE               	bra	u3017
  2144  0018B4  2E18               	decfsz	??_mcpInitF& (0+255),f,c
  2145  0018B6  D7FC               	bra	u3017
  2146  0018B8  D000               	nop2	
  2147                           
  2148                           ;MCP3909_Interface.c: 188: LATCbits.LC7 = 0;
  2149  0018BA  9E8B               	bcf	3979,7,c	;volatile
  2150                           
  2151                           ;MCP3909_Interface.c: 189: LATCbits.LC4 = 0;
  2152  0018BC  988B               	bcf	3979,4,c	;volatile
  2153                           
  2154                           ;MCP3909_Interface.c: 190: LATCbits.LC4 = 0;
  2155  0018BE  988B               	bcf	3979,4,c	;volatile
  2156                           
  2157                           ;MCP3909_Interface.c: 192: _delay((unsigned long)((5)*(16000000UL/4000.0)));
  2158  0018C0  0E1A               	movlw	26
  2159  0018C2  6E18               	movwf	??_mcpInitF& (0+255),c
  2160  0018C4  0EF8               	movlw	248
  2161  0018C6                     u3027:
  2162  0018C6  2EE8               	decfsz	wreg,f,c
  2163  0018C8  D7FE               	bra	u3027
  2164  0018CA  2E18               	decfsz	??_mcpInitF& (0+255),f,c
  2165  0018CC  D7FC               	bra	u3027
  2166  0018CE  D000               	nop2	
  2167                           
  2168                           ;MCP3909_Interface.c: 194: LATCbits.LC7 = 1;
  2169  0018D0  8E8B               	bsf	3979,7,c	;volatile
  2170                           
  2171                           ;MCP3909_Interface.c: 195: LATCbits.LC4 = 1;
  2172  0018D2  888B               	bsf	3979,4,c	;volatile
  2173                           
  2174                           ;MCP3909_Interface.c: 196: LATCbits.LC4 = 1;
  2175  0018D4  888B               	bsf	3979,4,c	;volatile
  2176                           
  2177                           ;MCP3909_Interface.c: 198: _delay((unsigned long)((5)*(16000000UL/4000.0)));
  2178  0018D6  0E1A               	movlw	26
  2179  0018D8  6E18               	movwf	??_mcpInitF& (0+255),c
  2180  0018DA  0EF8               	movlw	248
  2181  0018DC                     u3037:
  2182  0018DC  2EE8               	decfsz	wreg,f,c
  2183  0018DE  D7FE               	bra	u3037
  2184  0018E0  2E18               	decfsz	??_mcpInitF& (0+255),f,c
  2185  0018E2  D7FC               	bra	u3037
  2186  0018E4  D000               	nop2	
  2187                           
  2188                           ;MCP3909_Interface.c: 199: LATCbits.LATC6 = 1;
  2189  0018E6  8C8B               	bsf	3979,6,c	;volatile
  2190                           
  2191                           ;MCP3909_Interface.c: 200: delayMS10( 10 );
  2192  0018E8  0E00               	movlw	0
  2193  0018EA  6E14               	movwf	delayMS10@count+1,c
  2194  0018EC  0E0A               	movlw	10
  2195  0018EE  6E13               	movwf	delayMS10@count,c
  2196  0018F0  EC9E  F00E         	call	_delayMS10	;wreg free
  2197  0018F4  0012               	return	
  2198  0018F6                     __end_of_mcpInitF:
  2199                           	opt stack 0
  2200                           tblptru	equ	0xFF8
  2201                           intcon	equ	0xFF2
  2202                           postinc0	equ	0xFEE
  2203                           wreg	equ	0xFE8
  2204                           postinc2	equ	0xFDE
  2205                           postdec2	equ	0xFDD
  2206                           fsr2h	equ	0xFDA
  2207                           fsr2l	equ	0xFD9
  2208                           status	equ	0xFD8
  2209                           
  2210 ;; *************** function _ledSetAllOn *****************
  2211 ;; Defined at:
  2212 ;;		line 187 in file "LEDControl.c"
  2213 ;; Parameters:    Size  Location     Type
  2214 ;;		None
  2215 ;; Auto vars:     Size  Location     Type
  2216 ;;		None
  2217 ;; Return value:  Size  Location     Type
  2218 ;;                  1    wreg      void 
  2219 ;; Registers used:
  2220 ;;		wreg, status,2, status,0, cstack
  2221 ;; Tracked objects:
  2222 ;;		On entry : 0/0
  2223 ;;		On exit  : 0/0
  2224 ;;		Unchanged: 0/0
  2225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2226 ;;      Params:         0       0       0       0       0       0       0
  2227 ;;      Locals:         0       0       0       0       0       0       0
  2228 ;;      Temps:          0       0       0       0       0       0       0
  2229 ;;      Totals:         0       0       0       0       0       0       0
  2230 ;;Total ram usage:        0 bytes
  2231 ;; Hardware stack levels used:    1
  2232 ;; Hardware stack levels required when called:    3
  2233 ;; This function calls:
  2234 ;;		_ledSetAll
  2235 ;; This function is called by:
  2236 ;;		_main
  2237 ;;		_ledTestSetAllOn
  2238 ;;		_ledGoSetAllOn
  2239 ;; This function uses a non-reentrant model
  2240 ;;
  2241                           
  2242                           	psect	text10
  2243  001EB6                     __ptext10:
  2244                           	opt stack 0
  2245  001EB6                     _ledSetAllOn:
  2246                           	opt stack 27
  2247                           
  2248                           ;LEDControl.c: 189: ledSetAll( 1, 1, 1 );
  2249                           
  2250                           ;incstack = 0
  2251  001EB6  0E00               	movlw	0
  2252  001EB8  6E1A               	movwf	ledSetAll@led1Value+1,c
  2253  001EBA  0E01               	movlw	1
  2254  001EBC  6E19               	movwf	ledSetAll@led1Value,c
  2255  001EBE  0E00               	movlw	0
  2256  001EC0  6E1C               	movwf	ledSetAll@led2Value+1,c
  2257  001EC2  0E01               	movlw	1
  2258  001EC4  6E1B               	movwf	ledSetAll@led2Value,c
  2259  001EC6  0E00               	movlw	0
  2260  001EC8  6E1E               	movwf	ledSetAll@led3Value+1,c
  2261  001ECA  0E01               	movlw	1
  2262  001ECC  6E1D               	movwf	ledSetAll@led3Value,c
  2263  001ECE  EC33  F00E         	call	_ledSetAll	;wreg free
  2264  001ED2  0012               	return	
  2265  001ED4                     __end_of_ledSetAllOn:
  2266                           	opt stack 0
  2267                           tblptru	equ	0xFF8
  2268                           intcon	equ	0xFF2
  2269                           postinc0	equ	0xFEE
  2270                           wreg	equ	0xFE8
  2271                           postinc2	equ	0xFDE
  2272                           postdec2	equ	0xFDD
  2273                           fsr2h	equ	0xFDA
  2274                           fsr2l	equ	0xFD9
  2275                           status	equ	0xFD8
  2276                           
  2277 ;; *************** function _ledRun *****************
  2278 ;; Defined at:
  2279 ;;		line 332 in file "LEDControl.c"
  2280 ;; Parameters:    Size  Location     Type
  2281 ;;  ledRunDelay     2   34[COMRAM] int 
  2282 ;; Auto vars:     Size  Location     Type
  2283 ;;		None
  2284 ;; Return value:  Size  Location     Type
  2285 ;;                  1    wreg      void 
  2286 ;; Registers used:
  2287 ;;		wreg, status,2, status,0, cstack
  2288 ;; Tracked objects:
  2289 ;;		On entry : 0/0
  2290 ;;		On exit  : 0/0
  2291 ;;		Unchanged: 0/0
  2292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2293 ;;      Params:         2       0       0       0       0       0       0
  2294 ;;      Locals:         0       0       0       0       0       0       0
  2295 ;;      Temps:          0       0       0       0       0       0       0
  2296 ;;      Totals:         2       0       0       0       0       0       0
  2297 ;;Total ram usage:        2 bytes
  2298 ;; Hardware stack levels used:    1
  2299 ;; Hardware stack levels required when called:    4
  2300 ;; This function calls:
  2301 ;;		_ledRunDown
  2302 ;;		_ledRunUp
  2303 ;; This function is called by:
  2304 ;;		_main
  2305 ;; This function uses a non-reentrant model
  2306 ;;
  2307                           
  2308                           	psect	text11
  2309  001F10                     __ptext11:
  2310                           	opt stack 0
  2311  001F10                     _ledRun:
  2312                           	opt stack 26
  2313                           
  2314                           ;LEDControl.c: 334: ledRunUp( ledRunDelay );
  2315                           
  2316                           ;incstack = 0
  2317  001F10  C023  F01F         	movff	ledRun@ledRunDelay,ledRunUp@ledRunDelay
  2318  001F14  C024  F020         	movff	ledRun@ledRunDelay+1,ledRunUp@ledRunDelay+1
  2319  001F18  EC5E  F008         	call	_ledRunUp	;wreg free
  2320                           
  2321                           ;LEDControl.c: 335: ledRunDown( ledRunDelay );
  2322  001F1C  C023  F01F         	movff	ledRun@ledRunDelay,ledRunDown@ledRunDelay
  2323  001F20  C024  F020         	movff	ledRun@ledRunDelay+1,ledRunDown@ledRunDelay+1
  2324  001F24  ECBD  F008         	call	_ledRunDown	;wreg free
  2325  001F28  0012               	return	
  2326  001F2A                     __end_of_ledRun:
  2327                           	opt stack 0
  2328                           tblptru	equ	0xFF8
  2329                           intcon	equ	0xFF2
  2330                           postinc0	equ	0xFEE
  2331                           wreg	equ	0xFE8
  2332                           postinc2	equ	0xFDE
  2333                           postdec2	equ	0xFDD
  2334                           fsr2h	equ	0xFDA
  2335                           fsr2l	equ	0xFD9
  2336                           status	equ	0xFD8
  2337                           
  2338 ;; *************** function _ledRunUp *****************
  2339 ;; Defined at:
  2340 ;;		line 296 in file "LEDControl.c"
  2341 ;; Parameters:    Size  Location     Type
  2342 ;;  ledRunDelay     2   30[COMRAM] int 
  2343 ;; Auto vars:     Size  Location     Type
  2344 ;;  delay10ms       2   32[COMRAM] int 
  2345 ;; Return value:  Size  Location     Type
  2346 ;;                  1    wreg      void 
  2347 ;; Registers used:
  2348 ;;		wreg, status,2, status,0, cstack
  2349 ;; Tracked objects:
  2350 ;;		On entry : 0/0
  2351 ;;		On exit  : 0/0
  2352 ;;		Unchanged: 0/0
  2353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2354 ;;      Params:         2       0       0       0       0       0       0
  2355 ;;      Locals:         2       0       0       0       0       0       0
  2356 ;;      Temps:          0       0       0       0       0       0       0
  2357 ;;      Totals:         4       0       0       0       0       0       0
  2358 ;;Total ram usage:        4 bytes
  2359 ;; Hardware stack levels used:    1
  2360 ;; Hardware stack levels required when called:    3
  2361 ;; This function calls:
  2362 ;;		___awdiv
  2363 ;;		_delayMS10
  2364 ;;		_ledSetAll
  2365 ;; This function is called by:
  2366 ;;		_ledRun
  2367 ;; This function uses a non-reentrant model
  2368 ;;
  2369                           
  2370                           	psect	text12
  2371  0010BC                     __ptext12:
  2372                           	opt stack 0
  2373  0010BC                     _ledRunUp:
  2374                           	opt stack 26
  2375                           
  2376                           ;LEDControl.c: 299: int delay10ms;
  2377                           ;LEDControl.c: 300: delay10ms = ledRunDelay / 10;
  2378                           
  2379                           ;incstack = 0
  2380  0010BC  C01F  F013         	movff	ledRunUp@ledRunDelay,___awdiv@dividend
  2381  0010C0  C020  F014         	movff	ledRunUp@ledRunDelay+1,___awdiv@dividend+1
  2382  0010C4  0E00               	movlw	0
  2383  0010C6  6E16               	movwf	___awdiv@divisor+1,c
  2384  0010C8  0E0A               	movlw	10
  2385  0010CA  6E15               	movwf	___awdiv@divisor,c
  2386  0010CC  ECF0  F00A         	call	___awdiv	;wreg free
  2387  0010D0  C013  F021         	movff	?___awdiv,ledRunUp@delay10ms
  2388  0010D4  C014  F022         	movff	?___awdiv+1,ledRunUp@delay10ms+1
  2389                           
  2390                           ;LEDControl.c: 302: ledSetAll( 0, 0, 0 );
  2391  0010D8  0E00               	movlw	0
  2392  0010DA  6E1A               	movwf	ledSetAll@led1Value+1,c
  2393  0010DC  0E00               	movlw	0
  2394  0010DE  6E19               	movwf	ledSetAll@led1Value,c
  2395  0010E0  0E00               	movlw	0
  2396  0010E2  6E1C               	movwf	ledSetAll@led2Value+1,c
  2397  0010E4  0E00               	movlw	0
  2398  0010E6  6E1B               	movwf	ledSetAll@led2Value,c
  2399  0010E8  0E00               	movlw	0
  2400  0010EA  6E1E               	movwf	ledSetAll@led3Value+1,c
  2401  0010EC  0E00               	movlw	0
  2402  0010EE  6E1D               	movwf	ledSetAll@led3Value,c
  2403  0010F0  EC33  F00E         	call	_ledSetAll	;wreg free
  2404                           
  2405                           ;LEDControl.c: 303: delayMS10( delay10ms );
  2406  0010F4  C021  F013         	movff	ledRunUp@delay10ms,delayMS10@count
  2407  0010F8  C022  F014         	movff	ledRunUp@delay10ms+1,delayMS10@count+1
  2408  0010FC  EC9E  F00E         	call	_delayMS10	;wreg free
  2409                           
  2410                           ;LEDControl.c: 304: ledSetAll( 1, 0, 0 );
  2411  001100  0E00               	movlw	0
  2412  001102  6E1A               	movwf	ledSetAll@led1Value+1,c
  2413  001104  0E01               	movlw	1
  2414  001106  6E19               	movwf	ledSetAll@led1Value,c
  2415  001108  0E00               	movlw	0
  2416  00110A  6E1C               	movwf	ledSetAll@led2Value+1,c
  2417  00110C  0E00               	movlw	0
  2418  00110E  6E1B               	movwf	ledSetAll@led2Value,c
  2419  001110  0E00               	movlw	0
  2420  001112  6E1E               	movwf	ledSetAll@led3Value+1,c
  2421  001114  0E00               	movlw	0
  2422  001116  6E1D               	movwf	ledSetAll@led3Value,c
  2423  001118  EC33  F00E         	call	_ledSetAll	;wreg free
  2424                           
  2425                           ;LEDControl.c: 305: delayMS10( delay10ms );
  2426  00111C  C021  F013         	movff	ledRunUp@delay10ms,delayMS10@count
  2427  001120  C022  F014         	movff	ledRunUp@delay10ms+1,delayMS10@count+1
  2428  001124  EC9E  F00E         	call	_delayMS10	;wreg free
  2429                           
  2430                           ;LEDControl.c: 306: ledSetAll( 0, 1, 0 );
  2431  001128  0E00               	movlw	0
  2432  00112A  6E1A               	movwf	ledSetAll@led1Value+1,c
  2433  00112C  0E00               	movlw	0
  2434  00112E  6E19               	movwf	ledSetAll@led1Value,c
  2435  001130  0E00               	movlw	0
  2436  001132  6E1C               	movwf	ledSetAll@led2Value+1,c
  2437  001134  0E01               	movlw	1
  2438  001136  6E1B               	movwf	ledSetAll@led2Value,c
  2439  001138  0E00               	movlw	0
  2440  00113A  6E1E               	movwf	ledSetAll@led3Value+1,c
  2441  00113C  0E00               	movlw	0
  2442  00113E  6E1D               	movwf	ledSetAll@led3Value,c
  2443  001140  EC33  F00E         	call	_ledSetAll	;wreg free
  2444                           
  2445                           ;LEDControl.c: 307: delayMS10( delay10ms );
  2446  001144  C021  F013         	movff	ledRunUp@delay10ms,delayMS10@count
  2447  001148  C022  F014         	movff	ledRunUp@delay10ms+1,delayMS10@count+1
  2448  00114C  EC9E  F00E         	call	_delayMS10	;wreg free
  2449                           
  2450                           ;LEDControl.c: 308: ledSetAll( 0, 0, 1 );
  2451  001150  0E00               	movlw	0
  2452  001152  6E1A               	movwf	ledSetAll@led1Value+1,c
  2453  001154  0E00               	movlw	0
  2454  001156  6E19               	movwf	ledSetAll@led1Value,c
  2455  001158  0E00               	movlw	0
  2456  00115A  6E1C               	movwf	ledSetAll@led2Value+1,c
  2457  00115C  0E00               	movlw	0
  2458  00115E  6E1B               	movwf	ledSetAll@led2Value,c
  2459  001160  0E00               	movlw	0
  2460  001162  6E1E               	movwf	ledSetAll@led3Value+1,c
  2461  001164  0E01               	movlw	1
  2462  001166  6E1D               	movwf	ledSetAll@led3Value,c
  2463  001168  EC33  F00E         	call	_ledSetAll	;wreg free
  2464                           
  2465                           ;LEDControl.c: 309: delayMS10( delay10ms );
  2466  00116C  C021  F013         	movff	ledRunUp@delay10ms,delayMS10@count
  2467  001170  C022  F014         	movff	ledRunUp@delay10ms+1,delayMS10@count+1
  2468  001174  EC9E  F00E         	call	_delayMS10	;wreg free
  2469  001178  0012               	return	
  2470  00117A                     __end_of_ledRunUp:
  2471                           	opt stack 0
  2472                           tblptru	equ	0xFF8
  2473                           intcon	equ	0xFF2
  2474                           postinc0	equ	0xFEE
  2475                           wreg	equ	0xFE8
  2476                           postinc2	equ	0xFDE
  2477                           postdec2	equ	0xFDD
  2478                           fsr2h	equ	0xFDA
  2479                           fsr2l	equ	0xFD9
  2480                           status	equ	0xFD8
  2481                           
  2482 ;; *************** function _ledRunDown *****************
  2483 ;; Defined at:
  2484 ;;		line 314 in file "LEDControl.c"
  2485 ;; Parameters:    Size  Location     Type
  2486 ;;  ledRunDelay     2   30[COMRAM] int 
  2487 ;; Auto vars:     Size  Location     Type
  2488 ;;  delay10ms       2   32[COMRAM] int 
  2489 ;; Return value:  Size  Location     Type
  2490 ;;                  1    wreg      void 
  2491 ;; Registers used:
  2492 ;;		wreg, status,2, status,0, cstack
  2493 ;; Tracked objects:
  2494 ;;		On entry : 0/0
  2495 ;;		On exit  : 0/0
  2496 ;;		Unchanged: 0/0
  2497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2498 ;;      Params:         2       0       0       0       0       0       0
  2499 ;;      Locals:         2       0       0       0       0       0       0
  2500 ;;      Temps:          0       0       0       0       0       0       0
  2501 ;;      Totals:         4       0       0       0       0       0       0
  2502 ;;Total ram usage:        4 bytes
  2503 ;; Hardware stack levels used:    1
  2504 ;; Hardware stack levels required when called:    3
  2505 ;; This function calls:
  2506 ;;		___awdiv
  2507 ;;		_delayMS10
  2508 ;;		_ledSetAll
  2509 ;; This function is called by:
  2510 ;;		_ledRun
  2511 ;; This function uses a non-reentrant model
  2512 ;;
  2513                           
  2514                           	psect	text13
  2515  00117A                     __ptext13:
  2516                           	opt stack 0
  2517  00117A                     _ledRunDown:
  2518                           	opt stack 26
  2519                           
  2520                           ;LEDControl.c: 317: int delay10ms;
  2521                           ;LEDControl.c: 318: delay10ms = ledRunDelay / 10;
  2522                           
  2523                           ;incstack = 0
  2524  00117A  C01F  F013         	movff	ledRunDown@ledRunDelay,___awdiv@dividend
  2525  00117E  C020  F014         	movff	ledRunDown@ledRunDelay+1,___awdiv@dividend+1
  2526  001182  0E00               	movlw	0
  2527  001184  6E16               	movwf	___awdiv@divisor+1,c
  2528  001186  0E0A               	movlw	10
  2529  001188  6E15               	movwf	___awdiv@divisor,c
  2530  00118A  ECF0  F00A         	call	___awdiv	;wreg free
  2531  00118E  C013  F021         	movff	?___awdiv,ledRunDown@delay10ms
  2532  001192  C014  F022         	movff	?___awdiv+1,ledRunDown@delay10ms+1
  2533                           
  2534                           ;LEDControl.c: 320: ledSetAll( 0, 0, 1 );
  2535  001196  0E00               	movlw	0
  2536  001198  6E1A               	movwf	ledSetAll@led1Value+1,c
  2537  00119A  0E00               	movlw	0
  2538  00119C  6E19               	movwf	ledSetAll@led1Value,c
  2539  00119E  0E00               	movlw	0
  2540  0011A0  6E1C               	movwf	ledSetAll@led2Value+1,c
  2541  0011A2  0E00               	movlw	0
  2542  0011A4  6E1B               	movwf	ledSetAll@led2Value,c
  2543  0011A6  0E00               	movlw	0
  2544  0011A8  6E1E               	movwf	ledSetAll@led3Value+1,c
  2545  0011AA  0E01               	movlw	1
  2546  0011AC  6E1D               	movwf	ledSetAll@led3Value,c
  2547  0011AE  EC33  F00E         	call	_ledSetAll	;wreg free
  2548                           
  2549                           ;LEDControl.c: 321: delayMS10( delay10ms );
  2550  0011B2  C021  F013         	movff	ledRunDown@delay10ms,delayMS10@count
  2551  0011B6  C022  F014         	movff	ledRunDown@delay10ms+1,delayMS10@count+1
  2552  0011BA  EC9E  F00E         	call	_delayMS10	;wreg free
  2553                           
  2554                           ;LEDControl.c: 322: ledSetAll( 0, 1, 0 );
  2555  0011BE  0E00               	movlw	0
  2556  0011C0  6E1A               	movwf	ledSetAll@led1Value+1,c
  2557  0011C2  0E00               	movlw	0
  2558  0011C4  6E19               	movwf	ledSetAll@led1Value,c
  2559  0011C6  0E00               	movlw	0
  2560  0011C8  6E1C               	movwf	ledSetAll@led2Value+1,c
  2561  0011CA  0E01               	movlw	1
  2562  0011CC  6E1B               	movwf	ledSetAll@led2Value,c
  2563  0011CE  0E00               	movlw	0
  2564  0011D0  6E1E               	movwf	ledSetAll@led3Value+1,c
  2565  0011D2  0E00               	movlw	0
  2566  0011D4  6E1D               	movwf	ledSetAll@led3Value,c
  2567  0011D6  EC33  F00E         	call	_ledSetAll	;wreg free
  2568                           
  2569                           ;LEDControl.c: 323: delayMS10( delay10ms );
  2570  0011DA  C021  F013         	movff	ledRunDown@delay10ms,delayMS10@count
  2571  0011DE  C022  F014         	movff	ledRunDown@delay10ms+1,delayMS10@count+1
  2572  0011E2  EC9E  F00E         	call	_delayMS10	;wreg free
  2573                           
  2574                           ;LEDControl.c: 324: ledSetAll( 1, 0, 0 );
  2575  0011E6  0E00               	movlw	0
  2576  0011E8  6E1A               	movwf	ledSetAll@led1Value+1,c
  2577  0011EA  0E01               	movlw	1
  2578  0011EC  6E19               	movwf	ledSetAll@led1Value,c
  2579  0011EE  0E00               	movlw	0
  2580  0011F0  6E1C               	movwf	ledSetAll@led2Value+1,c
  2581  0011F2  0E00               	movlw	0
  2582  0011F4  6E1B               	movwf	ledSetAll@led2Value,c
  2583  0011F6  0E00               	movlw	0
  2584  0011F8  6E1E               	movwf	ledSetAll@led3Value+1,c
  2585  0011FA  0E00               	movlw	0
  2586  0011FC  6E1D               	movwf	ledSetAll@led3Value,c
  2587  0011FE  EC33  F00E         	call	_ledSetAll	;wreg free
  2588                           
  2589                           ;LEDControl.c: 325: delayMS10( delay10ms );
  2590  001202  C021  F013         	movff	ledRunDown@delay10ms,delayMS10@count
  2591  001206  C022  F014         	movff	ledRunDown@delay10ms+1,delayMS10@count+1
  2592  00120A  EC9E  F00E         	call	_delayMS10	;wreg free
  2593                           
  2594                           ;LEDControl.c: 326: ledSetAll( 0, 0, 0 );
  2595  00120E  0E00               	movlw	0
  2596  001210  6E1A               	movwf	ledSetAll@led1Value+1,c
  2597  001212  0E00               	movlw	0
  2598  001214  6E19               	movwf	ledSetAll@led1Value,c
  2599  001216  0E00               	movlw	0
  2600  001218  6E1C               	movwf	ledSetAll@led2Value+1,c
  2601  00121A  0E00               	movlw	0
  2602  00121C  6E1B               	movwf	ledSetAll@led2Value,c
  2603  00121E  0E00               	movlw	0
  2604  001220  6E1E               	movwf	ledSetAll@led3Value+1,c
  2605  001222  0E00               	movlw	0
  2606  001224  6E1D               	movwf	ledSetAll@led3Value,c
  2607  001226  EC33  F00E         	call	_ledSetAll	;wreg free
  2608                           
  2609                           ;LEDControl.c: 327: delayMS10( delay10ms );
  2610  00122A  C021  F013         	movff	ledRunDown@delay10ms,delayMS10@count
  2611  00122E  C022  F014         	movff	ledRunDown@delay10ms+1,delayMS10@count+1
  2612  001232  EC9E  F00E         	call	_delayMS10	;wreg free
  2613  001236  0012               	return	
  2614  001238                     __end_of_ledRunDown:
  2615                           	opt stack 0
  2616                           tblptru	equ	0xFF8
  2617                           intcon	equ	0xFF2
  2618                           postinc0	equ	0xFEE
  2619                           wreg	equ	0xFE8
  2620                           postinc2	equ	0xFDE
  2621                           postdec2	equ	0xFDD
  2622                           fsr2h	equ	0xFDA
  2623                           fsr2l	equ	0xFD9
  2624                           status	equ	0xFD8
  2625                           
  2626 ;; *************** function _delayMS10 *****************
  2627 ;; Defined at:
  2628 ;;		line 111 in file "Timer.c"
  2629 ;; Parameters:    Size  Location     Type
  2630 ;;  count           2   18[COMRAM] int 
  2631 ;; Auto vars:     Size  Location     Type
  2632 ;;  inx             2   21[COMRAM] int 
  2633 ;; Return value:  Size  Location     Type
  2634 ;;                  1    wreg      void 
  2635 ;; Registers used:
  2636 ;;		wreg, status,2, status,0
  2637 ;; Tracked objects:
  2638 ;;		On entry : 0/0
  2639 ;;		On exit  : 0/0
  2640 ;;		Unchanged: 0/0
  2641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2642 ;;      Params:         2       0       0       0       0       0       0
  2643 ;;      Locals:         2       0       0       0       0       0       0
  2644 ;;      Temps:          1       0       0       0       0       0       0
  2645 ;;      Totals:         5       0       0       0       0       0       0
  2646 ;;Total ram usage:        5 bytes
  2647 ;; Hardware stack levels used:    1
  2648 ;; Hardware stack levels required when called:    1
  2649 ;; This function calls:
  2650 ;;		Nothing
  2651 ;; This function is called by:
  2652 ;;		_ledRunUp
  2653 ;;		_ledRunDown
  2654 ;;		_mcpInit
  2655 ;;		_mcpInitF
  2656 ;; This function uses a non-reentrant model
  2657 ;;
  2658                           
  2659                           	psect	text14
  2660  001D3C                     __ptext14:
  2661                           	opt stack 0
  2662  001D3C                     _delayMS10:
  2663                           	opt stack 27
  2664                           
  2665                           ;Timer.c: 113: for( int inx = 0; inx < count; inx++ )
  2666                           
  2667                           ;incstack = 0
  2668  001D3C  0E00               	movlw	0
  2669  001D3E  6E17               	movwf	delayMS10@inx+1,c
  2670  001D40  0E00               	movlw	0
  2671  001D42  6E16               	movwf	delayMS10@inx,c
  2672  001D44  D009               	goto	l577
  2673  001D46                     
  2674                           ;Timer.c: 114: {
  2675                           ;Timer.c: 115: _delay((unsigned long)((10)*(16000000UL/4000.0)));
  2676  001D46  0E34               	movlw	52
  2677  001D48  6E15               	movwf	??_delayMS10& (0+255),c
  2678  001D4A  0EF2               	movlw	242
  2679  001D4C                     u3047:
  2680  001D4C  2EE8               	decfsz	wreg,f,c
  2681  001D4E  D7FE               	bra	u3047
  2682  001D50  2E15               	decfsz	??_delayMS10& (0+255),f,c
  2683  001D52  D7FC               	bra	u3047
  2684  001D54  4A16               	infsnz	delayMS10@inx,f,c
  2685  001D56  2A17               	incf	delayMS10@inx+1,f,c
  2686  001D58                     l577:
  2687  001D58  5013               	movf	delayMS10@count,w,c
  2688  001D5A  5C16               	subwf	delayMS10@inx,w,c
  2689  001D5C  5017               	movf	delayMS10@inx+1,w,c
  2690  001D5E  0A80               	xorlw	128
  2691  001D60  6E15               	movwf	??_delayMS10& (0+255),c
  2692  001D62  5014               	movf	delayMS10@count+1,w,c
  2693  001D64  0A80               	xorlw	128
  2694  001D66  5815               	subwfb	??_delayMS10& (0+255),w,c
  2695  001D68  B0D8               	btfsc	status,0,c
  2696  001D6A  0012               	return	
  2697  001D6C  D7EC               	goto	l578
  2698  001D6E                     __end_of_delayMS10:
  2699                           	opt stack 0
  2700                           tblptru	equ	0xFF8
  2701                           intcon	equ	0xFF2
  2702                           postinc0	equ	0xFEE
  2703                           wreg	equ	0xFE8
  2704                           postinc2	equ	0xFDE
  2705                           postdec2	equ	0xFDD
  2706                           fsr2h	equ	0xFDA
  2707                           fsr2l	equ	0xFD9
  2708                           status	equ	0xFD8
  2709                           
  2710 ;; *************** function ___awdiv *****************
  2711 ;; Defined at:
  2712 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  2713 ;; Parameters:    Size  Location     Type
  2714 ;;  dividend        2   18[COMRAM] int 
  2715 ;;  divisor         2   20[COMRAM] int 
  2716 ;; Auto vars:     Size  Location     Type
  2717 ;;  quotient        2   24[COMRAM] int 
  2718 ;;  sign            1   23[COMRAM] unsigned char 
  2719 ;;  counter         1   22[COMRAM] unsigned char 
  2720 ;; Return value:  Size  Location     Type
  2721 ;;                  2   18[COMRAM] int 
  2722 ;; Registers used:
  2723 ;;		wreg, status,2, status,0
  2724 ;; Tracked objects:
  2725 ;;		On entry : 0/0
  2726 ;;		On exit  : 0/0
  2727 ;;		Unchanged: 0/0
  2728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2729 ;;      Params:         4       0       0       0       0       0       0
  2730 ;;      Locals:         4       0       0       0       0       0       0
  2731 ;;      Temps:          0       0       0       0       0       0       0
  2732 ;;      Totals:         8       0       0       0       0       0       0
  2733 ;;Total ram usage:        8 bytes
  2734 ;; Hardware stack levels used:    1
  2735 ;; Hardware stack levels required when called:    1
  2736 ;; This function calls:
  2737 ;;		Nothing
  2738 ;; This function is called by:
  2739 ;;		_ledRunUp
  2740 ;;		_ledRunDown
  2741 ;; This function uses a non-reentrant model
  2742 ;;
  2743                           
  2744                           	psect	text15
  2745  0015E0                     __ptext15:
  2746                           	opt stack 0
  2747  0015E0                     ___awdiv:
  2748                           	opt stack 27
  2749                           
  2750                           ;incstack = 0
  2751  0015E0  0E00               	movlw	0
  2752  0015E2  6E18               	movwf	___awdiv@sign,c
  2753  0015E4  AE16               	btfss	___awdiv@divisor+1,7,c
  2754  0015E6  D006               	goto	l762
  2755  0015E8  6C15               	negf	___awdiv@divisor,c
  2756  0015EA  1E16               	comf	___awdiv@divisor+1,f,c
  2757  0015EC  B0D8               	btfsc	status,0,c
  2758  0015EE  2A16               	incf	___awdiv@divisor+1,f,c
  2759  0015F0  0E01               	movlw	1
  2760  0015F2  6E18               	movwf	___awdiv@sign,c
  2761  0015F4                     l762:
  2762  0015F4  AE14               	btfss	___awdiv@dividend+1,7,c
  2763  0015F6  D006               	goto	l763
  2764  0015F8  6C13               	negf	___awdiv@dividend,c
  2765  0015FA  1E14               	comf	___awdiv@dividend+1,f,c
  2766  0015FC  B0D8               	btfsc	status,0,c
  2767  0015FE  2A14               	incf	___awdiv@dividend+1,f,c
  2768  001600  0E01               	movlw	1
  2769  001602  1A18               	xorwf	___awdiv@sign,f,c
  2770  001604                     l763:
  2771  001604  0E00               	movlw	0
  2772  001606  6E1A               	movwf	___awdiv@quotient+1,c
  2773  001608  0E00               	movlw	0
  2774  00160A  6E19               	movwf	___awdiv@quotient,c
  2775  00160C  5015               	movf	___awdiv@divisor,w,c
  2776  00160E  1016               	iorwf	___awdiv@divisor+1,w,c
  2777  001610  B4D8               	btfsc	status,2,c
  2778  001612  D01C               	goto	l770
  2779  001614  0E01               	movlw	1
  2780  001616  6E17               	movwf	___awdiv@counter,c
  2781  001618  D004               	goto	l765
  2782  00161A  90D8               	bcf	status,0,c
  2783  00161C  3615               	rlcf	___awdiv@divisor,f,c
  2784  00161E  3616               	rlcf	___awdiv@divisor+1,f,c
  2785  001620  2A17               	incf	___awdiv@counter,f,c
  2786  001622                     l765:
  2787  001622  AE16               	btfss	___awdiv@divisor+1,7,c
  2788  001624  D7FA               	goto	l766
  2789  001626                     u1950:
  2790  001626  90D8               	bcf	status,0,c
  2791  001628  3619               	rlcf	___awdiv@quotient,f,c
  2792  00162A  361A               	rlcf	___awdiv@quotient+1,f,c
  2793  00162C  5015               	movf	___awdiv@divisor,w,c
  2794  00162E  5C13               	subwf	___awdiv@dividend,w,c
  2795  001630  5016               	movf	___awdiv@divisor+1,w,c
  2796  001632  5814               	subwfb	___awdiv@dividend+1,w,c
  2797  001634  A0D8               	btfss	status,0,c
  2798  001636  D005               	goto	l769
  2799  001638  5015               	movf	___awdiv@divisor,w,c
  2800  00163A  5E13               	subwf	___awdiv@dividend,f,c
  2801  00163C  5016               	movf	___awdiv@divisor+1,w,c
  2802  00163E  5A14               	subwfb	___awdiv@dividend+1,f,c
  2803  001640  8019               	bsf	___awdiv@quotient,0,c
  2804  001642                     l769:
  2805  001642  90D8               	bcf	status,0,c
  2806  001644  3216               	rrcf	___awdiv@divisor+1,f,c
  2807  001646  3215               	rrcf	___awdiv@divisor,f,c
  2808  001648  2E17               	decfsz	___awdiv@counter,f,c
  2809  00164A  D7ED               	goto	u1950
  2810  00164C                     l770:
  2811  00164C  5018               	movf	___awdiv@sign,w,c
  2812  00164E  B4D8               	btfsc	status,2,c
  2813  001650  D004               	goto	l771
  2814  001652  6C19               	negf	___awdiv@quotient,c
  2815  001654  1E1A               	comf	___awdiv@quotient+1,f,c
  2816  001656  B0D8               	btfsc	status,0,c
  2817  001658  2A1A               	incf	___awdiv@quotient+1,f,c
  2818  00165A                     l771:
  2819  00165A  C019  F013         	movff	___awdiv@quotient,?___awdiv
  2820  00165E  C01A  F014         	movff	___awdiv@quotient+1,?___awdiv+1
  2821  001662  0012               	return	
  2822  001664                     __end_of___awdiv:
  2823                           	opt stack 0
  2824                           tblptru	equ	0xFF8
  2825                           intcon	equ	0xFF2
  2826                           postinc0	equ	0xFEE
  2827                           wreg	equ	0xFE8
  2828                           postinc2	equ	0xFDE
  2829                           postdec2	equ	0xFDD
  2830                           fsr2h	equ	0xFDA
  2831                           fsr2l	equ	0xFD9
  2832                           status	equ	0xFD8
  2833                           
  2834 ;; *************** function _ledInit *****************
  2835 ;; Defined at:
  2836 ;;		line 71 in file "LEDControl.c"
  2837 ;; Parameters:    Size  Location     Type
  2838 ;;		None
  2839 ;; Auto vars:     Size  Location     Type
  2840 ;;		None
  2841 ;; Return value:  Size  Location     Type
  2842 ;;                  1    wreg      void 
  2843 ;; Registers used:
  2844 ;;		wreg, status,2, status,0, cstack
  2845 ;; Tracked objects:
  2846 ;;		On entry : 0/0
  2847 ;;		On exit  : 0/0
  2848 ;;		Unchanged: 0/0
  2849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2850 ;;      Params:         0       0       0       0       0       0       0
  2851 ;;      Locals:         0       0       0       0       0       0       0
  2852 ;;      Temps:          0       0       0       0       0       0       0
  2853 ;;      Totals:         0       0       0       0       0       0       0
  2854 ;;Total ram usage:        0 bytes
  2855 ;; Hardware stack levels used:    1
  2856 ;; Hardware stack levels required when called:    4
  2857 ;; This function calls:
  2858 ;;		_ledSetAllOff
  2859 ;; This function is called by:
  2860 ;;		_main
  2861 ;; This function uses a non-reentrant model
  2862 ;;
  2863                           
  2864                           	psect	text16
  2865  001F78                     __ptext16:
  2866                           	opt stack 0
  2867  001F78                     _ledInit:
  2868                           	opt stack 26
  2869                           
  2870                           ;LEDControl.c: 73: TRISBbits.TRISB4 = 0;
  2871                           
  2872                           ;incstack = 0
  2873  001F78  9893               	bcf	3987,4,c	;volatile
  2874                           
  2875                           ;LEDControl.c: 74: TRISCbits.TRISC1 = 0;
  2876  001F7A  9294               	bcf	3988,1,c	;volatile
  2877                           
  2878                           ;LEDControl.c: 75: TRISCbits.TRISC0 = 0;
  2879  001F7C  9094               	bcf	3988,0,c	;volatile
  2880                           
  2881                           ;LEDControl.c: 77: ledSetAllOff( );
  2882  001F7E  EC6A  F00F         	call	_ledSetAllOff	;wreg free
  2883  001F82  0012               	return	
  2884  001F84                     __end_of_ledInit:
  2885                           	opt stack 0
  2886                           tblptru	equ	0xFF8
  2887                           intcon	equ	0xFF2
  2888                           postinc0	equ	0xFEE
  2889                           wreg	equ	0xFE8
  2890                           postinc2	equ	0xFDE
  2891                           postdec2	equ	0xFDD
  2892                           fsr2h	equ	0xFDA
  2893                           fsr2l	equ	0xFD9
  2894                           status	equ	0xFD8
  2895                           
  2896 ;; *************** function _ledSetAllOff *****************
  2897 ;; Defined at:
  2898 ;;		line 194 in file "LEDControl.c"
  2899 ;; Parameters:    Size  Location     Type
  2900 ;;		None
  2901 ;; Auto vars:     Size  Location     Type
  2902 ;;		None
  2903 ;; Return value:  Size  Location     Type
  2904 ;;                  1    wreg      void 
  2905 ;; Registers used:
  2906 ;;		wreg, status,2, status,0, cstack
  2907 ;; Tracked objects:
  2908 ;;		On entry : 0/0
  2909 ;;		On exit  : 0/0
  2910 ;;		Unchanged: 0/0
  2911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2912 ;;      Params:         0       0       0       0       0       0       0
  2913 ;;      Locals:         0       0       0       0       0       0       0
  2914 ;;      Temps:          0       0       0       0       0       0       0
  2915 ;;      Totals:         0       0       0       0       0       0       0
  2916 ;;Total ram usage:        0 bytes
  2917 ;; Hardware stack levels used:    1
  2918 ;; Hardware stack levels required when called:    3
  2919 ;; This function calls:
  2920 ;;		_ledSetAll
  2921 ;; This function is called by:
  2922 ;;		_ledInit
  2923 ;;		_main
  2924 ;;		_ledTestSetAllOff
  2925 ;;		_ledGoSetAllOff
  2926 ;; This function uses a non-reentrant model
  2927 ;;
  2928                           
  2929                           	psect	text17
  2930  001ED4                     __ptext17:
  2931                           	opt stack 0
  2932  001ED4                     _ledSetAllOff:
  2933                           	opt stack 27
  2934                           
  2935                           ;LEDControl.c: 196: ledSetAll( 0, 0, 0 );
  2936                           
  2937                           ;incstack = 0
  2938  001ED4  0E00               	movlw	0
  2939  001ED6  6E1A               	movwf	ledSetAll@led1Value+1,c
  2940  001ED8  0E00               	movlw	0
  2941  001EDA  6E19               	movwf	ledSetAll@led1Value,c
  2942  001EDC  0E00               	movlw	0
  2943  001EDE  6E1C               	movwf	ledSetAll@led2Value+1,c
  2944  001EE0  0E00               	movlw	0
  2945  001EE2  6E1B               	movwf	ledSetAll@led2Value,c
  2946  001EE4  0E00               	movlw	0
  2947  001EE6  6E1E               	movwf	ledSetAll@led3Value+1,c
  2948  001EE8  0E00               	movlw	0
  2949  001EEA  6E1D               	movwf	ledSetAll@led3Value,c
  2950  001EEC  EC33  F00E         	call	_ledSetAll	;wreg free
  2951  001EF0  0012               	return	
  2952  001EF2                     __end_of_ledSetAllOff:
  2953                           	opt stack 0
  2954                           tblptru	equ	0xFF8
  2955                           intcon	equ	0xFF2
  2956                           postinc0	equ	0xFEE
  2957                           wreg	equ	0xFE8
  2958                           postinc2	equ	0xFDE
  2959                           postdec2	equ	0xFDD
  2960                           fsr2h	equ	0xFDA
  2961                           fsr2l	equ	0xFD9
  2962                           status	equ	0xFD8
  2963                           
  2964 ;; *************** function _ledSetAll *****************
  2965 ;; Defined at:
  2966 ;;		line 158 in file "LEDControl.c"
  2967 ;; Parameters:    Size  Location     Type
  2968 ;;  led1Value       2   24[COMRAM] int 
  2969 ;;  led2Value       2   26[COMRAM] int 
  2970 ;;  led3Value       2   28[COMRAM] int 
  2971 ;; Auto vars:     Size  Location     Type
  2972 ;;		None
  2973 ;; Return value:  Size  Location     Type
  2974 ;;                  1    wreg      void 
  2975 ;; Registers used:
  2976 ;;		wreg, status,2, status,0, cstack
  2977 ;; Tracked objects:
  2978 ;;		On entry : 0/0
  2979 ;;		On exit  : 0/0
  2980 ;;		Unchanged: 0/0
  2981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2982 ;;      Params:         6       0       0       0       0       0       0
  2983 ;;      Locals:         0       0       0       0       0       0       0
  2984 ;;      Temps:          0       0       0       0       0       0       0
  2985 ;;      Totals:         6       0       0       0       0       0       0
  2986 ;;Total ram usage:        6 bytes
  2987 ;; Hardware stack levels used:    1
  2988 ;; Hardware stack levels required when called:    2
  2989 ;; This function calls:
  2990 ;;		_ledSet
  2991 ;; This function is called by:
  2992 ;;		_ledSetAllOn
  2993 ;;		_ledSetAllOff
  2994 ;;		_ledRunUp
  2995 ;;		_ledRunDown
  2996 ;;		_ledTestSetAll
  2997 ;;		_ledGoSetAll
  2998 ;; This function uses a non-reentrant model
  2999 ;;
  3000                           
  3001                           	psect	text18
  3002  001C66                     __ptext18:
  3003                           	opt stack 0
  3004  001C66                     _ledSetAll:
  3005                           	opt stack 27
  3006                           
  3007                           ;LEDControl.c: 160: ledSet( 1, led1Value );
  3008                           
  3009                           ;incstack = 0
  3010  001C66  0E00               	movlw	0
  3011  001C68  6E14               	movwf	ledSet@ledNum+1,c
  3012  001C6A  0E01               	movlw	1
  3013  001C6C  6E13               	movwf	ledSet@ledNum,c
  3014  001C6E  C019  F015         	movff	ledSetAll@led1Value,ledSet@setValue
  3015  001C72  C01A  F016         	movff	ledSetAll@led1Value+1,ledSet@setValue+1
  3016  001C76  EC81  F00D         	call	_ledSet	;wreg free
  3017                           
  3018                           ;LEDControl.c: 161: ledSet( 2, led2Value );
  3019  001C7A  0E00               	movlw	0
  3020  001C7C  6E14               	movwf	ledSet@ledNum+1,c
  3021  001C7E  0E02               	movlw	2
  3022  001C80  6E13               	movwf	ledSet@ledNum,c
  3023  001C82  C01B  F015         	movff	ledSetAll@led2Value,ledSet@setValue
  3024  001C86  C01C  F016         	movff	ledSetAll@led2Value+1,ledSet@setValue+1
  3025  001C8A  EC81  F00D         	call	_ledSet	;wreg free
  3026                           
  3027                           ;LEDControl.c: 162: ledSet( 3, led3Value );
  3028  001C8E  0E00               	movlw	0
  3029  001C90  6E14               	movwf	ledSet@ledNum+1,c
  3030  001C92  0E03               	movlw	3
  3031  001C94  6E13               	movwf	ledSet@ledNum,c
  3032  001C96  C01D  F015         	movff	ledSetAll@led3Value,ledSet@setValue
  3033  001C9A  C01E  F016         	movff	ledSetAll@led3Value+1,ledSet@setValue+1
  3034  001C9E  EC81  F00D         	call	_ledSet	;wreg free
  3035  001CA2  0012               	return	
  3036  001CA4                     __end_of_ledSetAll:
  3037                           	opt stack 0
  3038                           tblptru	equ	0xFF8
  3039                           intcon	equ	0xFF2
  3040                           postinc0	equ	0xFEE
  3041                           wreg	equ	0xFE8
  3042                           postinc2	equ	0xFDE
  3043                           postdec2	equ	0xFDD
  3044                           fsr2h	equ	0xFDA
  3045                           fsr2l	equ	0xFD9
  3046                           status	equ	0xFD8
  3047                           
  3048 ;; *************** function _initOSC *****************
  3049 ;; Defined at:
  3050 ;;		line 104 in file "Main_PowerSense.c"
  3051 ;; Parameters:    Size  Location     Type
  3052 ;;		None
  3053 ;; Auto vars:     Size  Location     Type
  3054 ;;		None
  3055 ;; Return value:  Size  Location     Type
  3056 ;;                  1    wreg      void 
  3057 ;; Registers used:
  3058 ;;		wreg, status,2
  3059 ;; Tracked objects:
  3060 ;;		On entry : 0/0
  3061 ;;		On exit  : 0/0
  3062 ;;		Unchanged: 0/0
  3063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3064 ;;      Params:         0       0       0       0       0       0       0
  3065 ;;      Locals:         0       0       0       0       0       0       0
  3066 ;;      Temps:          0       0       0       0       0       0       0
  3067 ;;      Totals:         0       0       0       0       0       0       0
  3068 ;;Total ram usage:        0 bytes
  3069 ;; Hardware stack levels used:    1
  3070 ;; Hardware stack levels required when called:    1
  3071 ;; This function calls:
  3072 ;;		Nothing
  3073 ;; This function is called by:
  3074 ;;		_main
  3075 ;; This function uses a non-reentrant model
  3076 ;;
  3077                           
  3078                           	psect	text19
  3079  001F2A                     __ptext19:
  3080                           	opt stack 0
  3081  001F2A                     _initOSC:
  3082                           	opt stack 29
  3083                           
  3084                           ;Main_PowerSense.c: 107: OSCCONbits.IDLEN = 0;
  3085                           
  3086                           ;incstack = 0
  3087  001F2A  9ED3               	bcf	4051,7,c	;volatile
  3088                           
  3089                           ;Main_PowerSense.c: 108: OSCCONbits.IRCF = 0b111;
  3090  001F2C  88D3               	bsf	4051,4,c	;volatile
  3091  001F2E  8AD3               	bsf	4051,5,c	;volatile
  3092  001F30  8CD3               	bsf	4051,6,c	;volatile
  3093                           
  3094                           ;Main_PowerSense.c: 109: OSCCONbits.SCS = 0b11;
  3095  001F32  0E03               	movlw	3
  3096  001F34  12D3               	iorwf	4051,f,c	;volatile
  3097                           
  3098                           ;Main_PowerSense.c: 111: OSCCON2bits.MFIOSEL = 0;
  3099  001F36  98D2               	bcf	4050,4,c	;volatile
  3100                           
  3101                           ;Main_PowerSense.c: 112: OSCCON2bits.SOSCGO = 0;
  3102  001F38  96D2               	bcf	4050,3,c	;volatile
  3103                           
  3104                           ;Main_PowerSense.c: 113: OSCCON2bits.PRISD = 0;
  3105  001F3A  94D2               	bcf	4050,2,c	;volatile
  3106                           
  3107                           ;Main_PowerSense.c: 115: OSCTUNEbits.INTSRC = 1;
  3108  001F3C  8E9B               	bsf	3995,7,c	;volatile
  3109                           
  3110                           ;Main_PowerSense.c: 116: OSCTUNEbits.PLLEN = 0;
  3111  001F3E  9C9B               	bcf	3995,6,c	;volatile
  3112  001F40  0012               	return	
  3113  001F42                     __end_of_initOSC:
  3114                           	opt stack 0
  3115                           tblptru	equ	0xFF8
  3116                           intcon	equ	0xFF2
  3117                           postinc0	equ	0xFEE
  3118                           wreg	equ	0xFE8
  3119                           postinc2	equ	0xFDE
  3120                           postdec2	equ	0xFDD
  3121                           fsr2h	equ	0xFDA
  3122                           fsr2l	equ	0xFD9
  3123                           status	equ	0xFD8
  3124                           
  3125 ;; *************** function _initInterruptsClear *****************
  3126 ;; Defined at:
  3127 ;;		line 131 in file "Main_PowerSense.c"
  3128 ;; Parameters:    Size  Location     Type
  3129 ;;		None
  3130 ;; Auto vars:     Size  Location     Type
  3131 ;;		None
  3132 ;; Return value:  Size  Location     Type
  3133 ;;                  1    wreg      void 
  3134 ;; Registers used:
  3135 ;;		wreg, status,2
  3136 ;; Tracked objects:
  3137 ;;		On entry : 0/0
  3138 ;;		On exit  : 0/0
  3139 ;;		Unchanged: 0/0
  3140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3141 ;;      Params:         0       0       0       0       0       0       0
  3142 ;;      Locals:         0       0       0       0       0       0       0
  3143 ;;      Temps:          0       0       0       0       0       0       0
  3144 ;;      Totals:         0       0       0       0       0       0       0
  3145 ;;Total ram usage:        0 bytes
  3146 ;; Hardware stack levels used:    1
  3147 ;; Hardware stack levels required when called:    1
  3148 ;; This function calls:
  3149 ;;		Nothing
  3150 ;; This function is called by:
  3151 ;;		_main
  3152 ;; This function uses a non-reentrant model
  3153 ;;
  3154                           
  3155                           	psect	text20
  3156  001AB6                     __ptext20:
  3157                           	opt stack 0
  3158  001AB6                     _initInterruptsClear:
  3159                           	opt stack 29
  3160                           
  3161                           ;Main_PowerSense.c: 134: INTCON = 0b00000000;
  3162                           
  3163                           ;incstack = 0
  3164  001AB6  0E00               	movlw	0
  3165  001AB8  6EF2               	movwf	intcon,c	;volatile
  3166                           
  3167                           ;Main_PowerSense.c: 135: INTCON2 = 0b00000000;
  3168  001ABA  0E00               	movlw	0
  3169  001ABC  6EF1               	movwf	intcon2,c	;volatile
  3170                           
  3171                           ;Main_PowerSense.c: 136: INTCON3 = 0b00000000;
  3172  001ABE  0E00               	movlw	0
  3173  001AC0  6EF0               	movwf	intcon3,c	;volatile
  3174                           
  3175                           ;Main_PowerSense.c: 138: RCONbits.IPEN = 0;
  3176  001AC2  9ED0               	bcf	4048,7,c	;volatile
  3177                           
  3178                           ;Main_PowerSense.c: 140: PIR1 = 0b00000000;
  3179  001AC4  0E00               	movlw	0
  3180  001AC6  6E9E               	movwf	3998,c	;volatile
  3181                           
  3182                           ;Main_PowerSense.c: 141: PIR2 = 0b00000000;
  3183  001AC8  0E00               	movlw	0
  3184  001ACA  6EA1               	movwf	4001,c	;volatile
  3185                           
  3186                           ;Main_PowerSense.c: 142: PIR3 = 0b00000000;
  3187  001ACC  0E00               	movlw	0
  3188  001ACE  6EA4               	movwf	4004,c	;volatile
  3189                           
  3190                           ;Main_PowerSense.c: 143: PIR4 = 0b00000000;
  3191  001AD0  0E00               	movlw	0
  3192  001AD2  6E7B               	movwf	3963,c	;volatile
  3193                           
  3194                           ;Main_PowerSense.c: 144: PIR5 = 0b00000000;
  3195  001AD4  0E00               	movlw	0
  3196  001AD6  6E7E               	movwf	3966,c	;volatile
  3197                           
  3198                           ;Main_PowerSense.c: 146: PIE1 = 0b00000000;
  3199  001AD8  0E00               	movlw	0
  3200  001ADA  6E9D               	movwf	3997,c	;volatile
  3201                           
  3202                           ;Main_PowerSense.c: 147: PIE2 = 0b00000000;
  3203  001ADC  0E00               	movlw	0
  3204  001ADE  6EA0               	movwf	4000,c	;volatile
  3205                           
  3206                           ;Main_PowerSense.c: 148: PIE3 = 0b00000000;
  3207  001AE0  0E00               	movlw	0
  3208  001AE2  6EA3               	movwf	4003,c	;volatile
  3209                           
  3210                           ;Main_PowerSense.c: 149: PIE4 = 0b00000000;
  3211  001AE4  0E00               	movlw	0
  3212  001AE6  6E7A               	movwf	3962,c	;volatile
  3213                           
  3214                           ;Main_PowerSense.c: 150: PIE5 = 0b00000000;
  3215  001AE8  0E00               	movlw	0
  3216  001AEA  6E7D               	movwf	3965,c	;volatile
  3217                           
  3218                           ;Main_PowerSense.c: 152: IPR1 = 0b00000000;
  3219  001AEC  0E00               	movlw	0
  3220  001AEE  6E9F               	movwf	3999,c	;volatile
  3221                           
  3222                           ;Main_PowerSense.c: 153: IPR2 = 0b00000000;
  3223  001AF0  0E00               	movlw	0
  3224  001AF2  6EA2               	movwf	4002,c	;volatile
  3225                           
  3226                           ;Main_PowerSense.c: 154: IPR3 = 0b00000000;
  3227  001AF4  0E00               	movlw	0
  3228  001AF6  6EA5               	movwf	4005,c	;volatile
  3229                           
  3230                           ;Main_PowerSense.c: 155: IPR4 = 0b00000000;
  3231  001AF8  0E00               	movlw	0
  3232  001AFA  6E7C               	movwf	3964,c	;volatile
  3233                           
  3234                           ;Main_PowerSense.c: 156: IPR5 = 0b00000000;
  3235  001AFC  0E00               	movlw	0
  3236  001AFE  6E7F               	movwf	3967,c	;volatile
  3237  001B00  0012               	return	
  3238  001B02                     __end_of_initInterruptsClear:
  3239                           	opt stack 0
  3240                           tblptru	equ	0xFF8
  3241                           intcon	equ	0xFF2
  3242                           intcon2	equ	0xFF1
  3243                           intcon3	equ	0xFF0
  3244                           postinc0	equ	0xFEE
  3245                           wreg	equ	0xFE8
  3246                           postinc2	equ	0xFDE
  3247                           postdec2	equ	0xFDD
  3248                           fsr2h	equ	0xFDA
  3249                           fsr2l	equ	0xFD9
  3250                           status	equ	0xFD8
  3251                           
  3252 ;; *************** function _initIO *****************
  3253 ;; Defined at:
  3254 ;;		line 121 in file "Main_PowerSense.c"
  3255 ;; Parameters:    Size  Location     Type
  3256 ;;		None
  3257 ;; Auto vars:     Size  Location     Type
  3258 ;;		None
  3259 ;; Return value:  Size  Location     Type
  3260 ;;                  1    wreg      void 
  3261 ;; Registers used:
  3262 ;;		wreg, status,2
  3263 ;; Tracked objects:
  3264 ;;		On entry : 0/0
  3265 ;;		On exit  : 0/0
  3266 ;;		Unchanged: 0/0
  3267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3268 ;;      Params:         0       0       0       0       0       0       0
  3269 ;;      Locals:         0       0       0       0       0       0       0
  3270 ;;      Temps:          0       0       0       0       0       0       0
  3271 ;;      Totals:         0       0       0       0       0       0       0
  3272 ;;Total ram usage:        0 bytes
  3273 ;; Hardware stack levels used:    1
  3274 ;; Hardware stack levels required when called:    1
  3275 ;; This function calls:
  3276 ;;		Nothing
  3277 ;; This function is called by:
  3278 ;;		_main
  3279 ;; This function uses a non-reentrant model
  3280 ;;
  3281                           
  3282                           	psect	text21
  3283  001F58                     __ptext21:
  3284                           	opt stack 0
  3285  001F58                     _initIO:
  3286                           	opt stack 29
  3287                           
  3288                           ;Main_PowerSense.c: 123: ADCON0bits.ADON = 0;
  3289                           
  3290                           ;incstack = 0
  3291  001F58  90C2               	bcf	4034,0,c	;volatile
  3292                           
  3293                           ;Main_PowerSense.c: 124: ANSELA = 0b00000000;
  3294  001F5A  0E00               	movlw	0
  3295  001F5C  010F               	movlb	15	; () banked
  3296  001F5E  6F38               	movwf	56,b	;volatile
  3297                           
  3298                           ;Main_PowerSense.c: 125: ANSELB = 0b00000000;
  3299  001F60  0E00               	movlw	0
  3300  001F62  6F39               	movwf	57,b	;volatile
  3301                           
  3302                           ;Main_PowerSense.c: 126: ANSELC = 0b00000000;
  3303  001F64  0E00               	movlw	0
  3304  001F66  6F3A               	movwf	58,b	;volatile
  3305  001F68  0012               	return	
  3306  001F6A                     __end_of_initIO:
  3307                           	opt stack 0
  3308                           tblptru	equ	0xFF8
  3309                           intcon	equ	0xFF2
  3310                           intcon2	equ	0xFF1
  3311                           intcon3	equ	0xFF0
  3312                           postinc0	equ	0xFEE
  3313                           wreg	equ	0xFE8
  3314                           postinc2	equ	0xFDE
  3315                           postdec2	equ	0xFDD
  3316                           fsr2h	equ	0xFDA
  3317                           fsr2l	equ	0xFD9
  3318                           status	equ	0xFD8
  3319                           
  3320 ;; *************** function _commRun *****************
  3321 ;; Defined at:
  3322 ;;		line 114 in file "SlaveComm.c"
  3323 ;; Parameters:    Size  Location     Type
  3324 ;;		None
  3325 ;; Auto vars:     Size  Location     Type
  3326 ;;		None
  3327 ;; Return value:  Size  Location     Type
  3328 ;;                  1    wreg      void 
  3329 ;; Registers used:
  3330 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3331 ;; Tracked objects:
  3332 ;;		On entry : 0/0
  3333 ;;		On exit  : 0/0
  3334 ;;		Unchanged: 0/0
  3335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3336 ;;      Params:         0       0       0       0       0       0       0
  3337 ;;      Locals:         0       0       0       0       0       0       0
  3338 ;;      Temps:          0       0       0       0       0       0       0
  3339 ;;      Totals:         0       0       0       0       0       0       0
  3340 ;;Total ram usage:        0 bytes
  3341 ;; Hardware stack levels used:    1
  3342 ;; Hardware stack levels required when called:   10
  3343 ;; This function calls:
  3344 ;;		_communications
  3345 ;; This function is called by:
  3346 ;;		_main
  3347 ;; This function uses a non-reentrant model
  3348 ;;
  3349                           
  3350                           	psect	text22
  3351  001F90                     __ptext22:
  3352                           	opt stack 0
  3353  001F90                     _commRun:
  3354                           	opt stack 20
  3355                           
  3356                           ;SlaveComm.c: 116: communications( 0 );
  3357                           
  3358                           ; BSR set to: 15
  3359                           ;incstack = 0
  3360  001F90  0E00               	movlw	0
  3361  001F92  ECC2  F009         	call	_communications
  3362  001F96  0012               	return	
  3363  001F98                     __end_of_commRun:
  3364                           	opt stack 0
  3365                           tblptru	equ	0xFF8
  3366                           intcon	equ	0xFF2
  3367                           intcon2	equ	0xFF1
  3368                           intcon3	equ	0xFF0
  3369                           postinc0	equ	0xFEE
  3370                           wreg	equ	0xFE8
  3371                           postinc2	equ	0xFDE
  3372                           postdec2	equ	0xFDD
  3373                           fsr2h	equ	0xFDA
  3374                           fsr2l	equ	0xFD9
  3375                           status	equ	0xFD8
  3376                           
  3377 ;; *************** function _commInit *****************
  3378 ;; Defined at:
  3379 ;;		line 106 in file "SlaveComm.c"
  3380 ;; Parameters:    Size  Location     Type
  3381 ;;		None
  3382 ;; Auto vars:     Size  Location     Type
  3383 ;;		None
  3384 ;; Return value:  Size  Location     Type
  3385 ;;                  1    wreg      void 
  3386 ;; Registers used:
  3387 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3388 ;; Tracked objects:
  3389 ;;		On entry : 0/0
  3390 ;;		On exit  : 0/0
  3391 ;;		Unchanged: 0/0
  3392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3393 ;;      Params:         0       0       0       0       0       0       0
  3394 ;;      Locals:         0       0       0       0       0       0       0
  3395 ;;      Temps:          0       0       0       0       0       0       0
  3396 ;;      Totals:         0       0       0       0       0       0       0
  3397 ;;Total ram usage:        0 bytes
  3398 ;; Hardware stack levels used:    1
  3399 ;; Hardware stack levels required when called:   10
  3400 ;; This function calls:
  3401 ;;		_SPISlaveInit
  3402 ;;		_communications
  3403 ;; This function is called by:
  3404 ;;		_main
  3405 ;; This function uses a non-reentrant model
  3406 ;;
  3407                           
  3408                           	psect	text23
  3409  001F84                     __ptext23:
  3410                           	opt stack 0
  3411  001F84                     _commInit:
  3412                           	opt stack 20
  3413                           
  3414                           ;SlaveComm.c: 108: SPISlaveInit( );
  3415                           
  3416                           ;incstack = 0
  3417  001F84  EC11  F00F         	call	_SPISlaveInit	;wreg free
  3418                           
  3419                           ;SlaveComm.c: 109: communications( 1 );
  3420  001F88  0E01               	movlw	1
  3421  001F8A  ECC2  F009         	call	_communications
  3422  001F8E  0012               	return	
  3423  001F90                     __end_of_commInit:
  3424                           	opt stack 0
  3425                           tblptru	equ	0xFF8
  3426                           intcon	equ	0xFF2
  3427                           intcon2	equ	0xFF1
  3428                           intcon3	equ	0xFF0
  3429                           postinc0	equ	0xFEE
  3430                           wreg	equ	0xFE8
  3431                           postinc2	equ	0xFDE
  3432                           postdec2	equ	0xFDD
  3433                           fsr2h	equ	0xFDA
  3434                           fsr2l	equ	0xFD9
  3435                           status	equ	0xFD8
  3436                           
  3437 ;; *************** function _communications *****************
  3438 ;; Defined at:
  3439 ;;		line 121 in file "SlaveComm.c"
  3440 ;; Parameters:    Size  Location     Type
  3441 ;;  firstTime       1    wreg     unsigned char 
  3442 ;; Auto vars:     Size  Location     Type
  3443 ;;  firstTime       1   37[BANK0 ] unsigned char 
  3444 ;;  no_more_to_s    1   36[BANK0 ] unsigned char 
  3445 ;; Return value:  Size  Location     Type
  3446 ;;                  1    wreg      void 
  3447 ;; Registers used:
  3448 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3449 ;; Tracked objects:
  3450 ;;		On entry : 0/0
  3451 ;;		On exit  : 0/0
  3452 ;;		Unchanged: 0/0
  3453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3454 ;;      Params:         0       0       0       0       0       0       0
  3455 ;;      Locals:         0       2       0       0       0       0       0
  3456 ;;      Temps:          0       0       0       0       0       0       0
  3457 ;;      Totals:         0       2       0       0       0       0       0
  3458 ;;Total ram usage:        2 bytes
  3459 ;; Hardware stack levels used:    1
  3460 ;; Hardware stack levels required when called:    9
  3461 ;; This function calls:
  3462 ;;		_process_data
  3463 ;;		_receive_data
  3464 ;;		_resetCommunications
  3465 ;;		_send_data
  3466 ;; This function is called by:
  3467 ;;		_commInit
  3468 ;;		_commRun
  3469 ;; This function uses a non-reentrant model
  3470 ;;
  3471                           
  3472                           	psect	text24
  3473  001384                     __ptext24:
  3474                           	opt stack 0
  3475  001384                     _communications:
  3476                           	opt stack 20
  3477                           
  3478                           ;incstack = 0
  3479                           ;communications@firstTime stored from wreg
  3480  001384  0100               	movlb	0	; () banked
  3481  001386  6FD3               	movwf	communications@firstTime& (0+255),b
  3482                           
  3483                           ;SlaveComm.c: 123: static struct buffer receive_buffer;
  3484                           ;SlaveComm.c: 124: static struct buffer send_buffer;
  3485                           ;SlaveComm.c: 126: static bool end_of_transmission_received = 0;
  3486                           ;SlaveComm.c: 127: bool no_more_to_send;
  3487                           ;SlaveComm.c: 129: static enum receive_status receive_current_state;
  3488                           ;SlaveComm.c: 132: if( firstTime == 1 )
  3489  001388  0100               	movlb	0	; () banked
  3490  00138A  05D3               	decf	communications@firstTime& (0+255),w,b
  3491  00138C  A4D8               	btfss	status,2,c
  3492  00138E  D00B               	goto	l194
  3493                           
  3494                           ; BSR set to: 0
  3495                           ;SlaveComm.c: 133: {
  3496                           ;SlaveComm.c: 134: send_buffer.write_position = 0;
  3497  001390  0E00               	movlw	0
  3498  001392  6FAC               	movwf	(communications@send_buffer+40)& (0+255),b
  3499                           
  3500                           ;SlaveComm.c: 135: send_buffer.read_position = 0;
  3501  001394  0E00               	movlw	0
  3502  001396  6FAD               	movwf	(communications@send_buffer+41)& (0+255),b
  3503                           
  3504                           ; BSR set to: 0
  3505                           ;SlaveComm.c: 136: resetCommunications( &send_buffer );
  3506  001398  0E84               	movlw	low communications@send_buffer
  3507  00139A  6E3B               	movwf	resetCommunications@send_buffer,c
  3508  00139C  0E00               	movlw	high communications@send_buffer
  3509  00139E  6E3C               	movwf	resetCommunications@send_buffer+1,c
  3510  0013A0  EC1C  F009         	call	_resetCommunications	;wreg free
  3511                           
  3512                           ;SlaveComm.c: 137: }
  3513  0013A4  0012               	return	
  3514  0013A6                     l194:
  3515                           
  3516                           ;SlaveComm.c: 138: else
  3517                           ;SlaveComm.c: 139: {
  3518                           ;SlaveComm.c: 140: receive_current_state = receive_data( &receive_buffer );
  3519  0013A6  0E33               	movlw	low communications@receive_buffer
  3520  0013A8  6E16               	movwf	receive_data@receive_buffer,c
  3521  0013AA  0E01               	movlw	high communications@receive_buffer
  3522  0013AC  6E17               	movwf	receive_data@receive_buffer+1,c
  3523  0013AE  ECFE  F007         	call	_receive_data	;wreg free
  3524  0013B2  0100               	movlb	0	; () banked
  3525  0013B4  6F82               	movwf	communications@receive_current_state& (0+255),b
  3526                           
  3527                           ;SlaveComm.c: 142: switch( receive_current_state )
  3528  0013B6  D011               	goto	l196
  3529  0013B8                     
  3530                           ; BSR set to: 0
  3531                           ;SlaveComm.c: 152: if( process_data( &receive_buffer, &send_buffer ) == 1 )
  3532                           
  3533                           ; BSR set to: 0
  3534  0013B8  0E33               	movlw	low communications@receive_buffer
  3535  0013BA  6FCE               	movwf	process_data@receive_buffer& (0+255),b
  3536  0013BC  0E01               	movlw	high communications@receive_buffer
  3537  0013BE  6FCF               	movwf	(process_data@receive_buffer+1)& (0+255),b
  3538  0013C0  0E84               	movlw	low communications@send_buffer
  3539  0013C2  6FD0               	movwf	process_data@send_buffer& (0+255),b
  3540  0013C4  0E00               	movlw	high communications@send_buffer
  3541  0013C6  6FD1               	movwf	(process_data@send_buffer+1)& (0+255),b
  3542  0013C8  ECB7  F00E         	call	_process_data	;wreg free
  3543  0013CC  06E8               	decf	wreg,f,c
  3544  0013CE  A4D8               	btfss	status,2,c
  3545  0013D0  D00E               	goto	l198
  3546                           
  3547                           ;SlaveComm.c: 153: {
  3548                           ;SlaveComm.c: 154: end_of_transmission_received = 1;
  3549  0013D2  0E01               	movlw	1
  3550  0013D4  0100               	movlb	0	; () banked
  3551  0013D6  6F83               	movwf	communications@end_of_transmission_received& (0+255),b
  3552                           
  3553                           ; BSR set to: 0
  3554                           ;SlaveComm.c: 158: }
  3555                           
  3556                           ; BSR set to: 0
  3557                           ;SlaveComm.c: 155: }
  3558                           ;SlaveComm.c: 157: break;
  3559  0013D8  D00A               	goto	l198
  3560  0013DA                     l196:
  3561                           
  3562                           ; BSR set to: 0
  3563                           
  3564                           ; BSR set to: 0
  3565  0013DA  5182               	movf	communications@receive_current_state& (0+255),w,b
  3566                           
  3567                           ; Switch size 1, requested type "space"
  3568                           ; Number of cases is 3, Range of values is 0 to 2
  3569                           ; switch strategies available:
  3570                           ; Name         Instructions Cycles
  3571                           ; simple_byte           10     6 (average)
  3572                           ;	Chosen strategy is simple_byte
  3573  0013DC  0A00               	xorlw	0	; case 0
  3574  0013DE  B4D8               	btfsc	status,2,c
  3575  0013E0  D006               	goto	l198
  3576  0013E2  0A01               	xorlw	1	; case 1
  3577  0013E4  B4D8               	btfsc	status,2,c
  3578  0013E6  D003               	goto	l198
  3579  0013E8  0A03               	xorlw	3	; case 2
  3580  0013EA  B4D8               	btfsc	status,2,c
  3581  0013EC  D7E5               	goto	l200
  3582  0013EE                     l198:
  3583                           
  3584                           ;SlaveComm.c: 160: no_more_to_send = send_data( &send_buffer );
  3585                           
  3586                           ; BSR set to: 0
  3587  0013EE  0E84               	movlw	low communications@send_buffer
  3588  0013F0  6E15               	movwf	send_data@send_buffer,c
  3589  0013F2  0E00               	movlw	high communications@send_buffer
  3590  0013F4  6E16               	movwf	send_data@send_buffer+1,c
  3591  0013F6  ECA8  F00A         	call	_send_data	;wreg free
  3592  0013FA  0100               	movlb	0	; () banked
  3593  0013FC  6FD2               	movwf	communications@no_more_to_send& (0+255),b
  3594                           
  3595                           ; BSR set to: 0
  3596                           ;SlaveComm.c: 163: static bool last_state_active = 0;
  3597                           ;SlaveComm.c: 164: if( PORTBbits.SS2 == 0b1 )
  3598  0013FE  A081               	btfss	3969,0,c	;volatile
  3599  001400  D003               	goto	l204
  3600                           
  3601                           ; BSR set to: 0
  3602                           ;SlaveComm.c: 165: {
  3603                           ;SlaveComm.c: 166: last_state_active = 0;
  3604  001402  0E00               	movlw	0
  3605  001404  6F81               	movwf	communications@last_state_active& (0+255),b
  3606                           
  3607                           ;SlaveComm.c: 167: }
  3608  001406  0012               	return	
  3609  001408                     l204:
  3610                           
  3611                           ; BSR set to: 0
  3612                           ;SlaveComm.c: 168: else
  3613                           ;SlaveComm.c: 169: {
  3614                           ;SlaveComm.c: 170: if( last_state_active == 0 )
  3615                           
  3616                           ; BSR set to: 0
  3617  001408  5181               	movf	communications@last_state_active& (0+255),w,b
  3618  00140A  A4D8               	btfss	status,2,c
  3619  00140C  D006               	goto	l206
  3620                           
  3621                           ; BSR set to: 0
  3622                           ;SlaveComm.c: 171: {
  3623                           ;SlaveComm.c: 172: resetCommunications( &send_buffer );
  3624  00140E  0E84               	movlw	low communications@send_buffer
  3625  001410  6E3B               	movwf	resetCommunications@send_buffer,c
  3626  001412  0E00               	movlw	high communications@send_buffer
  3627  001414  6E3C               	movwf	resetCommunications@send_buffer+1,c
  3628  001416  EC1C  F009         	call	_resetCommunications	;wreg free
  3629  00141A                     l206:
  3630                           
  3631                           ;SlaveComm.c: 173: }
  3632                           ;SlaveComm.c: 175: last_state_active = 1;
  3633  00141A  0E01               	movlw	1
  3634  00141C  0100               	movlb	0	; () banked
  3635  00141E  6F81               	movwf	communications@last_state_active& (0+255),b
  3636                           
  3637                           ; BSR set to: 0
  3638                           
  3639                           ; BSR set to: 0
  3640  001420  0012               	return	
  3641  001422                     __end_of_communications:
  3642                           	opt stack 0
  3643                           tblptru	equ	0xFF8
  3644                           intcon	equ	0xFF2
  3645                           intcon2	equ	0xFF1
  3646                           intcon3	equ	0xFF0
  3647                           postinc0	equ	0xFEE
  3648                           wreg	equ	0xFE8
  3649                           postinc2	equ	0xFDE
  3650                           postdec2	equ	0xFDD
  3651                           fsr2h	equ	0xFDA
  3652                           fsr2l	equ	0xFD9
  3653                           status	equ	0xFD8
  3654                           
  3655 ;; *************** function _send_data *****************
  3656 ;; Defined at:
  3657 ;;		line 507 in file "SlaveComm.c"
  3658 ;; Parameters:    Size  Location     Type
  3659 ;;  send_buffer     2   20[COMRAM] PTR struct buffer
  3660 ;;		 -> communications@send_buffer(42), 
  3661 ;; Auto vars:     Size  Location     Type
  3662 ;;  send_end        1   24[COMRAM] unsigned char 
  3663 ;; Return value:  Size  Location     Type
  3664 ;;                  1    wreg      unsigned char 
  3665 ;; Registers used:
  3666 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3667 ;; Tracked objects:
  3668 ;;		On entry : 0/0
  3669 ;;		On exit  : 0/0
  3670 ;;		Unchanged: 0/0
  3671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3672 ;;      Params:         2       0       0       0       0       0       0
  3673 ;;      Locals:         1       0       0       0       0       0       0
  3674 ;;      Temps:          2       0       0       0       0       0       0
  3675 ;;      Totals:         5       0       0       0       0       0       0
  3676 ;;Total ram usage:        5 bytes
  3677 ;; Hardware stack levels used:    1
  3678 ;; Hardware stack levels required when called:    2
  3679 ;; This function calls:
  3680 ;;		_SPI_send_data
  3681 ;; This function is called by:
  3682 ;;		_communications
  3683 ;; This function uses a non-reentrant model
  3684 ;;
  3685                           
  3686                           	psect	text25
  3687  001550                     __ptext25:
  3688                           	opt stack 0
  3689  001550                     _send_data:
  3690                           	opt stack 26
  3691                           
  3692                           ;SlaveComm.c: 509: bool send_end;
  3693                           ;SlaveComm.c: 511: if( send_buffer->read_position == send_buffer->write_position )
  3694                           
  3695                           ;incstack = 0
  3696  001550  EE20 F028          	lfsr	2,40
  3697  001554  5015               	movf	send_data@send_buffer,w,c
  3698  001556  26D9               	addwf	fsr2l,f,c
  3699  001558  5016               	movf	send_data@send_buffer+1,w,c
  3700  00155A  22DA               	addwfc	fsr2h,f,c
  3701  00155C  EE10 F029          	lfsr	1,41
  3702  001560  5015               	movf	send_data@send_buffer,w,c
  3703  001562  26E1               	addwf	fsr1l,f,c
  3704  001564  5016               	movf	send_data@send_buffer+1,w,c
  3705  001566  22E2               	addwfc	fsr1h,f,c
  3706  001568  50DE               	movf	postinc2,w,c
  3707  00156A  18E6               	xorwf	postinc1,w,c
  3708  00156C  A4D8               	btfss	status,2,c
  3709  00156E  D006               	goto	l299
  3710                           
  3711                           ;SlaveComm.c: 512: {
  3712                           ;SlaveComm.c: 513: send_end = 1;
  3713  001570  0E01               	movlw	1
  3714  001572  6E19               	movwf	send_data@send_end,c
  3715                           
  3716                           ;SlaveComm.c: 514: SPI_send_data( '\0' );
  3717  001574  0E00               	movlw	0
  3718  001576  EC4B  F00F         	call	_SPI_send_data
  3719                           
  3720                           ;SlaveComm.c: 515: }
  3721  00157A  D030               	goto	l302
  3722  00157C                     l299:
  3723                           
  3724                           ;SlaveComm.c: 516: else
  3725                           ;SlaveComm.c: 517: {
  3726                           ;SlaveComm.c: 518: send_end = 0;
  3727  00157C  0E00               	movlw	0
  3728  00157E  6E19               	movwf	send_data@send_end,c
  3729                           
  3730                           ;SlaveComm.c: 521: if( SPI_send_data( send_buffer->data_buffer[send_buffer->read_positio
      +                          n] ) == 1 )
  3731  001580  EE20 F029          	lfsr	2,41
  3732  001584  5015               	movf	send_data@send_buffer,w,c
  3733  001586  26D9               	addwf	fsr2l,f,c
  3734  001588  5016               	movf	send_data@send_buffer+1,w,c
  3735  00158A  22DA               	addwfc	fsr2h,f,c
  3736  00158C  50DF               	movf	indf2,w,c
  3737  00158E  6E17               	movwf	??_send_data& (0+255),c
  3738  001590  5017               	movf	??_send_data,w,c
  3739  001592  0D01               	mullw	1
  3740  001594  50F3               	movf	prodl,w,c
  3741  001596  2415               	addwf	send_data@send_buffer,w,c
  3742  001598  6ED9               	movwf	fsr2l,c
  3743  00159A  50F4               	movf	prodh,w,c
  3744  00159C  2016               	addwfc	send_data@send_buffer+1,w,c
  3745  00159E  6EDA               	movwf	fsr2h,c
  3746  0015A0  50DF               	movf	indf2,w,c
  3747  0015A2  EC4B  F00F         	call	_SPI_send_data
  3748  0015A6  06E8               	decf	wreg,f,c
  3749  0015A8  A4D8               	btfss	status,2,c
  3750  0015AA  D018               	goto	l302
  3751                           
  3752                           ;SlaveComm.c: 522: {
  3753                           ;SlaveComm.c: 524: send_buffer->read_position++;
  3754  0015AC  EE20 F029          	lfsr	2,41
  3755  0015B0  5015               	movf	send_data@send_buffer,w,c
  3756  0015B2  26D9               	addwf	fsr2l,f,c
  3757  0015B4  5016               	movf	send_data@send_buffer+1,w,c
  3758  0015B6  22DA               	addwfc	fsr2h,f,c
  3759  0015B8  2ADF               	incf	indf2,f,c
  3760                           
  3761                           ;SlaveComm.c: 525: if( send_buffer->read_position >= 40 )
  3762  0015BA  EE20 F029          	lfsr	2,41
  3763  0015BE  5015               	movf	send_data@send_buffer,w,c
  3764  0015C0  26D9               	addwf	fsr2l,f,c
  3765  0015C2  5016               	movf	send_data@send_buffer+1,w,c
  3766  0015C4  22DA               	addwfc	fsr2h,f,c
  3767  0015C6  0E27               	movlw	39
  3768  0015C8  64DF               	cpfsgt	indf2,c
  3769  0015CA  D008               	goto	l302
  3770                           
  3771                           ;SlaveComm.c: 526: {
  3772                           ;SlaveComm.c: 527: send_buffer->read_position = 0;
  3773  0015CC  EE20 F029          	lfsr	2,41
  3774  0015D0  5015               	movf	send_data@send_buffer,w,c
  3775  0015D2  26D9               	addwf	fsr2l,f,c
  3776  0015D4  5016               	movf	send_data@send_buffer+1,w,c
  3777  0015D6  22DA               	addwfc	fsr2h,f,c
  3778  0015D8  0E00               	movlw	0
  3779  0015DA  6EDF               	movwf	indf2,c
  3780  0015DC                     l302:
  3781                           
  3782                           ;SlaveComm.c: 528: }
  3783                           ;SlaveComm.c: 529: }
  3784                           ;SlaveComm.c: 530: }
  3785                           ;SlaveComm.c: 532: return send_end;
  3786  0015DC  5019               	movf	send_data@send_end,w,c
  3787  0015DE  0012               	return	
  3788  0015E0                     __end_of_send_data:
  3789                           	opt stack 0
  3790                           tblptru	equ	0xFF8
  3791                           prodh	equ	0xFF4
  3792                           prodl	equ	0xFF3
  3793                           intcon	equ	0xFF2
  3794                           intcon2	equ	0xFF1
  3795                           intcon3	equ	0xFF0
  3796                           postinc0	equ	0xFEE
  3797                           wreg	equ	0xFE8
  3798                           postinc1	equ	0xFE6
  3799                           fsr1h	equ	0xFE2
  3800                           fsr1l	equ	0xFE1
  3801                           indf2	equ	0xFDF
  3802                           postinc2	equ	0xFDE
  3803                           postdec2	equ	0xFDD
  3804                           fsr2h	equ	0xFDA
  3805                           fsr2l	equ	0xFD9
  3806                           status	equ	0xFD8
  3807                           
  3808 ;; *************** function _SPI_send_data *****************
  3809 ;; Defined at:
  3810 ;;		line 605 in file "SlaveComm.c"
  3811 ;; Parameters:    Size  Location     Type
  3812 ;;  data            1    wreg     unsigned char 
  3813 ;; Auto vars:     Size  Location     Type
  3814 ;;  data            1   18[COMRAM] unsigned char 
  3815 ;;  sendGood        1   19[COMRAM] unsigned char 
  3816 ;; Return value:  Size  Location     Type
  3817 ;;                  1    wreg      unsigned char 
  3818 ;; Registers used:
  3819 ;;		wreg, status,2
  3820 ;; Tracked objects:
  3821 ;;		On entry : 0/0
  3822 ;;		On exit  : 0/0
  3823 ;;		Unchanged: 0/0
  3824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3825 ;;      Params:         0       0       0       0       0       0       0
  3826 ;;      Locals:         2       0       0       0       0       0       0
  3827 ;;      Temps:          0       0       0       0       0       0       0
  3828 ;;      Totals:         2       0       0       0       0       0       0
  3829 ;;Total ram usage:        2 bytes
  3830 ;; Hardware stack levels used:    1
  3831 ;; Hardware stack levels required when called:    1
  3832 ;; This function calls:
  3833 ;;		Nothing
  3834 ;; This function is called by:
  3835 ;;		_send_data
  3836 ;; This function uses a non-reentrant model
  3837 ;;
  3838                           
  3839                           	psect	text26
  3840  001E96                     __ptext26:
  3841                           	opt stack 0
  3842  001E96                     _SPI_send_data:
  3843                           	opt stack 26
  3844                           
  3845                           ;incstack = 0
  3846                           ;SPI_send_data@data stored from wreg
  3847  001E96  6E13               	movwf	SPI_send_data@data,c
  3848                           
  3849                           ;SlaveComm.c: 607: bool sendGood = 0;
  3850  001E98  0E00               	movlw	0
  3851  001E9A  6E14               	movwf	SPI_send_data@sendGood,c
  3852                           
  3853                           ;SlaveComm.c: 609: if( SPI_transmit_wait == 0 )
  3854  001E9C  504C               	movf	_SPI_transmit_wait,w,c
  3855  001E9E  A4D8               	btfss	status,2,c
  3856  001EA0  D006               	goto	l330
  3857                           
  3858                           ;SlaveComm.c: 610: {
  3859                           ;SlaveComm.c: 611: SSP2BUF = data;
  3860  001EA2  C013  FF6F         	movff	SPI_send_data@data,3951	;volatile
  3861                           
  3862                           ;SlaveComm.c: 612: SPI_transmit_wait = 1;
  3863  001EA6  0E01               	movlw	1
  3864  001EA8  6E4C               	movwf	_SPI_transmit_wait,c
  3865                           
  3866                           ;SlaveComm.c: 613: sendGood = 1;
  3867  001EAA  0E01               	movlw	1
  3868  001EAC  D001               	goto	L4
  3869  001EAE                     l330:
  3870                           
  3871                           ;SlaveComm.c: 615: else
  3872                           ;SlaveComm.c: 616: {
  3873                           ;SlaveComm.c: 617: sendGood = 0;
  3874  001EAE  0E00               	movlw	0
  3875  001EB0                     L4:
  3876  001EB0  6E14               	movwf	SPI_send_data@sendGood,c
  3877                           
  3878                           ;SlaveComm.c: 618: }
  3879                           ;SlaveComm.c: 620: return sendGood;
  3880  001EB2  5014               	movf	SPI_send_data@sendGood,w,c
  3881  001EB4  0012               	return	
  3882  001EB6                     __end_of_SPI_send_data:
  3883                           	opt stack 0
  3884                           tblptru	equ	0xFF8
  3885                           prodh	equ	0xFF4
  3886                           prodl	equ	0xFF3
  3887                           intcon	equ	0xFF2
  3888                           intcon2	equ	0xFF1
  3889                           intcon3	equ	0xFF0
  3890                           postinc0	equ	0xFEE
  3891                           wreg	equ	0xFE8
  3892                           postinc1	equ	0xFE6
  3893                           fsr1h	equ	0xFE2
  3894                           fsr1l	equ	0xFE1
  3895                           indf2	equ	0xFDF
  3896                           postinc2	equ	0xFDE
  3897                           postdec2	equ	0xFDD
  3898                           fsr2h	equ	0xFDA
  3899                           fsr2l	equ	0xFD9
  3900                           status	equ	0xFD8
  3901                           
  3902 ;; *************** function _resetCommunications *****************
  3903 ;; Defined at:
  3904 ;;		line 183 in file "SlaveComm.c"
  3905 ;; Parameters:    Size  Location     Type
  3906 ;;  send_buffer     2   58[COMRAM] PTR struct buffer
  3907 ;;		 -> communications@send_buffer(42), 
  3908 ;; Auto vars:     Size  Location     Type
  3909 ;;		None
  3910 ;; Return value:  Size  Location     Type
  3911 ;;                  1    wreg      void 
  3912 ;; Registers used:
  3913 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3914 ;; Tracked objects:
  3915 ;;		On entry : 0/0
  3916 ;;		On exit  : 0/0
  3917 ;;		Unchanged: 0/0
  3918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3919 ;;      Params:         2       0       0       0       0       0       0
  3920 ;;      Locals:         0       0       0       0       0       0       0
  3921 ;;      Temps:          0       2       0       0       0       0       0
  3922 ;;      Totals:         2       2       0       0       0       0       0
  3923 ;;Total ram usage:        4 bytes
  3924 ;; Hardware stack levels used:    1
  3925 ;; Hardware stack levels required when called:    7
  3926 ;; This function calls:
  3927 ;;		_com_command_setEnergyUsed
  3928 ;;		_com_command_setPower
  3929 ;;		_com_command_setVersion
  3930 ;;		_ledTestToggle
  3931 ;; This function is called by:
  3932 ;;		_communications
  3933 ;; This function uses a non-reentrant model
  3934 ;;
  3935                           
  3936                           	psect	text27
  3937  001238                     __ptext27:
  3938                           	opt stack 0
  3939  001238                     _resetCommunications:
  3940                           	opt stack 21
  3941                           
  3942                           ;SlaveComm.c: 186: static int commState = 0;
  3943                           ;SlaveComm.c: 189: ledTestToggle( 2 );
  3944                           
  3945                           ;incstack = 0
  3946  001238  0E00               	movlw	0
  3947  00123A  6E22               	movwf	ledTestToggle@ledNum+1,c
  3948  00123C  0E02               	movlw	2
  3949  00123E  6E21               	movwf	ledTestToggle@ledNum,c
  3950  001240  ECB5  F00F         	call	_ledTestToggle	;wreg free
  3951                           
  3952                           ;SlaveComm.c: 191: SSP2CON1bits.SSPEN = 0;
  3953  001244  9A6C               	bcf	3948,5,c	;volatile
  3954                           
  3955                           ;SlaveComm.c: 192: _delay((unsigned long)((1)*(16000000UL/4000.0)));
  3956  001246  0E06               	movlw	6
  3957  001248  0100               	movlb	0	; () banked
  3958  00124A  6FCA               	movwf	??_resetCommunications& (0+255),b
  3959  00124C  0E30               	movlw	48
  3960  00124E                     u3057:
  3961  00124E  2EE8               	decfsz	wreg,f,c
  3962  001250  D7FE               	bra	u3057
  3963  001252  2FCA               	decfsz	??_resetCommunications& (0+255),f,b
  3964  001254  D7FC               	bra	u3057
  3965  001256  F000               	nop	
  3966                           
  3967                           ;SlaveComm.c: 193: SSP2CON1bits.SSPEN = 1;
  3968  001258  8A6C               	bsf	3948,5,c	;volatile
  3969                           
  3970                           ;SlaveComm.c: 195: SSP2CON1bits.WCOL = 0;
  3971  00125A  9E6C               	bcf	3948,7,c	;volatile
  3972                           
  3973                           ;SlaveComm.c: 196: SPI_transmit_wait = 0;
  3974  00125C  0E00               	movlw	0
  3975  00125E  6E4C               	movwf	_SPI_transmit_wait,c
  3976                           
  3977                           ;SlaveComm.c: 198: send_buffer->read_position = 0;
  3978  001260  EE20 F029          	lfsr	2,41
  3979  001264  503B               	movf	resetCommunications@send_buffer,w,c
  3980  001266  26D9               	addwf	fsr2l,f,c
  3981  001268  503C               	movf	resetCommunications@send_buffer+1,w,c
  3982  00126A  22DA               	addwfc	fsr2h,f,c
  3983  00126C  0E00               	movlw	0
  3984  00126E  6EDF               	movwf	indf2,c
  3985                           
  3986                           ;SlaveComm.c: 199: send_buffer->write_position = 0;
  3987  001270  EE20 F028          	lfsr	2,40
  3988  001274  503B               	movf	resetCommunications@send_buffer,w,c
  3989  001276  26D9               	addwf	fsr2l,f,c
  3990  001278  503C               	movf	resetCommunications@send_buffer+1,w,c
  3991  00127A  22DA               	addwfc	fsr2h,f,c
  3992  00127C  0E00               	movlw	0
  3993  00127E  6EDF               	movwf	indf2,c
  3994                           
  3995                           ;SlaveComm.c: 204: commState++;
  3996  001280  4A47               	infsnz	resetCommunications@commState,f,c
  3997  001282  2A48               	incf	resetCommunications@commState+1,f,c
  3998                           
  3999                           ;SlaveComm.c: 205: switch( commState )
  4000  001284  D019               	goto	l212
  4001  001286                     
  4002                           ;SlaveComm.c: 208: com_command_setVersion( send_buffer );
  4003  001286  C03B  F039         	movff	resetCommunications@send_buffer,com_command_setVersion@send_buffer
  4004  00128A  C03C  F03A         	movff	resetCommunications@send_buffer+1,com_command_setVersion@send_buffer+1
  4005  00128E  EC25  F00F         	call	_com_command_setVersion	;wreg free
  4006                           
  4007                           ;SlaveComm.c: 209: break;
  4008  001292  0012               	return	
  4009  001294                     
  4010                           ;SlaveComm.c: 211: com_command_setPower( send_buffer );
  4011  001294  C03B  F039         	movff	resetCommunications@send_buffer,com_command_setPower@send_buffer
  4012  001298  C03C  F03A         	movff	resetCommunications@send_buffer+1,com_command_setPower@send_buffer+1
  4013  00129C  ECA7  F00D         	call	_com_command_setPower	;wreg free
  4014                           
  4015                           ;SlaveComm.c: 212: break;
  4016  0012A0  0012               	return	
  4017  0012A2                     
  4018                           ;SlaveComm.c: 214: com_command_setEnergyUsed( send_buffer );
  4019  0012A2  C03B  F039         	movff	resetCommunications@send_buffer,com_command_setEnergyUsed@send_buffer
  4020  0012A6  C03C  F03A         	movff	resetCommunications@send_buffer+1,com_command_setEnergyUsed@send_buffer+1
  4021  0012AA  ECCC  F00D         	call	_com_command_setEnergyUsed	;wreg free
  4022  0012AE                     
  4023                           ;SlaveComm.c: 226: commState = 0;
  4024  0012AE  0E00               	movlw	0
  4025  0012B0  6E48               	movwf	resetCommunications@commState+1,c
  4026  0012B2  0E00               	movlw	0
  4027  0012B4  6E47               	movwf	resetCommunications@commState,c
  4028                           
  4029                           ;SlaveComm.c: 228: }
  4030                           
  4031                           ;SlaveComm.c: 227: break;
  4032  0012B6  0012               	return	
  4033  0012B8                     l212:
  4034  0012B8  C047  F0CA         	movff	resetCommunications@commState,??_resetCommunications
  4035  0012BC  C048  F0CB         	movff	resetCommunications@commState+1,??_resetCommunications+1
  4036                           
  4037                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4038                           ; Switch size 1, requested type "space"
  4039                           ; Number of cases is 1, Range of values is 0 to 0
  4040                           ; switch strategies available:
  4041                           ; Name         Instructions Cycles
  4042                           ; simple_byte            4     3 (average)
  4043                           ;	Chosen strategy is simple_byte
  4044  0012C0  0100               	movlb	0	; () banked
  4045  0012C2  51CB               	movf	(??_resetCommunications+1)& (0+255),w,b
  4046  0012C4  0A00               	xorlw	0	; case 0
  4047  0012C6  A4D8               	btfss	status,2,c
  4048  0012C8  D7F2               	goto	l217
  4049                           
  4050                           ; BSR set to: 0
  4051                           ; Switch size 1, requested type "space"
  4052                           ; Number of cases is 3, Range of values is 1 to 3
  4053                           ; switch strategies available:
  4054                           ; Name         Instructions Cycles
  4055                           ; simple_byte           10     6 (average)
  4056                           ;	Chosen strategy is simple_byte
  4057  0012CA  51CA               	movf	??_resetCommunications& (0+255),w,b
  4058  0012CC  0A01               	xorlw	1	; case 1
  4059  0012CE  B4D8               	btfsc	status,2,c
  4060  0012D0  D7DA               	goto	l213
  4061  0012D2  0A03               	xorlw	3	; case 2
  4062  0012D4  B4D8               	btfsc	status,2,c
  4063  0012D6  D7DE               	goto	l215
  4064  0012D8  0A01               	xorlw	1	; case 3
  4065  0012DA  B4D8               	btfsc	status,2,c
  4066  0012DC  D7E2               	goto	l216
  4067  0012DE  D7E7               	goto	l217
  4068  0012E0                     __end_of_resetCommunications:
  4069                           	opt stack 0
  4070                           tblptru	equ	0xFF8
  4071                           prodh	equ	0xFF4
  4072                           prodl	equ	0xFF3
  4073                           intcon	equ	0xFF2
  4074                           intcon2	equ	0xFF1
  4075                           intcon3	equ	0xFF0
  4076                           postinc0	equ	0xFEE
  4077                           wreg	equ	0xFE8
  4078                           postinc1	equ	0xFE6
  4079                           fsr1h	equ	0xFE2
  4080                           fsr1l	equ	0xFE1
  4081                           indf2	equ	0xFDF
  4082                           postinc2	equ	0xFDE
  4083                           postdec2	equ	0xFDD
  4084                           fsr2h	equ	0xFDA
  4085                           fsr2l	equ	0xFD9
  4086                           status	equ	0xFD8
  4087                           
  4088 ;; *************** function _ledTestToggle *****************
  4089 ;; Defined at:
  4090 ;;		line 276 in file "LEDControl.c"
  4091 ;; Parameters:    Size  Location     Type
  4092 ;;  ledNum          2   32[COMRAM] int 
  4093 ;; Auto vars:     Size  Location     Type
  4094 ;;		None
  4095 ;; Return value:  Size  Location     Type
  4096 ;;                  1    wreg      void 
  4097 ;; Registers used:
  4098 ;;		wreg, status,2, status,0, cstack
  4099 ;; Tracked objects:
  4100 ;;		On entry : 0/0
  4101 ;;		On exit  : 0/0
  4102 ;;		Unchanged: 0/0
  4103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4104 ;;      Params:         2       0       0       0       0       0       0
  4105 ;;      Locals:         0       0       0       0       0       0       0
  4106 ;;      Temps:          0       0       0       0       0       0       0
  4107 ;;      Totals:         2       0       0       0       0       0       0
  4108 ;;Total ram usage:        2 bytes
  4109 ;; Hardware stack levels used:    1
  4110 ;; Hardware stack levels required when called:    3
  4111 ;; This function calls:
  4112 ;;		_ledToggle
  4113 ;; This function is called by:
  4114 ;;		_resetCommunications
  4115 ;;		_main
  4116 ;; This function uses a non-reentrant model
  4117 ;;
  4118                           
  4119                           	psect	text28
  4120  001F6A                     __ptext28:
  4121                           	opt stack 0
  4122  001F6A                     _ledTestToggle:
  4123                           	opt stack 27
  4124                           
  4125                           ;LEDControl.c: 279: {
  4126                           ;LEDControl.c: 280: ledToggle( ledNum );
  4127                           
  4128                           ;incstack = 0
  4129  001F6A  C021  F019         	movff	ledTestToggle@ledNum,ledToggle@ledNum
  4130  001F6E  C022  F01A         	movff	ledTestToggle@ledNum+1,ledToggle@ledNum+1
  4131  001F72  EC73  F00B         	call	_ledToggle	;wreg free
  4132  001F76  0012               	return	
  4133  001F78                     __end_of_ledTestToggle:
  4134                           	opt stack 0
  4135                           tblptru	equ	0xFF8
  4136                           prodh	equ	0xFF4
  4137                           prodl	equ	0xFF3
  4138                           intcon	equ	0xFF2
  4139                           intcon2	equ	0xFF1
  4140                           intcon3	equ	0xFF0
  4141                           postinc0	equ	0xFEE
  4142                           wreg	equ	0xFE8
  4143                           postinc1	equ	0xFE6
  4144                           fsr1h	equ	0xFE2
  4145                           fsr1l	equ	0xFE1
  4146                           indf2	equ	0xFDF
  4147                           postinc2	equ	0xFDE
  4148                           postdec2	equ	0xFDD
  4149                           fsr2h	equ	0xFDA
  4150                           fsr2l	equ	0xFD9
  4151                           status	equ	0xFD8
  4152                           
  4153 ;; *************** function _ledToggle *****************
  4154 ;; Defined at:
  4155 ;;		line 243 in file "LEDControl.c"
  4156 ;; Parameters:    Size  Location     Type
  4157 ;;  ledNum          2   24[COMRAM] int 
  4158 ;; Auto vars:     Size  Location     Type
  4159 ;;  getValue        2   30[COMRAM] int 
  4160 ;;  setValue        2   28[COMRAM] int 
  4161 ;; Return value:  Size  Location     Type
  4162 ;;                  1    wreg      void 
  4163 ;; Registers used:
  4164 ;;		wreg, status,2, status,0, cstack
  4165 ;; Tracked objects:
  4166 ;;		On entry : 0/0
  4167 ;;		On exit  : 0/0
  4168 ;;		Unchanged: 0/0
  4169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4170 ;;      Params:         2       0       0       0       0       0       0
  4171 ;;      Locals:         4       0       0       0       0       0       0
  4172 ;;      Temps:          2       0       0       0       0       0       0
  4173 ;;      Totals:         8       0       0       0       0       0       0
  4174 ;;Total ram usage:        8 bytes
  4175 ;; Hardware stack levels used:    1
  4176 ;; Hardware stack levels required when called:    2
  4177 ;; This function calls:
  4178 ;;		_ledSet
  4179 ;; This function is called by:
  4180 ;;		_ledTestToggle
  4181 ;;		_ledGoToggle
  4182 ;; This function uses a non-reentrant model
  4183 ;;
  4184                           
  4185                           	psect	text29
  4186  0016E6                     __ptext29:
  4187                           	opt stack 0
  4188  0016E6                     _ledToggle:
  4189                           	opt stack 26
  4190                           
  4191                           ;LEDControl.c: 246: int getValue;
  4192                           ;LEDControl.c: 247: int setValue;
  4193                           ;LEDControl.c: 249: switch( ledNum )
  4194                           
  4195                           ;incstack = 0
  4196  0016E6  D011               	goto	l85
  4197  0016E8                     
  4198                           ;LEDControl.c: 252: getValue = PORTBbits.RB4;
  4199  0016E8  A881               	btfss	3969,4,c	;volatile
  4200  0016EA  D00D               	goto	u1500
  4201  0016EC  D009               	goto	u1501
  4202  0016EE                     u1488:
  4203  0016EE  501B               	movf	??_ledToggle,w,c
  4204  0016F0  6E1F               	movwf	ledToggle@getValue,c
  4205  0016F2  6A20               	clrf	ledToggle@getValue+1,c
  4206                           
  4207                           ;LEDControl.c: 253: break;
  4208  0016F4  D01C               	goto	l87
  4209  0016F6                     
  4210                           ;LEDControl.c: 255: getValue = PORTCbits.RC1;
  4211  0016F6  A282               	btfss	3970,1,c	;volatile
  4212  0016F8  D006               	goto	u1500
  4213  0016FA  D002               	goto	u1501
  4214  0016FC                     
  4215                           ;LEDControl.c: 258: getValue = PORTCbits.RC0;
  4216  0016FC  A082               	btfss	3970,0,c	;volatile
  4217  0016FE  D003               	goto	u1500
  4218  001700                     u1501:
  4219  001700  6A1B               	clrf	??_ledToggle& (0+255),c
  4220  001702  2A1B               	incf	??_ledToggle& (0+255),f,c
  4221  001704  D7F4               	goto	u1488
  4222  001706                     u1500:
  4223  001706  6A1B               	clrf	??_ledToggle& (0+255),c
  4224  001708  D7F2               	goto	u1488
  4225  00170A                     l85:
  4226  00170A  C019  F01B         	movff	ledToggle@ledNum,??_ledToggle
  4227  00170E  C01A  F01C         	movff	ledToggle@ledNum+1,??_ledToggle+1
  4228                           
  4229                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4230                           ; Switch size 1, requested type "space"
  4231                           ; Number of cases is 1, Range of values is 0 to 0
  4232                           ; switch strategies available:
  4233                           ; Name         Instructions Cycles
  4234                           ; simple_byte            4     3 (average)
  4235                           ;	Chosen strategy is simple_byte
  4236  001712  501C               	movf	??_ledToggle+1,w,c
  4237  001714  0A00               	xorlw	0	; case 0
  4238  001716  A4D8               	btfss	status,2,c
  4239  001718  D00A               	goto	l87
  4240                           
  4241                           ; Switch size 1, requested type "space"
  4242                           ; Number of cases is 3, Range of values is 1 to 3
  4243                           ; switch strategies available:
  4244                           ; Name         Instructions Cycles
  4245                           ; simple_byte           10     6 (average)
  4246                           ;	Chosen strategy is simple_byte
  4247  00171A  501B               	movf	??_ledToggle,w,c
  4248  00171C  0A01               	xorlw	1	; case 1
  4249  00171E  B4D8               	btfsc	status,2,c
  4250  001720  D7E3               	goto	l86
  4251  001722  0A03               	xorlw	3	; case 2
  4252  001724  B4D8               	btfsc	status,2,c
  4253  001726  D7E7               	goto	l88
  4254  001728  0A01               	xorlw	1	; case 3
  4255  00172A  B4D8               	btfsc	status,2,c
  4256  00172C  D7E7               	goto	l89
  4257  00172E                     l87:
  4258                           
  4259                           ;LEDControl.c: 262: if( getValue == 0 )
  4260  00172E  501F               	movf	ledToggle@getValue,w,c
  4261  001730  1020               	iorwf	ledToggle@getValue+1,w,c
  4262  001732  A4D8               	btfss	status,2,c
  4263  001734  D004               	goto	l90
  4264                           
  4265                           ;LEDControl.c: 263: {
  4266                           ;LEDControl.c: 264: setValue = 1;
  4267  001736  0E00               	movlw	0
  4268  001738  6E1E               	movwf	ledToggle@setValue+1,c
  4269  00173A  0E01               	movlw	1
  4270  00173C  D003               	goto	L5
  4271  00173E                     l90:
  4272                           
  4273                           ;LEDControl.c: 266: else
  4274                           ;LEDControl.c: 267: {
  4275                           ;LEDControl.c: 268: setValue = 0;
  4276  00173E  0E00               	movlw	0
  4277  001740  6E1E               	movwf	ledToggle@setValue+1,c
  4278  001742  0E00               	movlw	0
  4279  001744                     L5:
  4280  001744  6E1D               	movwf	ledToggle@setValue,c
  4281                           
  4282                           ;LEDControl.c: 269: }
  4283                           ;LEDControl.c: 271: ledSet( ledNum, setValue );
  4284  001746  C019  F013         	movff	ledToggle@ledNum,ledSet@ledNum
  4285  00174A  C01A  F014         	movff	ledToggle@ledNum+1,ledSet@ledNum+1
  4286  00174E  C01D  F015         	movff	ledToggle@setValue,ledSet@setValue
  4287  001752  C01E  F016         	movff	ledToggle@setValue+1,ledSet@setValue+1
  4288  001756  EC81  F00D         	call	_ledSet	;wreg free
  4289  00175A  0012               	return	
  4290  00175C                     __end_of_ledToggle:
  4291                           	opt stack 0
  4292                           tblptru	equ	0xFF8
  4293                           prodh	equ	0xFF4
  4294                           prodl	equ	0xFF3
  4295                           intcon	equ	0xFF2
  4296                           intcon2	equ	0xFF1
  4297                           intcon3	equ	0xFF0
  4298                           postinc0	equ	0xFEE
  4299                           wreg	equ	0xFE8
  4300                           postinc1	equ	0xFE6
  4301                           fsr1h	equ	0xFE2
  4302                           fsr1l	equ	0xFE1
  4303                           indf2	equ	0xFDF
  4304                           postinc2	equ	0xFDE
  4305                           postdec2	equ	0xFDD
  4306                           fsr2h	equ	0xFDA
  4307                           fsr2l	equ	0xFD9
  4308                           status	equ	0xFD8
  4309                           
  4310 ;; *************** function _ledSet *****************
  4311 ;; Defined at:
  4312 ;;		line 82 in file "LEDControl.c"
  4313 ;; Parameters:    Size  Location     Type
  4314 ;;  ledNum          2   18[COMRAM] int 
  4315 ;;  setValue        2   20[COMRAM] int 
  4316 ;; Auto vars:     Size  Location     Type
  4317 ;;		None
  4318 ;; Return value:  Size  Location     Type
  4319 ;;                  1    wreg      void 
  4320 ;; Registers used:
  4321 ;;		wreg, status,2, status,0
  4322 ;; Tracked objects:
  4323 ;;		On entry : 0/0
  4324 ;;		On exit  : 0/0
  4325 ;;		Unchanged: 0/0
  4326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4327 ;;      Params:         4       0       0       0       0       0       0
  4328 ;;      Locals:         0       0       0       0       0       0       0
  4329 ;;      Temps:          2       0       0       0       0       0       0
  4330 ;;      Totals:         6       0       0       0       0       0       0
  4331 ;;Total ram usage:        6 bytes
  4332 ;; Hardware stack levels used:    1
  4333 ;; Hardware stack levels required when called:    1
  4334 ;; This function calls:
  4335 ;;		Nothing
  4336 ;; This function is called by:
  4337 ;;		_ledSetAll
  4338 ;;		_ledToggle
  4339 ;;		_ledSetOn
  4340 ;;		_ledSetOff
  4341 ;; This function uses a non-reentrant model
  4342 ;;
  4343                           
  4344                           	psect	text30
  4345  001B02                     __ptext30:
  4346                           	opt stack 0
  4347  001B02                     _ledSet:
  4348                           	opt stack 26
  4349                           
  4350                           ;LEDControl.c: 84: switch( ledNum )
  4351                           
  4352                           ;incstack = 0
  4353  001B02  D012               	goto	l22
  4354  001B04                     l23:
  4355                           
  4356                           ;LEDControl.c: 87: LATBbits.LATB4 = setValue;
  4357  001B04  B015               	btfsc	ledSet@setValue,0,c
  4358  001B06  D002               	bra	u1295
  4359  001B08  988A               	bcf	3978,4,c	;volatile
  4360  001B0A  D001               	bra	u1296
  4361  001B0C                     u1295:
  4362  001B0C  888A               	bsf	3978,4,c	;volatile
  4363  001B0E                     u1296:
  4364                           
  4365                           ;LEDControl.c: 88: break;
  4366  001B0E  0012               	return	
  4367  001B10                     l25:
  4368                           
  4369                           ;LEDControl.c: 90: LATCbits.LATC1 = setValue;
  4370  001B10  B015               	btfsc	ledSet@setValue,0,c
  4371  001B12  D002               	bra	u1305
  4372  001B14  928B               	bcf	3979,1,c	;volatile
  4373  001B16  D001               	bra	u1306
  4374  001B18                     u1305:
  4375  001B18  828B               	bsf	3979,1,c	;volatile
  4376  001B1A                     u1306:
  4377                           
  4378                           ;LEDControl.c: 91: break;
  4379  001B1A  0012               	return	
  4380  001B1C                     l26:
  4381                           
  4382                           ;LEDControl.c: 93: LATCbits.LATC0 = setValue;
  4383  001B1C  B015               	btfsc	ledSet@setValue,0,c
  4384  001B1E  D002               	bra	u1315
  4385  001B20  908B               	bcf	3979,0,c	;volatile
  4386  001B22  D001               	bra	u1316
  4387  001B24                     u1315:
  4388  001B24  808B               	bsf	3979,0,c	;volatile
  4389  001B26                     u1316:
  4390                           
  4391                           ;LEDControl.c: 95: }
  4392                           
  4393                           ;LEDControl.c: 94: break;
  4394  001B26  0012               	return	
  4395  001B28                     l22:
  4396  001B28  C013  F017         	movff	ledSet@ledNum,??_ledSet
  4397  001B2C  C014  F018         	movff	ledSet@ledNum+1,??_ledSet+1
  4398                           
  4399                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4400                           ; Switch size 1, requested type "space"
  4401                           ; Number of cases is 1, Range of values is 0 to 0
  4402                           ; switch strategies available:
  4403                           ; Name         Instructions Cycles
  4404                           ; simple_byte            4     3 (average)
  4405                           ;	Chosen strategy is simple_byte
  4406  001B30  5018               	movf	??_ledSet+1,w,c
  4407  001B32  0A00               	xorlw	0	; case 0
  4408  001B34  A4D8               	btfss	status,2,c
  4409  001B36  0012               	return	
  4410                           
  4411                           ; Switch size 1, requested type "space"
  4412                           ; Number of cases is 3, Range of values is 1 to 3
  4413                           ; switch strategies available:
  4414                           ; Name         Instructions Cycles
  4415                           ; simple_byte           10     6 (average)
  4416                           ;	Chosen strategy is simple_byte
  4417  001B38  5017               	movf	??_ledSet,w,c
  4418  001B3A  0A01               	xorlw	1	; case 1
  4419  001B3C  B4D8               	btfsc	status,2,c
  4420  001B3E  D7E2               	goto	l23
  4421  001B40  0A03               	xorlw	3	; case 2
  4422  001B42  B4D8               	btfsc	status,2,c
  4423  001B44  D7E5               	goto	l25
  4424  001B46  0A01               	xorlw	1	; case 3
  4425  001B48  A4D8               	btfss	status,2,c
  4426  001B4A  0012               	return	
  4427  001B4C  D7E7               	goto	l26
  4428  001B4E                     __end_of_ledSet:
  4429                           	opt stack 0
  4430                           tblptru	equ	0xFF8
  4431                           prodh	equ	0xFF4
  4432                           prodl	equ	0xFF3
  4433                           intcon	equ	0xFF2
  4434                           intcon2	equ	0xFF1
  4435                           intcon3	equ	0xFF0
  4436                           postinc0	equ	0xFEE
  4437                           wreg	equ	0xFE8
  4438                           postinc1	equ	0xFE6
  4439                           fsr1h	equ	0xFE2
  4440                           fsr1l	equ	0xFE1
  4441                           indf2	equ	0xFDF
  4442                           postinc2	equ	0xFDE
  4443                           postdec2	equ	0xFDD
  4444                           fsr2h	equ	0xFDA
  4445                           fsr2l	equ	0xFD9
  4446                           status	equ	0xFD8
  4447                           
  4448 ;; *************** function _com_command_setVersion *****************
  4449 ;; Defined at:
  4450 ;;		line 683 in file "SlaveComm.c"
  4451 ;; Parameters:    Size  Location     Type
  4452 ;;  send_buffer     2   56[COMRAM] PTR struct buffer
  4453 ;;		 -> communications@send_buffer(42), 
  4454 ;; Auto vars:     Size  Location     Type
  4455 ;;		None
  4456 ;; Return value:  Size  Location     Type
  4457 ;;                  1    wreg      void 
  4458 ;; Registers used:
  4459 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4460 ;; Tracked objects:
  4461 ;;		On entry : 0/0
  4462 ;;		On exit  : 0/0
  4463 ;;		Unchanged: 0/0
  4464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4465 ;;      Params:         2       0       0       0       0       0       0
  4466 ;;      Locals:         0       0       0       0       0       0       0
  4467 ;;      Temps:          0       0       0       0       0       0       0
  4468 ;;      Totals:         2       0       0       0       0       0       0
  4469 ;;Total ram usage:        2 bytes
  4470 ;; Hardware stack levels used:    1
  4471 ;; Hardware stack levels required when called:    6
  4472 ;; This function calls:
  4473 ;;		_command_builder3
  4474 ;; This function is called by:
  4475 ;;		_resetCommunications
  4476 ;; This function uses a non-reentrant model
  4477 ;;
  4478                           
  4479                           	psect	text31
  4480  001E4A                     __ptext31:
  4481                           	opt stack 0
  4482  001E4A                     _com_command_setVersion:
  4483                           	opt stack 21
  4484                           
  4485                           ;SlaveComm.c: 685: command_builder3( send_buffer, "Set", "PSVersion", "444" );
  4486                           
  4487                           ;incstack = 0
  4488  001E4A  C039  F02F         	movff	com_command_setVersion@send_buffer,command_builder3@send_buffer
  4489  001E4E  C03A  F030         	movff	com_command_setVersion@send_buffer+1,command_builder3@send_buffer+1
  4490  001E52  0E4E               	movlw	low STR_2
  4491  001E54  6E31               	movwf	command_builder3@data1,c
  4492  001E56  0E06               	movlw	high STR_2
  4493  001E58  6E32               	movwf	command_builder3@data1+1,c
  4494  001E5A  0E0D               	movlw	low STR_11
  4495  001E5C  6E33               	movwf	command_builder3@data2,c
  4496  001E5E  0E06               	movlw	high STR_11
  4497  001E60  6E34               	movwf	command_builder3@data2+1,c
  4498  001E62  0E46               	movlw	low STR_29
  4499  001E64  6E35               	movwf	command_builder3@data3,c
  4500  001E66  0E06               	movlw	high STR_29
  4501  001E68  6E36               	movwf	command_builder3@data3+1,c
  4502  001E6A  EC9D  F007         	call	_command_builder3	;wreg free
  4503  001E6E  0012               	return	
  4504  001E70                     __end_of_com_command_setVersion:
  4505                           	opt stack 0
  4506                           tblptru	equ	0xFF8
  4507                           prodh	equ	0xFF4
  4508                           prodl	equ	0xFF3
  4509                           intcon	equ	0xFF2
  4510                           intcon2	equ	0xFF1
  4511                           intcon3	equ	0xFF0
  4512                           postinc0	equ	0xFEE
  4513                           wreg	equ	0xFE8
  4514                           postinc1	equ	0xFE6
  4515                           fsr1h	equ	0xFE2
  4516                           fsr1l	equ	0xFE1
  4517                           indf2	equ	0xFDF
  4518                           postinc2	equ	0xFDE
  4519                           postdec2	equ	0xFDD
  4520                           fsr2h	equ	0xFDA
  4521                           fsr2l	equ	0xFD9
  4522                           status	equ	0xFD8
  4523                           
  4524 ;; *************** function _com_command_setPower *****************
  4525 ;; Defined at:
  4526 ;;		line 640 in file "SlaveComm.c"
  4527 ;; Parameters:    Size  Location     Type
  4528 ;;  send_buffer     2   56[COMRAM] PTR struct buffer
  4529 ;;		 -> communications@send_buffer(42), 
  4530 ;; Auto vars:     Size  Location     Type
  4531 ;;  temp           12   16[BANK0 ] unsigned char [12]
  4532 ;; Return value:  Size  Location     Type
  4533 ;;                  1    wreg      void 
  4534 ;; Registers used:
  4535 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4536 ;; Tracked objects:
  4537 ;;		On entry : 0/0
  4538 ;;		On exit  : 0/0
  4539 ;;		Unchanged: 0/0
  4540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4541 ;;      Params:         2       0       0       0       0       0       0
  4542 ;;      Locals:         0      12       0       0       0       0       0
  4543 ;;      Temps:          0       0       0       0       0       0       0
  4544 ;;      Totals:         2      12       0       0       0       0       0
  4545 ;;Total ram usage:       14 bytes
  4546 ;; Hardware stack levels used:    1
  4547 ;; Hardware stack levels required when called:    6
  4548 ;; This function calls:
  4549 ;;		_command_builder3
  4550 ;;		_ultoa
  4551 ;; This function is called by:
  4552 ;;		_resetCommunications
  4553 ;; This function uses a non-reentrant model
  4554 ;;
  4555                           
  4556                           	psect	text32
  4557  001B4E                     __ptext32:
  4558                           	opt stack 0
  4559  001B4E                     _com_command_setPower:
  4560                           	opt stack 21
  4561                           
  4562                           ;SlaveComm.c: 643: char temp[12];
  4563                           ;SlaveComm.c: 645: ultoa( temp, meterWatts_global, 10 );
  4564                           
  4565                           ;incstack = 0
  4566  001B4E  0EBE               	movlw	low com_command_setPower@temp
  4567  001B50  6E20               	movwf	ultoa@buf,c
  4568  001B52  0E00               	movlw	high com_command_setPower@temp
  4569  001B54  6E21               	movwf	ultoa@buf+1,c
  4570  001B56  C07C  F022         	movff	_meterWatts_global,ultoa@val
  4571  001B5A  C07D  F023         	movff	_meterWatts_global+1,ultoa@val+1
  4572  001B5E  C07E  F024         	movff	_meterWatts_global+2,ultoa@val+2
  4573  001B62  C07F  F025         	movff	_meterWatts_global+3,ultoa@val+3
  4574  001B66  0E00               	movlw	0
  4575  001B68  6E27               	movwf	ultoa@base+1,c
  4576  001B6A  0E0A               	movlw	10
  4577  001B6C  6E26               	movwf	ultoa@base,c
  4578  001B6E  EC30  F006         	call	_ultoa	;wreg free
  4579                           
  4580                           ;SlaveComm.c: 646: command_builder3( send_buffer, "Set", "Watts", temp );
  4581  001B72  C039  F02F         	movff	com_command_setPower@send_buffer,command_builder3@send_buffer
  4582  001B76  C03A  F030         	movff	com_command_setPower@send_buffer+1,command_builder3@send_buffer+1
  4583  001B7A  0E4E               	movlw	low STR_2
  4584  001B7C  6E31               	movwf	command_builder3@data1,c
  4585  001B7E  0E06               	movlw	high STR_2
  4586  001B80  6E32               	movwf	command_builder3@data1+1,c
  4587  001B82  0E24               	movlw	low STR_7
  4588  001B84  6E33               	movwf	command_builder3@data2,c
  4589  001B86  0E06               	movlw	high STR_7
  4590  001B88  6E34               	movwf	command_builder3@data2+1,c
  4591  001B8A  0EBE               	movlw	low com_command_setPower@temp
  4592  001B8C  6E35               	movwf	command_builder3@data3,c
  4593  001B8E  0E00               	movlw	high com_command_setPower@temp
  4594  001B90  6E36               	movwf	command_builder3@data3+1,c
  4595  001B92  EC9D  F007         	call	_command_builder3	;wreg free
  4596  001B96  0012               	return	
  4597  001B98                     __end_of_com_command_setPower:
  4598                           	opt stack 0
  4599                           tblptru	equ	0xFF8
  4600                           prodh	equ	0xFF4
  4601                           prodl	equ	0xFF3
  4602                           intcon	equ	0xFF2
  4603                           intcon2	equ	0xFF1
  4604                           intcon3	equ	0xFF0
  4605                           postinc0	equ	0xFEE
  4606                           wreg	equ	0xFE8
  4607                           postinc1	equ	0xFE6
  4608                           fsr1h	equ	0xFE2
  4609                           fsr1l	equ	0xFE1
  4610                           indf2	equ	0xFDF
  4611                           postinc2	equ	0xFDE
  4612                           postdec2	equ	0xFDD
  4613                           fsr2h	equ	0xFDA
  4614                           fsr2l	equ	0xFD9
  4615                           status	equ	0xFD8
  4616                           
  4617 ;; *************** function _receive_data *****************
  4618 ;; Defined at:
  4619 ;;		line 232 in file "SlaveComm.c"
  4620 ;; Parameters:    Size  Location     Type
  4621 ;;  receive_buff    2   21[COMRAM] PTR struct buffer
  4622 ;;		 -> communications@receive_buffer(42), 
  4623 ;; Auto vars:     Size  Location     Type
  4624 ;;  data            1   24[COMRAM] unsigned char 
  4625 ;; Return value:  Size  Location     Type
  4626 ;;                  1    wreg      enum E6797
  4627 ;; Registers used:
  4628 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4629 ;; Tracked objects:
  4630 ;;		On entry : 0/0
  4631 ;;		On exit  : 0/0
  4632 ;;		Unchanged: 0/0
  4633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4634 ;;      Params:         2       0       0       0       0       0       0
  4635 ;;      Locals:         1       0       0       0       0       0       0
  4636 ;;      Temps:          1       0       0       0       0       0       0
  4637 ;;      Totals:         4       0       0       0       0       0       0
  4638 ;;Total ram usage:        4 bytes
  4639 ;; Hardware stack levels used:    1
  4640 ;; Hardware stack levels required when called:    2
  4641 ;; This function calls:
  4642 ;;		_SPI_receive_data
  4643 ;; This function is called by:
  4644 ;;		_communications
  4645 ;; This function uses a non-reentrant model
  4646 ;;
  4647                           
  4648                           	psect	text33
  4649  000FFC                     __ptext33:
  4650                           	opt stack 0
  4651  000FFC                     _receive_data:
  4652                           	opt stack 26
  4653                           
  4654                           ;SlaveComm.c: 234: char data;
  4655                           ;SlaveComm.c: 236: static enum receive_status my_status = receive_waiting;
  4656                           ;SlaveComm.c: 238: if( my_status == receive_end_command )
  4657                           
  4658                           ;incstack = 0
  4659  000FFC  0E02               	movlw	2
  4660  000FFE  184B               	xorwf	receive_data@my_status,w,c
  4661  001000  A4D8               	btfss	status,2,c
  4662  001002  D002               	goto	l223
  4663                           
  4664                           ;SlaveComm.c: 239: {
  4665                           ;SlaveComm.c: 240: my_status = receive_waiting;
  4666  001004  0E00               	movlw	0
  4667  001006  6E4B               	movwf	receive_data@my_status,c
  4668  001008                     l223:
  4669                           
  4670                           ;SlaveComm.c: 241: }
  4671                           ;SlaveComm.c: 244: if( SPI_receive_data( &data ) == 1 )
  4672  001008  0E19               	movlw	low receive_data@data
  4673  00100A  6E13               	movwf	SPI_receive_data@data,c
  4674  00100C  0E00               	movlw	high receive_data@data
  4675  00100E  6E14               	movwf	SPI_receive_data@data+1,c
  4676  001010  ECFD  F00E         	call	_SPI_receive_data	;wreg free
  4677  001014  06E8               	decf	wreg,f,c
  4678  001016  A4D8               	btfss	status,2,c
  4679  001018  D04F               	goto	l228
  4680                           
  4681                           ;SlaveComm.c: 245: {
  4682                           ;SlaveComm.c: 246: if( (data == '!') && (my_status != receive_in_command) )
  4683  00101A  0E21               	movlw	33
  4684  00101C  1819               	xorwf	receive_data@data,w,c
  4685  00101E  A4D8               	btfss	status,2,c
  4686  001020  D015               	goto	l225
  4687  001022  044B               	decf	receive_data@my_status,w,c
  4688  001024  B4D8               	btfsc	status,2,c
  4689  001026  D012               	goto	l225
  4690                           
  4691                           ;SlaveComm.c: 247: {
  4692                           ;SlaveComm.c: 248: my_status = receive_in_command;
  4693  001028  0E01               	movlw	1
  4694  00102A  6E4B               	movwf	receive_data@my_status,c
  4695                           
  4696                           ;SlaveComm.c: 249: receive_buffer->read_position = 0;
  4697  00102C  EE20 F029          	lfsr	2,41
  4698  001030  5016               	movf	receive_data@receive_buffer,w,c
  4699  001032  26D9               	addwf	fsr2l,f,c
  4700  001034  5017               	movf	receive_data@receive_buffer+1,w,c
  4701  001036  22DA               	addwfc	fsr2h,f,c
  4702  001038  0E00               	movlw	0
  4703  00103A  6EDF               	movwf	indf2,c
  4704                           
  4705                           ;SlaveComm.c: 250: receive_buffer->write_position = 0;
  4706  00103C  EE20 F028          	lfsr	2,40
  4707  001040  5016               	movf	receive_data@receive_buffer,w,c
  4708  001042  26D9               	addwf	fsr2l,f,c
  4709  001044  5017               	movf	receive_data@receive_buffer+1,w,c
  4710  001046  22DA               	addwfc	fsr2h,f,c
  4711  001048  0E00               	movlw	0
  4712  00104A  6EDF               	movwf	indf2,c
  4713  00104C                     l225:
  4714                           
  4715                           ;SlaveComm.c: 251: }
  4716                           ;SlaveComm.c: 253: if( my_status == receive_in_command )
  4717  00104C  044B               	decf	receive_data@my_status,w,c
  4718  00104E  A4D8               	btfss	status,2,c
  4719  001050  D02A               	goto	l227
  4720                           
  4721                           ;SlaveComm.c: 254: {
  4722                           ;SlaveComm.c: 255: receive_buffer->data_buffer[ receive_buffer->write_position] = data;
  4723  001052  EE20 F028          	lfsr	2,40
  4724  001056  5016               	movf	receive_data@receive_buffer,w,c
  4725  001058  26D9               	addwf	fsr2l,f,c
  4726  00105A  5017               	movf	receive_data@receive_buffer+1,w,c
  4727  00105C  22DA               	addwfc	fsr2h,f,c
  4728  00105E  50DF               	movf	indf2,w,c
  4729  001060  6E18               	movwf	??_receive_data& (0+255),c
  4730  001062  5018               	movf	??_receive_data,w,c
  4731  001064  0D01               	mullw	1
  4732  001066  50F3               	movf	prodl,w,c
  4733  001068  2416               	addwf	receive_data@receive_buffer,w,c
  4734  00106A  6ED9               	movwf	fsr2l,c
  4735  00106C  50F4               	movf	prodh,w,c
  4736  00106E  2017               	addwfc	receive_data@receive_buffer+1,w,c
  4737  001070  6EDA               	movwf	fsr2h,c
  4738  001072  C019  FFDF         	movff	receive_data@data,indf2
  4739                           
  4740                           ;SlaveComm.c: 257: receive_buffer->write_position++;
  4741  001076  EE20 F028          	lfsr	2,40
  4742  00107A  5016               	movf	receive_data@receive_buffer,w,c
  4743  00107C  26D9               	addwf	fsr2l,f,c
  4744  00107E  5017               	movf	receive_data@receive_buffer+1,w,c
  4745  001080  22DA               	addwfc	fsr2h,f,c
  4746  001082  2ADF               	incf	indf2,f,c
  4747                           
  4748                           ;SlaveComm.c: 258: if( receive_buffer->write_position >= 40 )
  4749  001084  EE20 F028          	lfsr	2,40
  4750  001088  5016               	movf	receive_data@receive_buffer,w,c
  4751  00108A  26D9               	addwf	fsr2l,f,c
  4752  00108C  5017               	movf	receive_data@receive_buffer+1,w,c
  4753  00108E  22DA               	addwfc	fsr2h,f,c
  4754  001090  0E27               	movlw	39
  4755  001092  64DF               	cpfsgt	indf2,c
  4756  001094  D008               	goto	l227
  4757                           
  4758                           ;SlaveComm.c: 259: {
  4759                           ;SlaveComm.c: 260: receive_buffer->write_position = (40 - 1);
  4760  001096  EE20 F028          	lfsr	2,40
  4761  00109A  5016               	movf	receive_data@receive_buffer,w,c
  4762  00109C  26D9               	addwf	fsr2l,f,c
  4763  00109E  5017               	movf	receive_data@receive_buffer+1,w,c
  4764  0010A0  22DA               	addwfc	fsr2h,f,c
  4765  0010A2  0E27               	movlw	39
  4766  0010A4  6EDF               	movwf	indf2,c
  4767  0010A6                     l227:
  4768                           
  4769                           ;SlaveComm.c: 261: }
  4770                           ;SlaveComm.c: 262: }
  4771                           ;SlaveComm.c: 264: if( (my_status == receive_in_command) && (data == '*') )
  4772  0010A6  044B               	decf	receive_data@my_status,w,c
  4773  0010A8  A4D8               	btfss	status,2,c
  4774  0010AA  D006               	goto	l228
  4775  0010AC  0E2A               	movlw	42
  4776  0010AE  1819               	xorwf	receive_data@data,w,c
  4777  0010B0  A4D8               	btfss	status,2,c
  4778  0010B2  D002               	goto	l228
  4779                           
  4780                           ;SlaveComm.c: 265: {
  4781                           ;SlaveComm.c: 266: my_status = receive_end_command;
  4782  0010B4  0E02               	movlw	2
  4783  0010B6  6E4B               	movwf	receive_data@my_status,c
  4784  0010B8                     l228:
  4785                           
  4786                           ;SlaveComm.c: 267: }
  4787                           ;SlaveComm.c: 268: }
  4788                           ;SlaveComm.c: 270: return my_status;
  4789  0010B8  504B               	movf	receive_data@my_status,w,c
  4790  0010BA  0012               	return	
  4791  0010BC                     __end_of_receive_data:
  4792                           	opt stack 0
  4793                           tblptru	equ	0xFF8
  4794                           prodh	equ	0xFF4
  4795                           prodl	equ	0xFF3
  4796                           intcon	equ	0xFF2
  4797                           intcon2	equ	0xFF1
  4798                           intcon3	equ	0xFF0
  4799                           postinc0	equ	0xFEE
  4800                           wreg	equ	0xFE8
  4801                           postinc1	equ	0xFE6
  4802                           fsr1h	equ	0xFE2
  4803                           fsr1l	equ	0xFE1
  4804                           indf2	equ	0xFDF
  4805                           postinc2	equ	0xFDE
  4806                           postdec2	equ	0xFDD
  4807                           fsr2h	equ	0xFDA
  4808                           fsr2l	equ	0xFD9
  4809                           status	equ	0xFD8
  4810                           
  4811 ;; *************** function _SPI_receive_data *****************
  4812 ;; Defined at:
  4813 ;;		line 584 in file "SlaveComm.c"
  4814 ;; Parameters:    Size  Location     Type
  4815 ;;  data            2   18[COMRAM] PTR unsigned char 
  4816 ;;		 -> receive_data@data(1), 
  4817 ;; Auto vars:     Size  Location     Type
  4818 ;;  recvGood        1   20[COMRAM] unsigned char 
  4819 ;; Return value:  Size  Location     Type
  4820 ;;                  1    wreg      unsigned char 
  4821 ;; Registers used:
  4822 ;;		wreg, fsr2l, fsr2h, status,2
  4823 ;; Tracked objects:
  4824 ;;		On entry : 0/0
  4825 ;;		On exit  : 0/0
  4826 ;;		Unchanged: 0/0
  4827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4828 ;;      Params:         2       0       0       0       0       0       0
  4829 ;;      Locals:         1       0       0       0       0       0       0
  4830 ;;      Temps:          0       0       0       0       0       0       0
  4831 ;;      Totals:         3       0       0       0       0       0       0
  4832 ;;Total ram usage:        3 bytes
  4833 ;; Hardware stack levels used:    1
  4834 ;; Hardware stack levels required when called:    1
  4835 ;; This function calls:
  4836 ;;		Nothing
  4837 ;; This function is called by:
  4838 ;;		_receive_data
  4839 ;; This function uses a non-reentrant model
  4840 ;;
  4841                           
  4842                           	psect	text34
  4843  001DFA                     __ptext34:
  4844                           	opt stack 0
  4845  001DFA                     _SPI_receive_data:
  4846                           	opt stack 26
  4847                           
  4848                           ;SlaveComm.c: 587: bool recvGood = 0;
  4849                           
  4850                           ;incstack = 0
  4851  001DFA  0E00               	movlw	0
  4852  001DFC  6E15               	movwf	SPI_receive_data@recvGood,c
  4853                           
  4854                           ;SlaveComm.c: 589: if( SSP2STATbits.BF == 1 )
  4855  001DFE  A06D               	btfss	3949,0,c	;volatile
  4856  001E00  D00C               	goto	l325
  4857                           
  4858                           ;SlaveComm.c: 590: {
  4859                           ;SlaveComm.c: 591: *data = SSP2BUF;
  4860  001E02  C013  FFD9         	movff	SPI_receive_data@data,fsr2l
  4861  001E06  C014  FFDA         	movff	SPI_receive_data@data+1,fsr2h
  4862  001E0A  CF6F FFDF          	movff	3951,indf2	;volatile
  4863                           
  4864                           ;SlaveComm.c: 592: recvGood = 1;
  4865  001E0E  0E01               	movlw	1
  4866  001E10  6E15               	movwf	SPI_receive_data@recvGood,c
  4867                           
  4868                           ;SlaveComm.c: 593: SSP2CON1bits.WCOL = 0;
  4869  001E12  9E6C               	bcf	3948,7,c	;volatile
  4870                           
  4871                           ;SlaveComm.c: 594: SPI_transmit_wait = 0;
  4872  001E14  0E00               	movlw	0
  4873  001E16  6E4C               	movwf	_SPI_transmit_wait,c
  4874                           
  4875                           ;SlaveComm.c: 595: }
  4876  001E18  D002               	goto	l326
  4877  001E1A                     l325:
  4878                           
  4879                           ;SlaveComm.c: 596: else
  4880                           ;SlaveComm.c: 597: {
  4881                           ;SlaveComm.c: 598: recvGood = 0;
  4882  001E1A  0E00               	movlw	0
  4883  001E1C  6E15               	movwf	SPI_receive_data@recvGood,c
  4884  001E1E                     l326:
  4885                           
  4886                           ;SlaveComm.c: 599: }
  4887                           ;SlaveComm.c: 601: return recvGood;
  4888  001E1E  5015               	movf	SPI_receive_data@recvGood,w,c
  4889  001E20  0012               	return	
  4890  001E22                     __end_of_SPI_receive_data:
  4891                           	opt stack 0
  4892                           tblptru	equ	0xFF8
  4893                           prodh	equ	0xFF4
  4894                           prodl	equ	0xFF3
  4895                           intcon	equ	0xFF2
  4896                           intcon2	equ	0xFF1
  4897                           intcon3	equ	0xFF0
  4898                           postinc0	equ	0xFEE
  4899                           wreg	equ	0xFE8
  4900                           postinc1	equ	0xFE6
  4901                           fsr1h	equ	0xFE2
  4902                           fsr1l	equ	0xFE1
  4903                           indf2	equ	0xFDF
  4904                           postinc2	equ	0xFDE
  4905                           postdec2	equ	0xFDD
  4906                           fsr2h	equ	0xFDA
  4907                           fsr2l	equ	0xFD9
  4908                           status	equ	0xFD8
  4909                           
  4910 ;; *************** function _process_data *****************
  4911 ;; Defined at:
  4912 ;;		line 273 in file "SlaveComm.c"
  4913 ;; Parameters:    Size  Location     Type
  4914 ;;  receive_buff    2   32[BANK0 ] PTR struct buffer
  4915 ;;		 -> communications@receive_buffer(42), 
  4916 ;;  send_buffer     2   34[BANK0 ] PTR struct buffer
  4917 ;;		 -> communications@send_buffer(42), 
  4918 ;; Auto vars:     Size  Location     Type
  4919 ;;  parameters     50    0[BANK1 ] unsigned char [10][5]
  4920 ;;  end_of_trans    1   50[BANK1 ] unsigned char 
  4921 ;; Return value:  Size  Location     Type
  4922 ;;                  1    wreg      unsigned char 
  4923 ;; Registers used:
  4924 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4925 ;; Tracked objects:
  4926 ;;		On entry : 0/0
  4927 ;;		On exit  : 0/0
  4928 ;;		Unchanged: 0/0
  4929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4930 ;;      Params:         0       4       0       0       0       0       0
  4931 ;;      Locals:         0       0      51       0       0       0       0
  4932 ;;      Temps:          0       0       0       0       0       0       0
  4933 ;;      Totals:         0       4      51       0       0       0       0
  4934 ;;Total ram usage:       55 bytes
  4935 ;; Hardware stack levels used:    1
  4936 ;; Hardware stack levels required when called:    8
  4937 ;; This function calls:
  4938 ;;		_process_data_parameterize
  4939 ;;		_process_data_parameters
  4940 ;; This function is called by:
  4941 ;;		_communications
  4942 ;; This function uses a non-reentrant model
  4943 ;;
  4944                           
  4945                           	psect	text35
  4946  001D6E                     __ptext35:
  4947                           	opt stack 0
  4948  001D6E                     _process_data:
  4949                           	opt stack 20
  4950                           
  4951                           ;SlaveComm.c: 275: bool end_of_transmission_received;
  4952                           ;SlaveComm.c: 280: char parameters[5][10];
  4953                           ;SlaveComm.c: 282: process_data_parameterize( parameters, receive_buffer );
  4954                           
  4955                           ;incstack = 0
  4956  001D6E  0E00               	movlw	low process_data@parameters
  4957  001D70  6E19               	movwf	process_data_parameterize@parameters,c
  4958  001D72  0E01               	movlw	high process_data@parameters
  4959  001D74  6E1A               	movwf	process_data_parameterize@parameters+1,c
  4960  001D76  C0CE  F01B         	movff	process_data@receive_buffer,process_data_parameterize@buffer_to_parameterize
  4961  001D7A  C0CF  F01C         	movff	process_data@receive_buffer+1,process_data_parameterize@buffer_to_parameterize+1
  4962  001D7E  ECDA  F004         	call	_process_data_parameterize	;wreg free
  4963                           
  4964                           ;SlaveComm.c: 284: end_of_transmission_received = process_data_parameters( parameters, s
      +                          end_buffer );
  4965  001D82  0E00               	movlw	low process_data@parameters
  4966  001D84  0100               	movlb	0	; () banked
  4967  001D86  6FCA               	movwf	process_data_parameters@parameters& (0+255),b
  4968  001D88  0E01               	movlw	high process_data@parameters
  4969  001D8A  6FCB               	movwf	(process_data_parameters@parameters+1)& (0+255),b
  4970  001D8C  C0D0  F0CC         	movff	process_data@send_buffer,process_data_parameters@send_buffer
  4971  001D90  C0D1  F0CD         	movff	process_data@send_buffer+1,process_data_parameters@send_buffer+1
  4972  001D94  EC2A  F003         	call	_process_data_parameters	;wreg free
  4973  001D98  0101               	movlb	1	; () banked
  4974  001D9A  6F32               	movwf	process_data@end_of_transmission_received& (0+255),b
  4975                           
  4976                           ; BSR set to: 1
  4977                           ;SlaveComm.c: 286: return end_of_transmission_received;
  4978  001D9C  5132               	movf	process_data@end_of_transmission_received& (0+255),w,b
  4979  001D9E  0012               	return	
  4980  001DA0                     __end_of_process_data:
  4981                           	opt stack 0
  4982                           tblptru	equ	0xFF8
  4983                           prodh	equ	0xFF4
  4984                           prodl	equ	0xFF3
  4985                           intcon	equ	0xFF2
  4986                           intcon2	equ	0xFF1
  4987                           intcon3	equ	0xFF0
  4988                           postinc0	equ	0xFEE
  4989                           wreg	equ	0xFE8
  4990                           postinc1	equ	0xFE6
  4991                           fsr1h	equ	0xFE2
  4992                           fsr1l	equ	0xFE1
  4993                           indf2	equ	0xFDF
  4994                           postinc2	equ	0xFDE
  4995                           postdec2	equ	0xFDD
  4996                           fsr2h	equ	0xFDA
  4997                           fsr2l	equ	0xFD9
  4998                           status	equ	0xFD8
  4999                           
  5000 ;; *************** function _process_data_parameters *****************
  5001 ;; Defined at:
  5002 ;;		line 349 in file "SlaveComm.c"
  5003 ;; Parameters:    Size  Location     Type
  5004 ;;  parameters      2   28[BANK0 ] PTR unsigned char [10]
  5005 ;;		 -> process_data@parameters(50), 
  5006 ;;  send_buffer     2   30[BANK0 ] PTR struct buffer
  5007 ;;		 -> communications@send_buffer(42), 
  5008 ;; Auto vars:     Size  Location     Type
  5009 ;;  end_of_trans    1   58[COMRAM] unsigned char 
  5010 ;; Return value:  Size  Location     Type
  5011 ;;                  1    wreg      unsigned char 
  5012 ;; Registers used:
  5013 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5014 ;; Tracked objects:
  5015 ;;		On entry : 0/0
  5016 ;;		On exit  : 0/0
  5017 ;;		Unchanged: 0/0
  5018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5019 ;;      Params:         0       4       0       0       0       0       0
  5020 ;;      Locals:         1       0       0       0       0       0       0
  5021 ;;      Temps:          0       0       0       0       0       0       0
  5022 ;;      Totals:         1       4       0       0       0       0       0
  5023 ;;Total ram usage:        5 bytes
  5024 ;; Hardware stack levels used:    1
  5025 ;; Hardware stack levels required when called:    7
  5026 ;; This function calls:
  5027 ;;		_atol
  5028 ;;		_com_command_setEnergyUsed
  5029 ;;		_send_end_of_transmission
  5030 ;;		_strmatch
  5031 ;; This function is called by:
  5032 ;;		_process_data
  5033 ;; This function uses a non-reentrant model
  5034 ;;
  5035                           
  5036                           	psect	text36
  5037  000654                     __ptext36:
  5038                           	opt stack 0
  5039  000654                     _process_data_parameters:
  5040                           	opt stack 20
  5041                           
  5042                           ;SlaveComm.c: 351: bool end_of_transmission_received = 0;
  5043                           
  5044                           ; BSR set to: 1
  5045                           ;incstack = 0
  5046  000654  0E00               	movlw	0
  5047  000656  6E3B               	movwf	process_data_parameters@end_of_transmission_received,c
  5048                           
  5049                           ;SlaveComm.c: 354: if( strmatch( parameters[0], "END" ) == 1 )
  5050  000658  C0CA  F01E         	movff	process_data_parameters@parameters,strmatch@a
  5051  00065C  C0CB  F01F         	movff	process_data_parameters@parameters+1,strmatch@a+1
  5052  000660  0E4A               	movlw	low STR_1
  5053  000662  6E20               	movwf	strmatch@b,c
  5054  000664  0E06               	movlw	high STR_1
  5055  000666  6E21               	movwf	strmatch@b+1,c
  5056  000668  ECD0  F00E         	call	_strmatch	;wreg free
  5057  00066C  06E8               	decf	wreg,f,c
  5058  00066E  A4D8               	btfss	status,2,c
  5059  000670  D003               	goto	l252
  5060                           
  5061                           ;SlaveComm.c: 355: {
  5062                           ;SlaveComm.c: 356: end_of_transmission_received = 1;
  5063  000672  0E01               	movlw	1
  5064  000674  6E3B               	movwf	process_data_parameters@end_of_transmission_received,c
  5065                           
  5066                           ;SlaveComm.c: 357: }
  5067  000676  D0D1               	goto	l270
  5068  000678                     l252:
  5069                           
  5070                           ;SlaveComm.c: 358: else if( strmatch( parameters[0], "Set" ) == 1 )
  5071  000678  C0CA  F01E         	movff	process_data_parameters@parameters,strmatch@a
  5072  00067C  C0CB  F01F         	movff	process_data_parameters@parameters+1,strmatch@a+1
  5073  000680  0E4E               	movlw	low STR_2
  5074  000682  6E20               	movwf	strmatch@b,c
  5075  000684  0E06               	movlw	high STR_2
  5076  000686  6E21               	movwf	strmatch@b+1,c
  5077  000688  ECD0  F00E         	call	_strmatch	;wreg free
  5078  00068C  06E8               	decf	wreg,f,c
  5079  00068E  A4D8               	btfss	status,2,c
  5080  000690  D038               	goto	l254
  5081                           
  5082                           ;SlaveComm.c: 359: {
  5083                           ;SlaveComm.c: 360: if( strmatch( parameters[1], "Calibration" ) == 1 )
  5084  000692  0E0A               	movlw	10
  5085  000694  0100               	movlb	0	; () banked
  5086  000696  25CA               	addwf	process_data_parameters@parameters& (0+255),w,b
  5087  000698  6E1E               	movwf	strmatch@a,c
  5088  00069A  0E00               	movlw	0
  5089  00069C  21CB               	addwfc	(process_data_parameters@parameters+1)& (0+255),w,b
  5090  00069E  6E1F               	movwf	strmatch@a+1,c
  5091  0006A0  0E01               	movlw	low STR_3
  5092  0006A2  6E20               	movwf	strmatch@b,c
  5093  0006A4  0E06               	movlw	high STR_3
  5094  0006A6  6E21               	movwf	strmatch@b+1,c
  5095  0006A8  ECD0  F00E         	call	_strmatch	;wreg free
  5096  0006AC  06E8               	decf	wreg,f,c
  5097  0006AE  B4D8               	btfsc	status,2,c
  5098  0006B0  D0B4               	goto	l270
  5099                           
  5100                           ;SlaveComm.c: 364: else if( strmatch( parameters[1], "EnUsed" ) == 1 )
  5101                           
  5102                           ;SlaveComm.c: 361: {
  5103                           ;SlaveComm.c: 363: }
  5104  0006B2  0E0A               	movlw	10
  5105  0006B4  0100               	movlb	0	; () banked
  5106  0006B6  25CA               	addwf	process_data_parameters@parameters& (0+255),w,b
  5107  0006B8  6E1E               	movwf	strmatch@a,c
  5108  0006BA  0E00               	movlw	0
  5109  0006BC  21CB               	addwfc	(process_data_parameters@parameters+1)& (0+255),w,b
  5110  0006BE  6E1F               	movwf	strmatch@a+1,c
  5111  0006C0  0E17               	movlw	low STR_4
  5112  0006C2  6E20               	movwf	strmatch@b,c
  5113  0006C4  0E06               	movlw	high STR_4
  5114  0006C6  6E21               	movwf	strmatch@b+1,c
  5115  0006C8  ECD0  F00E         	call	_strmatch	;wreg free
  5116  0006CC  06E8               	decf	wreg,f,c
  5117  0006CE  A4D8               	btfss	status,2,c
  5118  0006D0  D0A4               	goto	l270
  5119                           
  5120                           ;SlaveComm.c: 365: {
  5121                           ;SlaveComm.c: 370: meterEnergyUsed_global = atol( parameters[2] );
  5122  0006D2  0E14               	movlw	20
  5123  0006D4  0100               	movlb	0	; () banked
  5124  0006D6  25CA               	addwf	process_data_parameters@parameters& (0+255),w,b
  5125  0006D8  6E1F               	movwf	atol@s,c
  5126  0006DA  0E00               	movlw	0
  5127  0006DC  21CB               	addwfc	(process_data_parameters@parameters+1)& (0+255),w,b
  5128  0006DE  6E20               	movwf	atol@s+1,c
  5129  0006E0  ECAB  F006         	call	_atol	;wreg free
  5130  0006E4  C01F  F03D         	movff	?_atol,_meterEnergyUsed_global
  5131  0006E8  C020  F03E         	movff	?_atol+1,_meterEnergyUsed_global+1
  5132  0006EC  C021  F03F         	movff	?_atol+2,_meterEnergyUsed_global+2
  5133  0006F0  C022  F040         	movff	?_atol+3,_meterEnergyUsed_global+3
  5134                           
  5135                           ;SlaveComm.c: 371: com_command_setEnergyUsed( send_buffer );
  5136  0006F4  C0CC  F039         	movff	process_data_parameters@send_buffer,com_command_setEnergyUsed@send_buffer
  5137  0006F8  C0CD  F03A         	movff	process_data_parameters@send_buffer+1,com_command_setEnergyUsed@send_buffer+1
  5138  0006FC  ECCC  F00D         	call	_com_command_setEnergyUsed	;wreg free
  5139                           
  5140                           ;SlaveComm.c: 372: }
  5141                           ;SlaveComm.c: 373: }
  5142  000700  D08C               	goto	l270
  5143  000702                     l254:
  5144                           
  5145                           ;SlaveComm.c: 374: else if( strmatch( parameters[0], "Read" ) == 1 )
  5146  000702  C0CA  F01E         	movff	process_data_parameters@parameters,strmatch@a
  5147  000706  C0CB  F01F         	movff	process_data_parameters@parameters+1,strmatch@a+1
  5148  00070A  0E2F               	movlw	low STR_5
  5149  00070C  6E20               	movwf	strmatch@b,c
  5150  00070E  0E06               	movlw	high STR_5
  5151  000710  6E21               	movwf	strmatch@b+1,c
  5152  000712  ECD0  F00E         	call	_strmatch	;wreg free
  5153  000716  06E8               	decf	wreg,f,c
  5154  000718  B4D8               	btfsc	status,2,c
  5155  00071A  D07F               	goto	l270
  5156                           
  5157                           ;SlaveComm.c: 379: else if( strmatch( parameters[0], "Conf" ) == 1 )
  5158                           
  5159                           ;SlaveComm.c: 375: {
  5160                           ;SlaveComm.c: 378: }
  5161  00071C  C0CA  F01E         	movff	process_data_parameters@parameters,strmatch@a
  5162  000720  C0CB  F01F         	movff	process_data_parameters@parameters+1,strmatch@a+1
  5163  000724  0E34               	movlw	low STR_6
  5164  000726  6E20               	movwf	strmatch@b,c
  5165  000728  0E06               	movlw	high STR_6
  5166  00072A  6E21               	movwf	strmatch@b+1,c
  5167  00072C  ECD0  F00E         	call	_strmatch	;wreg free
  5168  000730  06E8               	decf	wreg,f,c
  5169  000732  A4D8               	btfss	status,2,c
  5170  000734  D072               	goto	l270
  5171                           
  5172                           ;SlaveComm.c: 380: {
  5173                           ;SlaveComm.c: 382: if( strmatch( parameters[1], "Watts" ) == 1 )
  5174  000736  0E0A               	movlw	10
  5175  000738  0100               	movlb	0	; () banked
  5176  00073A  25CA               	addwf	process_data_parameters@parameters& (0+255),w,b
  5177  00073C  6E1E               	movwf	strmatch@a,c
  5178  00073E  0E00               	movlw	0
  5179  000740  21CB               	addwfc	(process_data_parameters@parameters+1)& (0+255),w,b
  5180  000742  6E1F               	movwf	strmatch@a+1,c
  5181  000744  0E24               	movlw	low STR_7
  5182  000746  6E20               	movwf	strmatch@b,c
  5183  000748  0E06               	movlw	high STR_7
  5184  00074A  6E21               	movwf	strmatch@b+1,c
  5185  00074C  ECD0  F00E         	call	_strmatch	;wreg free
  5186  000750  06E8               	decf	wreg,f,c
  5187  000752  A4D8               	btfss	status,2,c
  5188  000754  D007               	goto	l262
  5189                           
  5190                           ;SlaveComm.c: 383: {
  5191                           ;SlaveComm.c: 384: send_end_of_transmission( send_buffer );
  5192  000756  C0CC  F035         	movff	process_data_parameters@send_buffer,send_end_of_transmission@send_buffer
  5193  00075A  C0CD  F036         	movff	process_data_parameters@send_buffer+1,send_end_of_transmission@send_buffer+1
  5194  00075E  ECA1  F00F         	call	_send_end_of_transmission	;wreg free
  5195                           
  5196                           ;SlaveComm.c: 385: }
  5197  000762  D05B               	goto	l270
  5198  000764                     l262:
  5199                           
  5200                           ;SlaveComm.c: 386: else if( strmatch( parameters[1], "EnUsed" ) == 1 )
  5201  000764  0E0A               	movlw	10
  5202  000766  0100               	movlb	0	; () banked
  5203  000768  25CA               	addwf	process_data_parameters@parameters& (0+255),w,b
  5204  00076A  6E1E               	movwf	strmatch@a,c
  5205  00076C  0E00               	movlw	0
  5206  00076E  21CB               	addwfc	(process_data_parameters@parameters+1)& (0+255),w,b
  5207  000770  6E1F               	movwf	strmatch@a+1,c
  5208  000772  0E17               	movlw	low STR_4
  5209  000774  6E20               	movwf	strmatch@b,c
  5210  000776  0E06               	movlw	high STR_4
  5211  000778  6E21               	movwf	strmatch@b+1,c
  5212  00077A  ECD0  F00E         	call	_strmatch	;wreg free
  5213  00077E  06E8               	decf	wreg,f,c
  5214  000780  A4D8               	btfss	status,2,c
  5215  000782  D007               	goto	l264
  5216                           
  5217                           ;SlaveComm.c: 387: {
  5218                           ;SlaveComm.c: 388: send_end_of_transmission( send_buffer );
  5219  000784  C0CC  F035         	movff	process_data_parameters@send_buffer,send_end_of_transmission@send_buffer
  5220  000788  C0CD  F036         	movff	process_data_parameters@send_buffer+1,send_end_of_transmission@send_buffer+1
  5221  00078C  ECA1  F00F         	call	_send_end_of_transmission	;wreg free
  5222                           
  5223                           ;SlaveComm.c: 389: }
  5224  000790  D044               	goto	l270
  5225  000792                     l264:
  5226                           
  5227                           ;SlaveComm.c: 390: else if( strmatch( parameters[1], "Volts" ) == 1 )
  5228  000792  0E0A               	movlw	10
  5229  000794  0100               	movlb	0	; () banked
  5230  000796  25CA               	addwf	process_data_parameters@parameters& (0+255),w,b
  5231  000798  6E1E               	movwf	strmatch@a,c
  5232  00079A  0E00               	movlw	0
  5233  00079C  21CB               	addwfc	(process_data_parameters@parameters+1)& (0+255),w,b
  5234  00079E  6E1F               	movwf	strmatch@a+1,c
  5235  0007A0  0E1E               	movlw	low STR_9
  5236  0007A2  6E20               	movwf	strmatch@b,c
  5237  0007A4  0E06               	movlw	high STR_9
  5238  0007A6  6E21               	movwf	strmatch@b+1,c
  5239  0007A8  ECD0  F00E         	call	_strmatch	;wreg free
  5240  0007AC  06E8               	decf	wreg,f,c
  5241  0007AE  A4D8               	btfss	status,2,c
  5242  0007B0  D007               	goto	l266
  5243                           
  5244                           ;SlaveComm.c: 391: {
  5245                           ;SlaveComm.c: 392: send_end_of_transmission( send_buffer );
  5246  0007B2  C0CC  F035         	movff	process_data_parameters@send_buffer,send_end_of_transmission@send_buffer
  5247  0007B6  C0CD  F036         	movff	process_data_parameters@send_buffer+1,send_end_of_transmission@send_buffer+1
  5248  0007BA  ECA1  F00F         	call	_send_end_of_transmission	;wreg free
  5249                           
  5250                           ;SlaveComm.c: 393: }
  5251  0007BE  D02D               	goto	l270
  5252  0007C0                     l266:
  5253                           
  5254                           ;SlaveComm.c: 394: else if( strmatch( parameters[1], "Amps" ) == 1 )
  5255  0007C0  0E0A               	movlw	10
  5256  0007C2  0100               	movlb	0	; () banked
  5257  0007C4  25CA               	addwf	process_data_parameters@parameters& (0+255),w,b
  5258  0007C6  6E1E               	movwf	strmatch@a,c
  5259  0007C8  0E00               	movlw	0
  5260  0007CA  21CB               	addwfc	(process_data_parameters@parameters+1)& (0+255),w,b
  5261  0007CC  6E1F               	movwf	strmatch@a+1,c
  5262  0007CE  0E39               	movlw	low STR_10
  5263  0007D0  6E20               	movwf	strmatch@b,c
  5264  0007D2  0E06               	movlw	high STR_10
  5265  0007D4  6E21               	movwf	strmatch@b+1,c
  5266  0007D6  ECD0  F00E         	call	_strmatch	;wreg free
  5267  0007DA  06E8               	decf	wreg,f,c
  5268  0007DC  A4D8               	btfss	status,2,c
  5269  0007DE  D007               	goto	l268
  5270                           
  5271                           ;SlaveComm.c: 395: {
  5272                           ;SlaveComm.c: 396: send_end_of_transmission( send_buffer );
  5273  0007E0  C0CC  F035         	movff	process_data_parameters@send_buffer,send_end_of_transmission@send_buffer
  5274  0007E4  C0CD  F036         	movff	process_data_parameters@send_buffer+1,send_end_of_transmission@send_buffer+1
  5275  0007E8  ECA1  F00F         	call	_send_end_of_transmission	;wreg free
  5276                           
  5277                           ;SlaveComm.c: 397: }
  5278  0007EC  D016               	goto	l270
  5279  0007EE                     l268:
  5280                           
  5281                           ;SlaveComm.c: 398: else if( strmatch( parameters[1], "PSVersion" ) == 1 )
  5282  0007EE  0E0A               	movlw	10
  5283  0007F0  0100               	movlb	0	; () banked
  5284  0007F2  25CA               	addwf	process_data_parameters@parameters& (0+255),w,b
  5285  0007F4  6E1E               	movwf	strmatch@a,c
  5286  0007F6  0E00               	movlw	0
  5287  0007F8  21CB               	addwfc	(process_data_parameters@parameters+1)& (0+255),w,b
  5288  0007FA  6E1F               	movwf	strmatch@a+1,c
  5289  0007FC  0E0D               	movlw	low STR_11
  5290  0007FE  6E20               	movwf	strmatch@b,c
  5291  000800  0E06               	movlw	high STR_11
  5292  000802  6E21               	movwf	strmatch@b+1,c
  5293  000804  ECD0  F00E         	call	_strmatch	;wreg free
  5294  000808  06E8               	decf	wreg,f,c
  5295  00080A  A4D8               	btfss	status,2,c
  5296  00080C  D006               	goto	l270
  5297                           
  5298                           ;SlaveComm.c: 399: {
  5299                           ;SlaveComm.c: 400: send_end_of_transmission( send_buffer );
  5300  00080E  C0CC  F035         	movff	process_data_parameters@send_buffer,send_end_of_transmission@send_buffer
  5301  000812  C0CD  F036         	movff	process_data_parameters@send_buffer+1,send_end_of_transmission@send_buffer+1
  5302  000816  ECA1  F00F         	call	_send_end_of_transmission	;wreg free
  5303  00081A                     l270:
  5304                           
  5305                           ;SlaveComm.c: 401: }
  5306                           ;SlaveComm.c: 402: }
  5307                           ;SlaveComm.c: 408: return end_of_transmission_received;
  5308  00081A  503B               	movf	process_data_parameters@end_of_transmission_received,w,c
  5309  00081C  0012               	return	
  5310  00081E                     __end_of_process_data_parameters:
  5311                           	opt stack 0
  5312                           tblptru	equ	0xFF8
  5313                           prodh	equ	0xFF4
  5314                           prodl	equ	0xFF3
  5315                           intcon	equ	0xFF2
  5316                           intcon2	equ	0xFF1
  5317                           intcon3	equ	0xFF0
  5318                           postinc0	equ	0xFEE
  5319                           wreg	equ	0xFE8
  5320                           postinc1	equ	0xFE6
  5321                           fsr1h	equ	0xFE2
  5322                           fsr1l	equ	0xFE1
  5323                           indf2	equ	0xFDF
  5324                           postinc2	equ	0xFDE
  5325                           postdec2	equ	0xFDD
  5326                           fsr2h	equ	0xFDA
  5327                           fsr2l	equ	0xFD9
  5328                           status	equ	0xFD8
  5329                           
  5330 ;; *************** function _strmatch *****************
  5331 ;; Defined at:
  5332 ;;		line 535 in file "SlaveComm.c"
  5333 ;; Parameters:    Size  Location     Type
  5334 ;;  a               2   29[COMRAM] PTR unsigned char 
  5335 ;;		 -> process_data@parameters(50), 
  5336 ;;  b               2   31[COMRAM] PTR unsigned char 
  5337 ;;		 -> STR_11(10), STR_10(5), STR_9(6), STR_8(7), 
  5338 ;;		 -> STR_7(6), STR_6(5), STR_5(5), STR_4(7), 
  5339 ;;		 -> STR_3(12), STR_2(4), STR_1(4), 
  5340 ;; Auto vars:     Size  Location     Type
  5341 ;;  result          2   33[COMRAM] int 
  5342 ;;  match           1   35[COMRAM] unsigned char 
  5343 ;; Return value:  Size  Location     Type
  5344 ;;                  1    wreg      unsigned char 
  5345 ;; Registers used:
  5346 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5347 ;; Tracked objects:
  5348 ;;		On entry : 0/0
  5349 ;;		On exit  : 0/0
  5350 ;;		Unchanged: 0/0
  5351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5352 ;;      Params:         4       0       0       0       0       0       0
  5353 ;;      Locals:         3       0       0       0       0       0       0
  5354 ;;      Temps:          0       0       0       0       0       0       0
  5355 ;;      Totals:         7       0       0       0       0       0       0
  5356 ;;Total ram usage:        7 bytes
  5357 ;; Hardware stack levels used:    1
  5358 ;; Hardware stack levels required when called:    2
  5359 ;; This function calls:
  5360 ;;		_strcmp2
  5361 ;; This function is called by:
  5362 ;;		_process_data_parameters
  5363 ;; This function uses a non-reentrant model
  5364 ;;
  5365                           
  5366                           	psect	text37
  5367  001DA0                     __ptext37:
  5368                           	opt stack 0
  5369  001DA0                     _strmatch:
  5370                           	opt stack 24
  5371                           
  5372                           ;SlaveComm.c: 537: int result;
  5373                           ;SlaveComm.c: 538: bool match;
  5374                           ;SlaveComm.c: 540: result = strcmp2( a, b );
  5375                           
  5376                           ;incstack = 0
  5377  001DA0  C01E  F013         	movff	strmatch@a,strcmp2@a
  5378  001DA4  C01F  F014         	movff	strmatch@a+1,strcmp2@a+1
  5379  001DA8  C020  F015         	movff	strmatch@b,strcmp2@b
  5380  001DAC  C021  F016         	movff	strmatch@b+1,strcmp2@b+1
  5381  001DB0  EC9A  F005         	call	_strcmp2	;wreg free
  5382  001DB4  C013  F022         	movff	?_strcmp2,strmatch@result
  5383  001DB8  C014  F023         	movff	?_strcmp2+1,strmatch@result+1
  5384                           
  5385                           ;SlaveComm.c: 542: match = (result == 0) ? 1 : 0;
  5386  001DBC  5022               	movf	strmatch@result,w,c
  5387  001DBE  1023               	iorwf	strmatch@result+1,w,c
  5388  001DC0  A4D8               	btfss	status,2,c
  5389  001DC2  D002               	goto	u2530
  5390  001DC4  0E01               	movlw	1
  5391  001DC6  D001               	goto	u2540
  5392  001DC8                     u2530:
  5393  001DC8  0E00               	movlw	0
  5394  001DCA                     u2540:
  5395  001DCA  6E24               	movwf	strmatch@match,c
  5396                           
  5397                           ;SlaveComm.c: 544: return match;
  5398  001DCC  5024               	movf	strmatch@match,w,c
  5399  001DCE  0012               	return	
  5400  001DD0                     __end_of_strmatch:
  5401                           	opt stack 0
  5402                           tblptru	equ	0xFF8
  5403                           prodh	equ	0xFF4
  5404                           prodl	equ	0xFF3
  5405                           intcon	equ	0xFF2
  5406                           intcon2	equ	0xFF1
  5407                           intcon3	equ	0xFF0
  5408                           postinc0	equ	0xFEE
  5409                           wreg	equ	0xFE8
  5410                           postinc1	equ	0xFE6
  5411                           fsr1h	equ	0xFE2
  5412                           fsr1l	equ	0xFE1
  5413                           indf2	equ	0xFDF
  5414                           postinc2	equ	0xFDE
  5415                           postdec2	equ	0xFDD
  5416                           fsr2h	equ	0xFDA
  5417                           fsr2l	equ	0xFD9
  5418                           status	equ	0xFD8
  5419                           
  5420 ;; *************** function _strcmp2 *****************
  5421 ;; Defined at:
  5422 ;;		line 547 in file "SlaveComm.c"
  5423 ;; Parameters:    Size  Location     Type
  5424 ;;  a               2   18[COMRAM] PTR unsigned char 
  5425 ;;		 -> process_data@parameters(50), 
  5426 ;;  b               2   20[COMRAM] PTR unsigned char 
  5427 ;;		 -> STR_11(10), STR_10(5), STR_9(6), STR_8(7), 
  5428 ;;		 -> STR_7(6), STR_6(5), STR_5(5), STR_4(7), 
  5429 ;;		 -> STR_3(12), STR_2(4), STR_1(4), 
  5430 ;; Auto vars:     Size  Location     Type
  5431 ;;  inx             2   27[COMRAM] int 
  5432 ;;  match           2   25[COMRAM] int 
  5433 ;; Return value:  Size  Location     Type
  5434 ;;                  2   18[COMRAM] int 
  5435 ;; Registers used:
  5436 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  5437 ;; Tracked objects:
  5438 ;;		On entry : 0/0
  5439 ;;		On exit  : 0/0
  5440 ;;		Unchanged: 0/0
  5441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5442 ;;      Params:         4       0       0       0       0       0       0
  5443 ;;      Locals:         4       0       0       0       0       0       0
  5444 ;;      Temps:          3       0       0       0       0       0       0
  5445 ;;      Totals:        11       0       0       0       0       0       0
  5446 ;;Total ram usage:       11 bytes
  5447 ;; Hardware stack levels used:    1
  5448 ;; Hardware stack levels required when called:    1
  5449 ;; This function calls:
  5450 ;;		Nothing
  5451 ;; This function is called by:
  5452 ;;		_strmatch
  5453 ;; This function uses a non-reentrant model
  5454 ;;
  5455                           
  5456                           	psect	text38
  5457  000B34                     __ptext38:
  5458                           	opt stack 0
  5459  000B34                     _strcmp2:
  5460                           	opt stack 24
  5461                           
  5462                           ;SlaveComm.c: 549: int inx = 0;
  5463                           
  5464                           ;incstack = 0
  5465  000B34  0E00               	movlw	0
  5466  000B36  6E1D               	movwf	strcmp2@inx+1,c
  5467  000B38  0E00               	movlw	0
  5468  000B3A  6E1C               	movwf	strcmp2@inx,c
  5469                           
  5470                           ;SlaveComm.c: 550: int match = 0;
  5471  000B3C  0E00               	movlw	0
  5472  000B3E  6E1B               	movwf	strcmp2@match+1,c
  5473  000B40  0E00               	movlw	0
  5474  000B42  6E1A               	movwf	strcmp2@match,c
  5475                           
  5476                           ;SlaveComm.c: 552: while( (a[inx] != '\0') && (b[inx] != '\0') && (match == 0) )
  5477  000B44  D035               	goto	l309
  5478  000B46                     
  5479                           ;SlaveComm.c: 553: {
  5480                           ;SlaveComm.c: 554: if( a[inx] > b[inx] )
  5481  000B46  501C               	movf	strcmp2@inx,w,c
  5482  000B48  2413               	addwf	strcmp2@a,w,c
  5483  000B4A  6ED9               	movwf	fsr2l,c
  5484  000B4C  501D               	movf	strcmp2@inx+1,w,c
  5485  000B4E  2014               	addwfc	strcmp2@a+1,w,c
  5486  000B50  6EDA               	movwf	fsr2h,c
  5487  000B52  501C               	movf	strcmp2@inx,w,c
  5488  000B54  2415               	addwf	strcmp2@b,w,c
  5489  000B56  6E18               	movwf	(??_strcmp2+1)& (0+255),c
  5490  000B58  501D               	movf	strcmp2@inx+1,w,c
  5491  000B5A  2016               	addwfc	strcmp2@b+1,w,c
  5492  000B5C  6E19               	movwf	(??_strcmp2+2)& (0+255),c
  5493  000B5E  C018  FFF6         	movff	??_strcmp2+1,tblptrl
  5494  000B62  C019  FFF7         	movff	??_strcmp2+2,tblptrh
  5495  000B66                     	if	0	;tblptru may be non-zero
  5496  000B66                     	endif
  5497  000B66                     	if	0	;tblptru may be non-zero
  5498  000B66                     	endif
  5499  000B66  50DE               	movf	postinc2,w,c
  5500  000B68  0009               	tblrd		*+
  5501  000B6A  5CF5               	subwf	tablat,w,c
  5502  000B6C  B0D8               	btfsc	status,0,c
  5503  000B6E  D005               	goto	l311
  5504                           
  5505                           ;SlaveComm.c: 555: {
  5506                           ;SlaveComm.c: 556: match = 1;
  5507  000B70  0E00               	movlw	0
  5508  000B72  6E1B               	movwf	strcmp2@match+1,c
  5509  000B74  0E01               	movlw	1
  5510  000B76  6E1A               	movwf	strcmp2@match,c
  5511                           
  5512                           ;SlaveComm.c: 557: }
  5513  000B78  D019               	goto	l313
  5514  000B7A                     l311:
  5515                           
  5516                           ;SlaveComm.c: 558: else if( a[inx] < b[inx] )
  5517  000B7A  501C               	movf	strcmp2@inx,w,c
  5518  000B7C  2413               	addwf	strcmp2@a,w,c
  5519  000B7E  6ED9               	movwf	fsr2l,c
  5520  000B80  501D               	movf	strcmp2@inx+1,w,c
  5521  000B82  2014               	addwfc	strcmp2@a+1,w,c
  5522  000B84  6EDA               	movwf	fsr2h,c
  5523  000B86  50DF               	movf	indf2,w,c
  5524  000B88  6E17               	movwf	??_strcmp2& (0+255),c
  5525  000B8A  501C               	movf	strcmp2@inx,w,c
  5526  000B8C  2415               	addwf	strcmp2@b,w,c
  5527  000B8E  6E18               	movwf	(??_strcmp2+1)& (0+255),c
  5528  000B90  501D               	movf	strcmp2@inx+1,w,c
  5529  000B92  2016               	addwfc	strcmp2@b+1,w,c
  5530  000B94  6E19               	movwf	(??_strcmp2+2)& (0+255),c
  5531  000B96  C018  FFF6         	movff	??_strcmp2+1,tblptrl
  5532  000B9A  C019  FFF7         	movff	??_strcmp2+2,tblptrh
  5533  000B9E                     	if	0	;tblptru may be non-zero
  5534  000B9E                     	endif
  5535  000B9E                     	if	0	;tblptru may be non-zero
  5536  000B9E                     	endif
  5537  000B9E  0008               	tblrd		*
  5538  000BA0  50F5               	movf	tablat,w,c
  5539  000BA2  5C17               	subwf	??_strcmp2,w,c
  5540  000BA4  B0D8               	btfsc	status,0,c
  5541  000BA6  D002               	goto	l313
  5542                           
  5543                           ;SlaveComm.c: 559: {
  5544                           ;SlaveComm.c: 560: match = -1;
  5545  000BA8  681A               	setf	strcmp2@match,c
  5546  000BAA  681B               	setf	strcmp2@match+1,c
  5547  000BAC                     l313:
  5548                           
  5549                           ;SlaveComm.c: 565: }
  5550                           ;SlaveComm.c: 567: inx++;
  5551                           
  5552                           ;SlaveComm.c: 563: {
  5553  000BAC  4A1C               	infsnz	strcmp2@inx,f,c
  5554  000BAE  2A1D               	incf	strcmp2@inx+1,f,c
  5555  000BB0                     l309:
  5556  000BB0  501C               	movf	strcmp2@inx,w,c
  5557  000BB2  2413               	addwf	strcmp2@a,w,c
  5558  000BB4  6ED9               	movwf	fsr2l,c
  5559  000BB6  501D               	movf	strcmp2@inx+1,w,c
  5560  000BB8  2014               	addwfc	strcmp2@a+1,w,c
  5561  000BBA  6EDA               	movwf	fsr2h,c
  5562  000BBC  50DF               	movf	indf2,w,c
  5563  000BBE  B4D8               	btfsc	status,2,c
  5564  000BC0  D013               	goto	u2410
  5565  000BC2  501C               	movf	strcmp2@inx,w,c
  5566  000BC4  2415               	addwf	strcmp2@b,w,c
  5567  000BC6  6E17               	movwf	??_strcmp2& (0+255),c
  5568  000BC8  501D               	movf	strcmp2@inx+1,w,c
  5569  000BCA  2016               	addwfc	strcmp2@b+1,w,c
  5570  000BCC  6E18               	movwf	(??_strcmp2+1)& (0+255),c
  5571  000BCE  C017  FFF6         	movff	??_strcmp2,tblptrl
  5572  000BD2  C018  FFF7         	movff	??_strcmp2+1,tblptrh
  5573  000BD6                     	if	0	;tblptru may be non-zero
  5574  000BD6                     	endif
  5575  000BD6                     	if	0	;tblptru may be non-zero
  5576  000BD6                     	endif
  5577  000BD6  0008               	tblrd		*
  5578  000BD8  50F5               	movf	tablat,w,c
  5579  000BDA  0900               	iorlw	0
  5580  000BDC  B4D8               	btfsc	status,2,c
  5581  000BDE  D004               	goto	u2410
  5582  000BE0  501A               	movf	strcmp2@match,w,c
  5583  000BE2  101B               	iorwf	strcmp2@match+1,w,c
  5584  000BE4  B4D8               	btfsc	status,2,c
  5585  000BE6  D7AF               	goto	l310
  5586  000BE8                     u2410:
  5587                           
  5588                           ;SlaveComm.c: 568: }
  5589                           ;SlaveComm.c: 571: if( (a[inx] == '\0') && (b[inx] != '\0') )
  5590  000BE8  501C               	movf	strcmp2@inx,w,c
  5591  000BEA  2413               	addwf	strcmp2@a,w,c
  5592  000BEC  6ED9               	movwf	fsr2l,c
  5593  000BEE  501D               	movf	strcmp2@inx+1,w,c
  5594  000BF0  2014               	addwfc	strcmp2@a+1,w,c
  5595  000BF2  6EDA               	movwf	fsr2h,c
  5596  000BF4  50DF               	movf	indf2,w,c
  5597  000BF6  A4D8               	btfss	status,2,c
  5598  000BF8  D012               	goto	l319
  5599  000BFA  501C               	movf	strcmp2@inx,w,c
  5600  000BFC  2415               	addwf	strcmp2@b,w,c
  5601  000BFE  6E17               	movwf	??_strcmp2& (0+255),c
  5602  000C00  501D               	movf	strcmp2@inx+1,w,c
  5603  000C02  2016               	addwfc	strcmp2@b+1,w,c
  5604  000C04  6E18               	movwf	(??_strcmp2+1)& (0+255),c
  5605  000C06  C017  FFF6         	movff	??_strcmp2,tblptrl
  5606  000C0A  C018  FFF7         	movff	??_strcmp2+1,tblptrh
  5607  000C0E                     	if	0	;tblptru may be non-zero
  5608  000C0E                     	endif
  5609  000C0E                     	if	0	;tblptru may be non-zero
  5610  000C0E                     	endif
  5611  000C0E  0008               	tblrd		*
  5612  000C10  50F5               	movf	tablat,w,c
  5613  000C12  0900               	iorlw	0
  5614  000C14  B4D8               	btfsc	status,2,c
  5615  000C16  D003               	goto	l319
  5616                           
  5617                           ;SlaveComm.c: 572: {
  5618                           ;SlaveComm.c: 573: match = -1;
  5619  000C18  681A               	setf	strcmp2@match,c
  5620  000C1A  681B               	setf	strcmp2@match+1,c
  5621                           
  5622                           ;SlaveComm.c: 574: }
  5623  000C1C  D01C               	goto	l321
  5624  000C1E                     l319:
  5625                           
  5626                           ;SlaveComm.c: 575: else if( (a[inx] != '\0') && (b[inx] == '\0') )
  5627  000C1E  501C               	movf	strcmp2@inx,w,c
  5628  000C20  2413               	addwf	strcmp2@a,w,c
  5629  000C22  6ED9               	movwf	fsr2l,c
  5630  000C24  501D               	movf	strcmp2@inx+1,w,c
  5631  000C26  2014               	addwfc	strcmp2@a+1,w,c
  5632  000C28  6EDA               	movwf	fsr2h,c
  5633  000C2A  50DF               	movf	indf2,w,c
  5634  000C2C  B4D8               	btfsc	status,2,c
  5635  000C2E  D013               	goto	l321
  5636  000C30  501C               	movf	strcmp2@inx,w,c
  5637  000C32  2415               	addwf	strcmp2@b,w,c
  5638  000C34  6E17               	movwf	??_strcmp2& (0+255),c
  5639  000C36  501D               	movf	strcmp2@inx+1,w,c
  5640  000C38  2016               	addwfc	strcmp2@b+1,w,c
  5641  000C3A  6E18               	movwf	(??_strcmp2+1)& (0+255),c
  5642  000C3C  C017  FFF6         	movff	??_strcmp2,tblptrl
  5643  000C40  C018  FFF7         	movff	??_strcmp2+1,tblptrh
  5644  000C44                     	if	0	;tblptru may be non-zero
  5645  000C44                     	endif
  5646  000C44                     	if	0	;tblptru may be non-zero
  5647  000C44                     	endif
  5648  000C44  0008               	tblrd		*
  5649  000C46  50F5               	movf	tablat,w,c
  5650  000C48  0900               	iorlw	0
  5651  000C4A  A4D8               	btfss	status,2,c
  5652  000C4C  D004               	goto	l321
  5653                           
  5654                           ;SlaveComm.c: 576: {
  5655                           ;SlaveComm.c: 577: match = 1;
  5656  000C4E  0E00               	movlw	0
  5657  000C50  6E1B               	movwf	strcmp2@match+1,c
  5658  000C52  0E01               	movlw	1
  5659  000C54  6E1A               	movwf	strcmp2@match,c
  5660  000C56                     l321:
  5661                           
  5662                           ;SlaveComm.c: 578: }
  5663                           ;SlaveComm.c: 580: return match;
  5664  000C56  C01A  F013         	movff	strcmp2@match,?_strcmp2
  5665  000C5A  C01B  F014         	movff	strcmp2@match+1,?_strcmp2+1
  5666  000C5E  0012               	return	
  5667  000C60                     __end_of_strcmp2:
  5668                           	opt stack 0
  5669                           tblptru	equ	0xFF8
  5670                           tblptrh	equ	0xFF7
  5671                           tblptrl	equ	0xFF6
  5672                           tablat	equ	0xFF5
  5673                           prodh	equ	0xFF4
  5674                           prodl	equ	0xFF3
  5675                           intcon	equ	0xFF2
  5676                           intcon2	equ	0xFF1
  5677                           intcon3	equ	0xFF0
  5678                           postinc0	equ	0xFEE
  5679                           wreg	equ	0xFE8
  5680                           postinc1	equ	0xFE6
  5681                           fsr1h	equ	0xFE2
  5682                           fsr1l	equ	0xFE1
  5683                           indf2	equ	0xFDF
  5684                           postinc2	equ	0xFDE
  5685                           postdec2	equ	0xFDD
  5686                           fsr2h	equ	0xFDA
  5687                           fsr2l	equ	0xFD9
  5688                           status	equ	0xFD8
  5689                           
  5690 ;; *************** function _send_end_of_transmission *****************
  5691 ;; Defined at:
  5692 ;;		line 626 in file "SlaveComm.c"
  5693 ;; Parameters:    Size  Location     Type
  5694 ;;  send_buffer     2   52[COMRAM] PTR struct buffer
  5695 ;;		 -> communications@send_buffer(42), 
  5696 ;; Auto vars:     Size  Location     Type
  5697 ;;		None
  5698 ;; Return value:  Size  Location     Type
  5699 ;;                  1    wreg      void 
  5700 ;; Registers used:
  5701 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5702 ;; Tracked objects:
  5703 ;;		On entry : 0/0
  5704 ;;		On exit  : 0/0
  5705 ;;		Unchanged: 0/0
  5706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5707 ;;      Params:         2       0       0       0       0       0       0
  5708 ;;      Locals:         0       0       0       0       0       0       0
  5709 ;;      Temps:          0       0       0       0       0       0       0
  5710 ;;      Totals:         2       0       0       0       0       0       0
  5711 ;;Total ram usage:        2 bytes
  5712 ;; Hardware stack levels used:    1
  5713 ;; Hardware stack levels required when called:    6
  5714 ;; This function calls:
  5715 ;;		_command_builder1
  5716 ;; This function is called by:
  5717 ;;		_process_data_parameters
  5718 ;; This function uses a non-reentrant model
  5719 ;;
  5720                           
  5721                           	psect	text39
  5722  001F42                     __ptext39:
  5723                           	opt stack 0
  5724  001F42                     _send_end_of_transmission:
  5725                           	opt stack 20
  5726                           
  5727                           ;SlaveComm.c: 628: command_builder1( send_buffer, "END" );
  5728                           
  5729                           ;incstack = 0
  5730  001F42  C035  F02F         	movff	send_end_of_transmission@send_buffer,command_builder1@send_buffer
  5731  001F46  C036  F030         	movff	send_end_of_transmission@send_buffer+1,command_builder1@send_buffer+1
  5732  001F4A  0E4A               	movlw	low STR_1
  5733  001F4C  6E31               	movwf	command_builder1@data1,c
  5734  001F4E  0E06               	movlw	high STR_1
  5735  001F50  6E32               	movwf	command_builder1@data1+1,c
  5736  001F52  ECDA  F00C         	call	_command_builder1	;wreg free
  5737  001F56  0012               	return	
  5738  001F58                     __end_of_send_end_of_transmission:
  5739                           	opt stack 0
  5740                           tblptru	equ	0xFF8
  5741                           tblptrh	equ	0xFF7
  5742                           tblptrl	equ	0xFF6
  5743                           tablat	equ	0xFF5
  5744                           prodh	equ	0xFF4
  5745                           prodl	equ	0xFF3
  5746                           intcon	equ	0xFF2
  5747                           intcon2	equ	0xFF1
  5748                           intcon3	equ	0xFF0
  5749                           postinc0	equ	0xFEE
  5750                           wreg	equ	0xFE8
  5751                           postinc1	equ	0xFE6
  5752                           fsr1h	equ	0xFE2
  5753                           fsr1l	equ	0xFE1
  5754                           indf2	equ	0xFDF
  5755                           postinc2	equ	0xFDE
  5756                           postdec2	equ	0xFDD
  5757                           fsr2h	equ	0xFDA
  5758                           fsr2l	equ	0xFD9
  5759                           status	equ	0xFD8
  5760                           
  5761 ;; *************** function _command_builder1 *****************
  5762 ;; Defined at:
  5763 ;;		line 411 in file "SlaveComm.c"
  5764 ;; Parameters:    Size  Location     Type
  5765 ;;  send_buffer     2   46[COMRAM] PTR struct buffer
  5766 ;;		 -> communications@send_buffer(42), 
  5767 ;;  data1           2   48[COMRAM] PTR unsigned char 
  5768 ;;		 -> STR_12(4), 
  5769 ;; Auto vars:     Size  Location     Type
  5770 ;;  xsum            2   50[COMRAM] int 
  5771 ;; Return value:  Size  Location     Type
  5772 ;;                  1    wreg      void 
  5773 ;; Registers used:
  5774 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5775 ;; Tracked objects:
  5776 ;;		On entry : 0/0
  5777 ;;		On exit  : 0/0
  5778 ;;		Unchanged: 0/0
  5779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5780 ;;      Params:         4       0       0       0       0       0       0
  5781 ;;      Locals:         2       0       0       0       0       0       0
  5782 ;;      Temps:          0       0       0       0       0       0       0
  5783 ;;      Totals:         6       0       0       0       0       0       0
  5784 ;;Total ram usage:        6 bytes
  5785 ;; Hardware stack levels used:    1
  5786 ;; Hardware stack levels required when called:    5
  5787 ;; This function calls:
  5788 ;;		_command_builder_add_char
  5789 ;;		_command_builder_add_string
  5790 ;;		_xsum_builder
  5791 ;; This function is called by:
  5792 ;;		_send_end_of_transmission
  5793 ;; This function uses a non-reentrant model
  5794 ;;
  5795                           
  5796                           	psect	text40
  5797  0019B4                     __ptext40:
  5798                           	opt stack 0
  5799  0019B4                     _command_builder1:
  5800                           	opt stack 20
  5801                           
  5802                           ;SlaveComm.c: 413: command_builder_add_char( send_buffer, '#' );
  5803                           
  5804                           ;incstack = 0
  5805  0019B4  C02F  F013         	movff	command_builder1@send_buffer,command_builder_add_char@send_buffer
  5806  0019B8  C030  F014         	movff	command_builder1@send_buffer+1,command_builder_add_char@send_buffer+1
  5807  0019BC  0E23               	movlw	35
  5808  0019BE  6E15               	movwf	command_builder_add_char@data,c
  5809  0019C0  ECAC  F00C         	call	_command_builder_add_char	;wreg free
  5810                           
  5811                           ;SlaveComm.c: 414: command_builder_add_char( send_buffer, '!' );
  5812  0019C4  C02F  F013         	movff	command_builder1@send_buffer,command_builder_add_char@send_buffer
  5813  0019C8  C030  F014         	movff	command_builder1@send_buffer+1,command_builder_add_char@send_buffer+1
  5814  0019CC  0E21               	movlw	33
  5815  0019CE  6E15               	movwf	command_builder_add_char@data,c
  5816  0019D0  ECAC  F00C         	call	_command_builder_add_char	;wreg free
  5817                           
  5818                           ;SlaveComm.c: 415: int xsum = 0;
  5819  0019D4  0E00               	movlw	0
  5820  0019D6  6E34               	movwf	command_builder1@xsum+1,c
  5821  0019D8  0E00               	movlw	0
  5822  0019DA  6E33               	movwf	command_builder1@xsum,c
  5823                           
  5824                           ;SlaveComm.c: 416: xsum += command_builder_add_string( send_buffer, data1 );
  5825  0019DC  C02F  F017         	movff	command_builder1@send_buffer,command_builder_add_string@send_buffer
  5826  0019E0  C030  F018         	movff	command_builder1@send_buffer+1,command_builder_add_string@send_buffer+1
  5827  0019E4  C031  F019         	movff	command_builder1@data1,command_builder_add_string@data_string
  5828  0019E8  C032  F01A         	movff	command_builder1@data1+1,command_builder_add_string@data_string+1
  5829  0019EC  EC5E  F00A         	call	_command_builder_add_string	;wreg free
  5830  0019F0  5017               	movf	?_command_builder_add_string,w,c
  5831  0019F2  2633               	addwf	command_builder1@xsum,f,c
  5832  0019F4  5018               	movf	?_command_builder_add_string+1,w,c
  5833  0019F6  2234               	addwfc	command_builder1@xsum+1,f,c
  5834                           
  5835                           ;SlaveComm.c: 417: xsum_builder( send_buffer, xsum );
  5836  0019F8  C02F  F02B         	movff	command_builder1@send_buffer,xsum_builder@send_buffer
  5837  0019FC  C030  F02C         	movff	command_builder1@send_buffer+1,xsum_builder@send_buffer+1
  5838  001A00  C033  F02D         	movff	command_builder1@xsum,xsum_builder@xsum
  5839  001A04  C034  F02E         	movff	command_builder1@xsum+1,xsum_builder@xsum+1
  5840  001A08  EC7B  F00C         	call	_xsum_builder	;wreg free
  5841  001A0C  0012               	return	
  5842  001A0E                     __end_of_command_builder1:
  5843                           	opt stack 0
  5844                           tblptru	equ	0xFF8
  5845                           tblptrh	equ	0xFF7
  5846                           tblptrl	equ	0xFF6
  5847                           tablat	equ	0xFF5
  5848                           prodh	equ	0xFF4
  5849                           prodl	equ	0xFF3
  5850                           intcon	equ	0xFF2
  5851                           intcon2	equ	0xFF1
  5852                           intcon3	equ	0xFF0
  5853                           postinc0	equ	0xFEE
  5854                           wreg	equ	0xFE8
  5855                           postinc1	equ	0xFE6
  5856                           fsr1h	equ	0xFE2
  5857                           fsr1l	equ	0xFE1
  5858                           indf2	equ	0xFDF
  5859                           postinc2	equ	0xFDE
  5860                           postdec2	equ	0xFDD
  5861                           fsr2h	equ	0xFDA
  5862                           fsr2l	equ	0xFD9
  5863                           status	equ	0xFD8
  5864                           
  5865 ;; *************** function _com_command_setEnergyUsed *****************
  5866 ;; Defined at:
  5867 ;;		line 651 in file "SlaveComm.c"
  5868 ;; Parameters:    Size  Location     Type
  5869 ;;  send_buffer     2   56[COMRAM] PTR struct buffer
  5870 ;;		 -> communications@send_buffer(42), 
  5871 ;; Auto vars:     Size  Location     Type
  5872 ;;  temp           12   16[BANK0 ] unsigned char [12]
  5873 ;; Return value:  Size  Location     Type
  5874 ;;                  1    wreg      void 
  5875 ;; Registers used:
  5876 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5877 ;; Tracked objects:
  5878 ;;		On entry : 0/0
  5879 ;;		On exit  : 0/0
  5880 ;;		Unchanged: 0/0
  5881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5882 ;;      Params:         2       0       0       0       0       0       0
  5883 ;;      Locals:         0      12       0       0       0       0       0
  5884 ;;      Temps:          0       0       0       0       0       0       0
  5885 ;;      Totals:         2      12       0       0       0       0       0
  5886 ;;Total ram usage:       14 bytes
  5887 ;; Hardware stack levels used:    1
  5888 ;; Hardware stack levels required when called:    6
  5889 ;; This function calls:
  5890 ;;		_command_builder3
  5891 ;;		_ultoa
  5892 ;; This function is called by:
  5893 ;;		_resetCommunications
  5894 ;;		_process_data_parameters
  5895 ;; This function uses a non-reentrant model
  5896 ;;
  5897                           
  5898                           	psect	text41
  5899  001B98                     __ptext41:
  5900                           	opt stack 0
  5901  001B98                     _com_command_setEnergyUsed:
  5902                           	opt stack 21
  5903                           
  5904                           ;SlaveComm.c: 653: char temp[12];
  5905                           ;SlaveComm.c: 655: ultoa( temp, meterEnergyUsed_global, 10 );
  5906                           
  5907                           ;incstack = 0
  5908  001B98  0EBE               	movlw	low com_command_setEnergyUsed@temp
  5909  001B9A  6E20               	movwf	ultoa@buf,c
  5910  001B9C  0E00               	movlw	high com_command_setEnergyUsed@temp
  5911  001B9E  6E21               	movwf	ultoa@buf+1,c
  5912  001BA0  C03D  F022         	movff	_meterEnergyUsed_global,ultoa@val
  5913  001BA4  C03E  F023         	movff	_meterEnergyUsed_global+1,ultoa@val+1
  5914  001BA8  C03F  F024         	movff	_meterEnergyUsed_global+2,ultoa@val+2
  5915  001BAC  C040  F025         	movff	_meterEnergyUsed_global+3,ultoa@val+3
  5916  001BB0  0E00               	movlw	0
  5917  001BB2  6E27               	movwf	ultoa@base+1,c
  5918  001BB4  0E0A               	movlw	10
  5919  001BB6  6E26               	movwf	ultoa@base,c
  5920  001BB8  EC30  F006         	call	_ultoa	;wreg free
  5921                           
  5922                           ;SlaveComm.c: 657: command_builder3( send_buffer, "Set", "EnUsed", temp );
  5923  001BBC  C039  F02F         	movff	com_command_setEnergyUsed@send_buffer,command_builder3@send_buffer
  5924  001BC0  C03A  F030         	movff	com_command_setEnergyUsed@send_buffer+1,command_builder3@send_buffer+1
  5925  001BC4  0E4E               	movlw	low STR_2
  5926  001BC6  6E31               	movwf	command_builder3@data1,c
  5927  001BC8  0E06               	movlw	high STR_2
  5928  001BCA  6E32               	movwf	command_builder3@data1+1,c
  5929  001BCC  0E17               	movlw	low STR_4
  5930  001BCE  6E33               	movwf	command_builder3@data2,c
  5931  001BD0  0E06               	movlw	high STR_4
  5932  001BD2  6E34               	movwf	command_builder3@data2+1,c
  5933  001BD4  0EBE               	movlw	low com_command_setEnergyUsed@temp
  5934  001BD6  6E35               	movwf	command_builder3@data3,c
  5935  001BD8  0E00               	movlw	high com_command_setEnergyUsed@temp
  5936  001BDA  6E36               	movwf	command_builder3@data3+1,c
  5937  001BDC  EC9D  F007         	call	_command_builder3	;wreg free
  5938  001BE0  0012               	return	
  5939  001BE2                     __end_of_com_command_setEnergyUsed:
  5940                           	opt stack 0
  5941                           tblptru	equ	0xFF8
  5942                           tblptrh	equ	0xFF7
  5943                           tblptrl	equ	0xFF6
  5944                           tablat	equ	0xFF5
  5945                           prodh	equ	0xFF4
  5946                           prodl	equ	0xFF3
  5947                           intcon	equ	0xFF2
  5948                           intcon2	equ	0xFF1
  5949                           intcon3	equ	0xFF0
  5950                           postinc0	equ	0xFEE
  5951                           wreg	equ	0xFE8
  5952                           postinc1	equ	0xFE6
  5953                           fsr1h	equ	0xFE2
  5954                           fsr1l	equ	0xFE1
  5955                           indf2	equ	0xFDF
  5956                           postinc2	equ	0xFDE
  5957                           postdec2	equ	0xFDD
  5958                           fsr2h	equ	0xFDA
  5959                           fsr2l	equ	0xFD9
  5960                           status	equ	0xFD8
  5961                           
  5962 ;; *************** function _ultoa *****************
  5963 ;; Defined at:
  5964 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ltoa.c"
  5965 ;; Parameters:    Size  Location     Type
  5966 ;;  buf             2   31[COMRAM] PTR unsigned char 
  5967 ;;		 -> com_command_setEnergyUsed@temp(12), com_command_setPower@temp(12), 
  5968 ;;  val             4   33[COMRAM] unsigned long 
  5969 ;;  base            2   37[COMRAM] int 
  5970 ;; Auto vars:     Size  Location     Type
  5971 ;;  v               4   39[COMRAM] unsigned long 
  5972 ;;  c               1   43[COMRAM] unsigned char 
  5973 ;; Return value:  Size  Location     Type
  5974 ;;                  2   31[COMRAM] PTR unsigned char 
  5975 ;; Registers used:
  5976 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5977 ;; Tracked objects:
  5978 ;;		On entry : 0/0
  5979 ;;		On exit  : 0/0
  5980 ;;		Unchanged: 0/0
  5981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5982 ;;      Params:         8       0       0       0       0       0       0
  5983 ;;      Locals:         5       0       0       0       0       0       0
  5984 ;;      Temps:          0       0       0       0       0       0       0
  5985 ;;      Totals:        13       0       0       0       0       0       0
  5986 ;;Total ram usage:       13 bytes
  5987 ;; Hardware stack levels used:    1
  5988 ;; Hardware stack levels required when called:    2
  5989 ;; This function calls:
  5990 ;;		___lldiv
  5991 ;;		___llmod
  5992 ;; This function is called by:
  5993 ;;		_com_command_setPower
  5994 ;;		_com_command_setEnergyUsed
  5995 ;; This function uses a non-reentrant model
  5996 ;;
  5997                           
  5998                           	psect	text42
  5999  000C60                     __ptext42:
  6000                           	opt stack 0
  6001  000C60                     _ultoa:
  6002                           	opt stack 24
  6003                           
  6004                           ;incstack = 0
  6005  000C60  C022  F028         	movff	ultoa@val,ultoa@v
  6006  000C64  C023  F029         	movff	ultoa@val+1,ultoa@v+1
  6007  000C68  C024  F02A         	movff	ultoa@val+2,ultoa@v+2
  6008  000C6C  C025  F02B         	movff	ultoa@val+3,ultoa@v+3
  6009  000C70  C028  F013         	movff	ultoa@v,___lldiv@dividend
  6010  000C74  C029  F014         	movff	ultoa@v+1,___lldiv@dividend+1
  6011  000C78  C02A  F015         	movff	ultoa@v+2,___lldiv@dividend+2
  6012  000C7C  C02B  F016         	movff	ultoa@v+3,___lldiv@dividend+3
  6013  000C80  C026  F017         	movff	ultoa@base,___lldiv@divisor
  6014  000C84  C027  F018         	movff	ultoa@base+1,___lldiv@divisor+1
  6015  000C88  0E00               	movlw	0
  6016  000C8A  BE18               	btfsc	___lldiv@divisor+1,7,c
  6017  000C8C  0EFF               	movlw	-1
  6018  000C8E  6E19               	movwf	___lldiv@divisor+2,c
  6019  000C90  6E1A               	movwf	___lldiv@divisor+3,c
  6020  000C92  EC32  F00B         	call	___lldiv	;wreg free
  6021  000C96  C013  F028         	movff	?___lldiv,ultoa@v
  6022  000C9A  C014  F029         	movff	?___lldiv+1,ultoa@v+1
  6023  000C9E  C015  F02A         	movff	?___lldiv+2,ultoa@v+2
  6024  000CA2  C016  F02B         	movff	?___lldiv+3,ultoa@v+3
  6025  000CA6  4A20               	infsnz	ultoa@buf,f,c
  6026  000CA8  2A21               	incf	ultoa@buf+1,f,c
  6027  000CAA  5028               	movf	ultoa@v,w,c
  6028  000CAC  1029               	iorwf	ultoa@v+1,w,c
  6029  000CAE  102A               	iorwf	ultoa@v+2,w,c
  6030  000CB0  102B               	iorwf	ultoa@v+3,w,c
  6031  000CB2  A4D8               	btfss	status,2,c
  6032  000CB4  D7DD               	goto	l1017
  6033  000CB6  C020  FFD9         	movff	ultoa@buf,fsr2l
  6034  000CBA  C021  FFDA         	movff	ultoa@buf+1,fsr2h
  6035  000CBE  0E00               	movlw	0
  6036  000CC0  6EDF               	movwf	indf2,c
  6037  000CC2  0620               	decf	ultoa@buf,f,c
  6038  000CC4  A0D8               	btfss	status,0,c
  6039  000CC6  0621               	decf	ultoa@buf+1,f,c
  6040  000CC8  C022  F013         	movff	ultoa@val,___llmod@dividend
  6041  000CCC  C023  F014         	movff	ultoa@val+1,___llmod@dividend+1
  6042  000CD0  C024  F015         	movff	ultoa@val+2,___llmod@dividend+2
  6043  000CD4  C025  F016         	movff	ultoa@val+3,___llmod@dividend+3
  6044  000CD8  C026  F017         	movff	ultoa@base,___llmod@divisor
  6045  000CDC  C027  F018         	movff	ultoa@base+1,___llmod@divisor+1
  6046  000CE0  0E00               	movlw	0
  6047  000CE2  BE18               	btfsc	___llmod@divisor+1,7,c
  6048  000CE4  0EFF               	movlw	-1
  6049  000CE6  6E19               	movwf	___llmod@divisor+2,c
  6050  000CE8  6E1A               	movwf	___llmod@divisor+3,c
  6051  000CEA  ECE4  F00B         	call	___llmod	;wreg free
  6052  000CEE  5013               	movf	?___llmod,w,c
  6053  000CF0  6E2C               	movwf	ultoa@c,c
  6054  000CF2  C022  F013         	movff	ultoa@val,___lldiv@dividend
  6055  000CF6  C023  F014         	movff	ultoa@val+1,___lldiv@dividend+1
  6056  000CFA  C024  F015         	movff	ultoa@val+2,___lldiv@dividend+2
  6057  000CFE  C025  F016         	movff	ultoa@val+3,___lldiv@dividend+3
  6058  000D02  C026  F017         	movff	ultoa@base,___lldiv@divisor
  6059  000D06  C027  F018         	movff	ultoa@base+1,___lldiv@divisor+1
  6060  000D0A  0E00               	movlw	0
  6061  000D0C  BE18               	btfsc	___lldiv@divisor+1,7,c
  6062  000D0E  0EFF               	movlw	-1
  6063  000D10  6E19               	movwf	___lldiv@divisor+2,c
  6064  000D12  6E1A               	movwf	___lldiv@divisor+3,c
  6065  000D14  EC32  F00B         	call	___lldiv	;wreg free
  6066  000D18  C013  F022         	movff	?___lldiv,ultoa@val
  6067  000D1C  C014  F023         	movff	?___lldiv+1,ultoa@val+1
  6068  000D20  C015  F024         	movff	?___lldiv+2,ultoa@val+2
  6069  000D24  C016  F025         	movff	?___lldiv+3,ultoa@val+3
  6070  000D28  0E09               	movlw	9
  6071  000D2A  642C               	cpfsgt	ultoa@c,c
  6072  000D2C  D002               	goto	l1020
  6073  000D2E  0E07               	movlw	7
  6074  000D30  262C               	addwf	ultoa@c,f,c
  6075  000D32                     l1020:
  6076  000D32  0E30               	movlw	48
  6077  000D34  262C               	addwf	ultoa@c,f,c
  6078  000D36  C020  FFD9         	movff	ultoa@buf,fsr2l
  6079  000D3A  C021  FFDA         	movff	ultoa@buf+1,fsr2h
  6080  000D3E  C02C  FFDF         	movff	ultoa@c,indf2
  6081  000D42  0620               	decf	ultoa@buf,f,c
  6082  000D44  A0D8               	btfss	status,0,c
  6083  000D46  0621               	decf	ultoa@buf+1,f,c
  6084  000D48  5022               	movf	ultoa@val,w,c
  6085  000D4A  1023               	iorwf	ultoa@val+1,w,c
  6086  000D4C  1024               	iorwf	ultoa@val+2,w,c
  6087  000D4E  1025               	iorwf	ultoa@val+3,w,c
  6088  000D50  B4D8               	btfsc	status,2,c
  6089  000D52  0012               	return	
  6090  000D54  D7B9               	goto	l1019
  6091  000D56                     __end_of_ultoa:
  6092                           	opt stack 0
  6093                           tblptru	equ	0xFF8
  6094                           tblptrh	equ	0xFF7
  6095                           tblptrl	equ	0xFF6
  6096                           tablat	equ	0xFF5
  6097                           prodh	equ	0xFF4
  6098                           prodl	equ	0xFF3
  6099                           intcon	equ	0xFF2
  6100                           intcon2	equ	0xFF1
  6101                           intcon3	equ	0xFF0
  6102                           postinc0	equ	0xFEE
  6103                           wreg	equ	0xFE8
  6104                           postinc1	equ	0xFE6
  6105                           fsr1h	equ	0xFE2
  6106                           fsr1l	equ	0xFE1
  6107                           indf2	equ	0xFDF
  6108                           postinc2	equ	0xFDE
  6109                           postdec2	equ	0xFDD
  6110                           fsr2h	equ	0xFDA
  6111                           fsr2l	equ	0xFD9
  6112                           status	equ	0xFD8
  6113                           
  6114 ;; *************** function ___llmod *****************
  6115 ;; Defined at:
  6116 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  6117 ;; Parameters:    Size  Location     Type
  6118 ;;  dividend        4   18[COMRAM] unsigned long 
  6119 ;;  divisor         4   22[COMRAM] unsigned long 
  6120 ;; Auto vars:     Size  Location     Type
  6121 ;;  counter         1   26[COMRAM] unsigned char 
  6122 ;; Return value:  Size  Location     Type
  6123 ;;                  4   18[COMRAM] unsigned long 
  6124 ;; Registers used:
  6125 ;;		wreg, status,2, status,0
  6126 ;; Tracked objects:
  6127 ;;		On entry : 0/0
  6128 ;;		On exit  : 0/0
  6129 ;;		Unchanged: 0/0
  6130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6131 ;;      Params:         8       0       0       0       0       0       0
  6132 ;;      Locals:         1       0       0       0       0       0       0
  6133 ;;      Temps:          0       0       0       0       0       0       0
  6134 ;;      Totals:         9       0       0       0       0       0       0
  6135 ;;Total ram usage:        9 bytes
  6136 ;; Hardware stack levels used:    1
  6137 ;; Hardware stack levels required when called:    1
  6138 ;; This function calls:
  6139 ;;		Nothing
  6140 ;; This function is called by:
  6141 ;;		_main
  6142 ;;		_ultoa
  6143 ;; This function uses a non-reentrant model
  6144 ;;
  6145                           
  6146                           	psect	text43
  6147  0017C8                     __ptext43:
  6148                           	opt stack 0
  6149  0017C8                     ___llmod:
  6150                           	opt stack 24
  6151                           
  6152                           ;incstack = 0
  6153  0017C8  5017               	movf	___llmod@divisor,w,c
  6154  0017CA  1018               	iorwf	___llmod@divisor+1,w,c
  6155  0017CC  1019               	iorwf	___llmod@divisor+2,w,c
  6156  0017CE  101A               	iorwf	___llmod@divisor+3,w,c
  6157  0017D0  B4D8               	btfsc	status,2,c
  6158  0017D2  D024               	goto	l979
  6159  0017D4  0E01               	movlw	1
  6160  0017D6  6E1B               	movwf	___llmod@counter,c
  6161  0017D8  D006               	goto	l974
  6162  0017DA  90D8               	bcf	status,0,c
  6163  0017DC  3617               	rlcf	___llmod@divisor,f,c
  6164  0017DE  3618               	rlcf	___llmod@divisor+1,f,c
  6165  0017E0  3619               	rlcf	___llmod@divisor+2,f,c
  6166  0017E2  361A               	rlcf	___llmod@divisor+3,f,c
  6167  0017E4  2A1B               	incf	___llmod@counter,f,c
  6168  0017E6                     l974:
  6169  0017E6  AE1A               	btfss	___llmod@divisor+3,7,c
  6170  0017E8  D7F8               	goto	l975
  6171  0017EA                     u2350:
  6172  0017EA  5017               	movf	___llmod@divisor,w,c
  6173  0017EC  5C13               	subwf	___llmod@dividend,w,c
  6174  0017EE  5018               	movf	___llmod@divisor+1,w,c
  6175  0017F0  5814               	subwfb	___llmod@dividend+1,w,c
  6176  0017F2  5019               	movf	___llmod@divisor+2,w,c
  6177  0017F4  5815               	subwfb	___llmod@dividend+2,w,c
  6178  0017F6  501A               	movf	___llmod@divisor+3,w,c
  6179  0017F8  5816               	subwfb	___llmod@dividend+3,w,c
  6180  0017FA  A0D8               	btfss	status,0,c
  6181  0017FC  D008               	goto	l978
  6182  0017FE  5017               	movf	___llmod@divisor,w,c
  6183  001800  5E13               	subwf	___llmod@dividend,f,c
  6184  001802  5018               	movf	___llmod@divisor+1,w,c
  6185  001804  5A14               	subwfb	___llmod@dividend+1,f,c
  6186  001806  5019               	movf	___llmod@divisor+2,w,c
  6187  001808  5A15               	subwfb	___llmod@dividend+2,f,c
  6188  00180A  501A               	movf	___llmod@divisor+3,w,c
  6189  00180C  5A16               	subwfb	___llmod@dividend+3,f,c
  6190  00180E                     l978:
  6191  00180E  90D8               	bcf	status,0,c
  6192  001810  321A               	rrcf	___llmod@divisor+3,f,c
  6193  001812  3219               	rrcf	___llmod@divisor+2,f,c
  6194  001814  3218               	rrcf	___llmod@divisor+1,f,c
  6195  001816  3217               	rrcf	___llmod@divisor,f,c
  6196  001818  2E1B               	decfsz	___llmod@counter,f,c
  6197  00181A  D7E7               	goto	u2350
  6198  00181C                     l979:
  6199  00181C  C013  F013         	movff	___llmod@dividend,?___llmod
  6200  001820  C014  F014         	movff	___llmod@dividend+1,?___llmod+1
  6201  001824  C015  F015         	movff	___llmod@dividend+2,?___llmod+2
  6202  001828  C016  F016         	movff	___llmod@dividend+3,?___llmod+3
  6203  00182C  0012               	return		;funcret
  6204  00182E                     __end_of___llmod:
  6205                           	opt stack 0
  6206                           tblptru	equ	0xFF8
  6207                           tblptrh	equ	0xFF7
  6208                           tblptrl	equ	0xFF6
  6209                           tablat	equ	0xFF5
  6210                           prodh	equ	0xFF4
  6211                           prodl	equ	0xFF3
  6212                           intcon	equ	0xFF2
  6213                           intcon2	equ	0xFF1
  6214                           intcon3	equ	0xFF0
  6215                           postinc0	equ	0xFEE
  6216                           wreg	equ	0xFE8
  6217                           postinc1	equ	0xFE6
  6218                           fsr1h	equ	0xFE2
  6219                           fsr1l	equ	0xFE1
  6220                           indf2	equ	0xFDF
  6221                           postinc2	equ	0xFDE
  6222                           postdec2	equ	0xFDD
  6223                           fsr2h	equ	0xFDA
  6224                           fsr2l	equ	0xFD9
  6225                           status	equ	0xFD8
  6226                           
  6227 ;; *************** function ___lldiv *****************
  6228 ;; Defined at:
  6229 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  6230 ;; Parameters:    Size  Location     Type
  6231 ;;  dividend        4   18[COMRAM] unsigned long 
  6232 ;;  divisor         4   22[COMRAM] unsigned long 
  6233 ;; Auto vars:     Size  Location     Type
  6234 ;;  quotient        4   26[COMRAM] unsigned long 
  6235 ;;  counter         1   30[COMRAM] unsigned char 
  6236 ;; Return value:  Size  Location     Type
  6237 ;;                  4   18[COMRAM] unsigned long 
  6238 ;; Registers used:
  6239 ;;		wreg, status,2, status,0
  6240 ;; Tracked objects:
  6241 ;;		On entry : 0/0
  6242 ;;		On exit  : 0/0
  6243 ;;		Unchanged: 0/0
  6244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6245 ;;      Params:         8       0       0       0       0       0       0
  6246 ;;      Locals:         5       0       0       0       0       0       0
  6247 ;;      Temps:          0       0       0       0       0       0       0
  6248 ;;      Totals:        13       0       0       0       0       0       0
  6249 ;;Total ram usage:       13 bytes
  6250 ;; Hardware stack levels used:    1
  6251 ;; Hardware stack levels required when called:    1
  6252 ;; This function calls:
  6253 ;;		Nothing
  6254 ;; This function is called by:
  6255 ;;		_powerCalculateWatts
  6256 ;;		_powerReduction
  6257 ;;		_ultoa
  6258 ;; This function uses a non-reentrant model
  6259 ;;
  6260                           
  6261                           	psect	text44
  6262  001664                     __ptext44:
  6263                           	opt stack 0
  6264  001664                     ___lldiv:
  6265                           	opt stack 27
  6266                           
  6267                           ;incstack = 0
  6268  001664  0E00               	movlw	0
  6269  001666  6E1B               	movwf	___lldiv@quotient,c
  6270  001668  0E00               	movlw	0
  6271  00166A  6E1C               	movwf	___lldiv@quotient+1,c
  6272  00166C  0E00               	movlw	0
  6273  00166E  6E1D               	movwf	___lldiv@quotient+2,c
  6274  001670  0E00               	movlw	0
  6275  001672  6E1E               	movwf	___lldiv@quotient+3,c
  6276  001674  5017               	movf	___lldiv@divisor,w,c
  6277  001676  1018               	iorwf	___lldiv@divisor+1,w,c
  6278  001678  1019               	iorwf	___lldiv@divisor+2,w,c
  6279  00167A  101A               	iorwf	___lldiv@divisor+3,w,c
  6280  00167C  B4D8               	btfsc	status,2,c
  6281  00167E  D02A               	goto	l969
  6282  001680  0E01               	movlw	1
  6283  001682  6E1F               	movwf	___lldiv@counter,c
  6284  001684  D006               	goto	l964
  6285  001686  90D8               	bcf	status,0,c
  6286  001688  3617               	rlcf	___lldiv@divisor,f,c
  6287  00168A  3618               	rlcf	___lldiv@divisor+1,f,c
  6288  00168C  3619               	rlcf	___lldiv@divisor+2,f,c
  6289  00168E  361A               	rlcf	___lldiv@divisor+3,f,c
  6290  001690  2A1F               	incf	___lldiv@counter,f,c
  6291  001692                     l964:
  6292  001692  AE1A               	btfss	___lldiv@divisor+3,7,c
  6293  001694  D7F8               	goto	l965
  6294  001696                     u2320:
  6295  001696  90D8               	bcf	status,0,c
  6296  001698  361B               	rlcf	___lldiv@quotient,f,c
  6297  00169A  361C               	rlcf	___lldiv@quotient+1,f,c
  6298  00169C  361D               	rlcf	___lldiv@quotient+2,f,c
  6299  00169E  361E               	rlcf	___lldiv@quotient+3,f,c
  6300  0016A0  5017               	movf	___lldiv@divisor,w,c
  6301  0016A2  5C13               	subwf	___lldiv@dividend,w,c
  6302  0016A4  5018               	movf	___lldiv@divisor+1,w,c
  6303  0016A6  5814               	subwfb	___lldiv@dividend+1,w,c
  6304  0016A8  5019               	movf	___lldiv@divisor+2,w,c
  6305  0016AA  5815               	subwfb	___lldiv@dividend+2,w,c
  6306  0016AC  501A               	movf	___lldiv@divisor+3,w,c
  6307  0016AE  5816               	subwfb	___lldiv@dividend+3,w,c
  6308  0016B0  A0D8               	btfss	status,0,c
  6309  0016B2  D009               	goto	l968
  6310  0016B4  5017               	movf	___lldiv@divisor,w,c
  6311  0016B6  5E13               	subwf	___lldiv@dividend,f,c
  6312  0016B8  5018               	movf	___lldiv@divisor+1,w,c
  6313  0016BA  5A14               	subwfb	___lldiv@dividend+1,f,c
  6314  0016BC  5019               	movf	___lldiv@divisor+2,w,c
  6315  0016BE  5A15               	subwfb	___lldiv@dividend+2,f,c
  6316  0016C0  501A               	movf	___lldiv@divisor+3,w,c
  6317  0016C2  5A16               	subwfb	___lldiv@dividend+3,f,c
  6318  0016C4  801B               	bsf	___lldiv@quotient,0,c
  6319  0016C6                     l968:
  6320  0016C6  90D8               	bcf	status,0,c
  6321  0016C8  321A               	rrcf	___lldiv@divisor+3,f,c
  6322  0016CA  3219               	rrcf	___lldiv@divisor+2,f,c
  6323  0016CC  3218               	rrcf	___lldiv@divisor+1,f,c
  6324  0016CE  3217               	rrcf	___lldiv@divisor,f,c
  6325  0016D0  2E1F               	decfsz	___lldiv@counter,f,c
  6326  0016D2  D7E1               	goto	u2320
  6327  0016D4                     l969:
  6328  0016D4  C01B  F013         	movff	___lldiv@quotient,?___lldiv
  6329  0016D8  C01C  F014         	movff	___lldiv@quotient+1,?___lldiv+1
  6330  0016DC  C01D  F015         	movff	___lldiv@quotient+2,?___lldiv+2
  6331  0016E0  C01E  F016         	movff	___lldiv@quotient+3,?___lldiv+3
  6332  0016E4  0012               	return		;funcret
  6333  0016E6                     __end_of___lldiv:
  6334                           	opt stack 0
  6335                           tblptru	equ	0xFF8
  6336                           tblptrh	equ	0xFF7
  6337                           tblptrl	equ	0xFF6
  6338                           tablat	equ	0xFF5
  6339                           prodh	equ	0xFF4
  6340                           prodl	equ	0xFF3
  6341                           intcon	equ	0xFF2
  6342                           intcon2	equ	0xFF1
  6343                           intcon3	equ	0xFF0
  6344                           postinc0	equ	0xFEE
  6345                           wreg	equ	0xFE8
  6346                           postinc1	equ	0xFE6
  6347                           fsr1h	equ	0xFE2
  6348                           fsr1l	equ	0xFE1
  6349                           indf2	equ	0xFDF
  6350                           postinc2	equ	0xFDE
  6351                           postdec2	equ	0xFDD
  6352                           fsr2h	equ	0xFDA
  6353                           fsr2l	equ	0xFD9
  6354                           status	equ	0xFD8
  6355                           
  6356 ;; *************** function _command_builder3 *****************
  6357 ;; Defined at:
  6358 ;;		line 436 in file "SlaveComm.c"
  6359 ;; Parameters:    Size  Location     Type
  6360 ;;  send_buffer     2   46[COMRAM] PTR struct buffer
  6361 ;;		 -> communications@send_buffer(42), 
  6362 ;;  data1           2   48[COMRAM] PTR unsigned char 
  6363 ;;		 -> STR_27(4), STR_22(4), STR_19(4), STR_17(4), 
  6364 ;;		 -> STR_15(4), 
  6365 ;;  data2           2   50[COMRAM] PTR unsigned char 
  6366 ;;		 -> STR_28(10), STR_23(5), STR_20(6), STR_18(7), 
  6367 ;;		 -> STR_16(6), 
  6368 ;;  data3           2   52[COMRAM] PTR unsigned char 
  6369 ;;		 -> STR_29(4), STR_24(4), STR_21(4), com_command_setEnergyUsed@temp(12), 
  6370 ;;		 -> com_command_setPower@temp(12), 
  6371 ;; Auto vars:     Size  Location     Type
  6372 ;;  xsum            2   54[COMRAM] int 
  6373 ;; Return value:  Size  Location     Type
  6374 ;;                  1    wreg      void 
  6375 ;; Registers used:
  6376 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6377 ;; Tracked objects:
  6378 ;;		On entry : 0/0
  6379 ;;		On exit  : 0/0
  6380 ;;		Unchanged: 0/0
  6381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6382 ;;      Params:         8       0       0       0       0       0       0
  6383 ;;      Locals:         2       0       0       0       0       0       0
  6384 ;;      Temps:          0       0       0       0       0       0       0
  6385 ;;      Totals:        10       0       0       0       0       0       0
  6386 ;;Total ram usage:       10 bytes
  6387 ;; Hardware stack levels used:    1
  6388 ;; Hardware stack levels required when called:    5
  6389 ;; This function calls:
  6390 ;;		_command_builder_add_char
  6391 ;;		_command_builder_add_string
  6392 ;;		_xsum_builder
  6393 ;; This function is called by:
  6394 ;;		_com_command_setPower
  6395 ;;		_com_command_setEnergyUsed
  6396 ;;		_com_command_setVersion
  6397 ;;		_com_command_setVolts
  6398 ;;		_com_command_setAmps
  6399 ;; This function uses a non-reentrant model
  6400 ;;
  6401                           
  6402                           	psect	text45
  6403  000F3A                     __ptext45:
  6404                           	opt stack 0
  6405  000F3A                     _command_builder3:
  6406                           	opt stack 21
  6407                           
  6408                           ;SlaveComm.c: 438: command_builder_add_char( send_buffer, '#' );
  6409                           
  6410                           ;incstack = 0
  6411  000F3A  C02F  F013         	movff	command_builder3@send_buffer,command_builder_add_char@send_buffer
  6412  000F3E  C030  F014         	movff	command_builder3@send_buffer+1,command_builder_add_char@send_buffer+1
  6413  000F42  0E23               	movlw	35
  6414  000F44  6E15               	movwf	command_builder_add_char@data,c
  6415  000F46  ECAC  F00C         	call	_command_builder_add_char	;wreg free
  6416                           
  6417                           ;SlaveComm.c: 439: command_builder_add_char( send_buffer, '!' );
  6418  000F4A  C02F  F013         	movff	command_builder3@send_buffer,command_builder_add_char@send_buffer
  6419  000F4E  C030  F014         	movff	command_builder3@send_buffer+1,command_builder_add_char@send_buffer+1
  6420  000F52  0E21               	movlw	33
  6421  000F54  6E15               	movwf	command_builder_add_char@data,c
  6422  000F56  ECAC  F00C         	call	_command_builder_add_char	;wreg free
  6423                           
  6424                           ;SlaveComm.c: 440: int xsum = 0;
  6425  000F5A  0E00               	movlw	0
  6426  000F5C  6E38               	movwf	command_builder3@xsum+1,c
  6427  000F5E  0E00               	movlw	0
  6428  000F60  6E37               	movwf	command_builder3@xsum,c
  6429                           
  6430                           ;SlaveComm.c: 441: xsum += command_builder_add_string( send_buffer, data1 );
  6431  000F62  C02F  F017         	movff	command_builder3@send_buffer,command_builder_add_string@send_buffer
  6432  000F66  C030  F018         	movff	command_builder3@send_buffer+1,command_builder_add_string@send_buffer+1
  6433  000F6A  C031  F019         	movff	command_builder3@data1,command_builder_add_string@data_string
  6434  000F6E  C032  F01A         	movff	command_builder3@data1+1,command_builder_add_string@data_string+1
  6435  000F72  EC5E  F00A         	call	_command_builder_add_string	;wreg free
  6436  000F76  5017               	movf	?_command_builder_add_string,w,c
  6437  000F78  2637               	addwf	command_builder3@xsum,f,c
  6438  000F7A  5018               	movf	?_command_builder_add_string+1,w,c
  6439  000F7C  2238               	addwfc	command_builder3@xsum+1,f,c
  6440                           
  6441                           ;SlaveComm.c: 442: xsum += command_builder_add_char( send_buffer, ';' );
  6442  000F7E  C02F  F013         	movff	command_builder3@send_buffer,command_builder_add_char@send_buffer
  6443  000F82  C030  F014         	movff	command_builder3@send_buffer+1,command_builder_add_char@send_buffer+1
  6444  000F86  0E3B               	movlw	59
  6445  000F88  6E15               	movwf	command_builder_add_char@data,c
  6446  000F8A  ECAC  F00C         	call	_command_builder_add_char	;wreg free
  6447  000F8E  5013               	movf	?_command_builder_add_char,w,c
  6448  000F90  2637               	addwf	command_builder3@xsum,f,c
  6449  000F92  5014               	movf	?_command_builder_add_char+1,w,c
  6450  000F94  2238               	addwfc	command_builder3@xsum+1,f,c
  6451                           
  6452                           ;SlaveComm.c: 443: xsum += command_builder_add_string( send_buffer, data2 );
  6453  000F96  C02F  F017         	movff	command_builder3@send_buffer,command_builder_add_string@send_buffer
  6454  000F9A  C030  F018         	movff	command_builder3@send_buffer+1,command_builder_add_string@send_buffer+1
  6455  000F9E  C033  F019         	movff	command_builder3@data2,command_builder_add_string@data_string
  6456  000FA2  C034  F01A         	movff	command_builder3@data2+1,command_builder_add_string@data_string+1
  6457  000FA6  EC5E  F00A         	call	_command_builder_add_string	;wreg free
  6458  000FAA  5017               	movf	?_command_builder_add_string,w,c
  6459  000FAC  2637               	addwf	command_builder3@xsum,f,c
  6460  000FAE  5018               	movf	?_command_builder_add_string+1,w,c
  6461  000FB0  2238               	addwfc	command_builder3@xsum+1,f,c
  6462                           
  6463                           ;SlaveComm.c: 444: xsum += command_builder_add_char( send_buffer, ';' );
  6464  000FB2  C02F  F013         	movff	command_builder3@send_buffer,command_builder_add_char@send_buffer
  6465  000FB6  C030  F014         	movff	command_builder3@send_buffer+1,command_builder_add_char@send_buffer+1
  6466  000FBA  0E3B               	movlw	59
  6467  000FBC  6E15               	movwf	command_builder_add_char@data,c
  6468  000FBE  ECAC  F00C         	call	_command_builder_add_char	;wreg free
  6469  000FC2  5013               	movf	?_command_builder_add_char,w,c
  6470  000FC4  2637               	addwf	command_builder3@xsum,f,c
  6471  000FC6  5014               	movf	?_command_builder_add_char+1,w,c
  6472  000FC8  2238               	addwfc	command_builder3@xsum+1,f,c
  6473                           
  6474                           ;SlaveComm.c: 445: xsum += command_builder_add_string( send_buffer, data3 );
  6475  000FCA  C02F  F017         	movff	command_builder3@send_buffer,command_builder_add_string@send_buffer
  6476  000FCE  C030  F018         	movff	command_builder3@send_buffer+1,command_builder_add_string@send_buffer+1
  6477  000FD2  C035  F019         	movff	command_builder3@data3,command_builder_add_string@data_string
  6478  000FD6  C036  F01A         	movff	command_builder3@data3+1,command_builder_add_string@data_string+1
  6479  000FDA  EC5E  F00A         	call	_command_builder_add_string	;wreg free
  6480  000FDE  5017               	movf	?_command_builder_add_string,w,c
  6481  000FE0  2637               	addwf	command_builder3@xsum,f,c
  6482  000FE2  5018               	movf	?_command_builder_add_string+1,w,c
  6483  000FE4  2238               	addwfc	command_builder3@xsum+1,f,c
  6484                           
  6485                           ;SlaveComm.c: 446: xsum_builder( send_buffer, xsum );
  6486  000FE6  C02F  F02B         	movff	command_builder3@send_buffer,xsum_builder@send_buffer
  6487  000FEA  C030  F02C         	movff	command_builder3@send_buffer+1,xsum_builder@send_buffer+1
  6488  000FEE  C037  F02D         	movff	command_builder3@xsum,xsum_builder@xsum
  6489  000FF2  C038  F02E         	movff	command_builder3@xsum+1,xsum_builder@xsum+1
  6490  000FF6  EC7B  F00C         	call	_xsum_builder	;wreg free
  6491  000FFA  0012               	return	
  6492  000FFC                     __end_of_command_builder3:
  6493                           	opt stack 0
  6494                           tblptru	equ	0xFF8
  6495                           tblptrh	equ	0xFF7
  6496                           tblptrl	equ	0xFF6
  6497                           tablat	equ	0xFF5
  6498                           prodh	equ	0xFF4
  6499                           prodl	equ	0xFF3
  6500                           intcon	equ	0xFF2
  6501                           intcon2	equ	0xFF1
  6502                           intcon3	equ	0xFF0
  6503                           postinc0	equ	0xFEE
  6504                           wreg	equ	0xFE8
  6505                           postinc1	equ	0xFE6
  6506                           fsr1h	equ	0xFE2
  6507                           fsr1l	equ	0xFE1
  6508                           indf2	equ	0xFDF
  6509                           postinc2	equ	0xFDE
  6510                           postdec2	equ	0xFDD
  6511                           fsr2h	equ	0xFDA
  6512                           fsr2l	equ	0xFD9
  6513                           status	equ	0xFD8
  6514                           
  6515 ;; *************** function _xsum_builder *****************
  6516 ;; Defined at:
  6517 ;;		line 468 in file "SlaveComm.c"
  6518 ;; Parameters:    Size  Location     Type
  6519 ;;  send_buffer     2   42[COMRAM] PTR struct buffer
  6520 ;;		 -> communications@send_buffer(42), 
  6521 ;;  xsum            2   44[COMRAM] int 
  6522 ;; Auto vars:     Size  Location     Type
  6523 ;;  xsumBuf        16    0[BANK0 ] unsigned char [16]
  6524 ;; Return value:  Size  Location     Type
  6525 ;;                  1    wreg      void 
  6526 ;; Registers used:
  6527 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6528 ;; Tracked objects:
  6529 ;;		On entry : 0/0
  6530 ;;		On exit  : 0/0
  6531 ;;		Unchanged: 0/0
  6532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6533 ;;      Params:         4       0       0       0       0       0       0
  6534 ;;      Locals:         0      16       0       0       0       0       0
  6535 ;;      Temps:          0       0       0       0       0       0       0
  6536 ;;      Totals:         4      16       0       0       0       0       0
  6537 ;;Total ram usage:       20 bytes
  6538 ;; Hardware stack levels used:    1
  6539 ;; Hardware stack levels required when called:    4
  6540 ;; This function calls:
  6541 ;;		_command_builder_add_char
  6542 ;;		_command_builder_add_string
  6543 ;;		_itoa
  6544 ;; This function is called by:
  6545 ;;		_command_builder1
  6546 ;;		_command_builder3
  6547 ;;		_command_builder2
  6548 ;;		_command_builder4
  6549 ;; This function uses a non-reentrant model
  6550 ;;
  6551                           
  6552                           	psect	text46
  6553  0018F6                     __ptext46:
  6554                           	opt stack 0
  6555  0018F6                     _xsum_builder:
  6556                           	opt stack 21
  6557                           
  6558                           ;SlaveComm.c: 471: command_builder_add_char( send_buffer, ';' );
  6559                           
  6560                           ;incstack = 0
  6561  0018F6  C02B  F013         	movff	xsum_builder@send_buffer,command_builder_add_char@send_buffer
  6562  0018FA  C02C  F014         	movff	xsum_builder@send_buffer+1,command_builder_add_char@send_buffer+1
  6563  0018FE  0E3B               	movlw	59
  6564  001900  6E15               	movwf	command_builder_add_char@data,c
  6565  001902  ECAC  F00C         	call	_command_builder_add_char	;wreg free
  6566                           
  6567                           ;SlaveComm.c: 472: command_builder_add_char( send_buffer, '$' );
  6568  001906  C02B  F013         	movff	xsum_builder@send_buffer,command_builder_add_char@send_buffer
  6569  00190A  C02C  F014         	movff	xsum_builder@send_buffer+1,command_builder_add_char@send_buffer+1
  6570  00190E  0E24               	movlw	36
  6571  001910  6E15               	movwf	command_builder_add_char@data,c
  6572  001912  ECAC  F00C         	call	_command_builder_add_char	;wreg free
  6573                           
  6574                           ;SlaveComm.c: 473: char xsumBuf[16];
  6575                           ;SlaveComm.c: 474: itoa( xsumBuf, xsum, 10 );
  6576  001916  0EAE               	movlw	low xsum_builder@xsumBuf
  6577  001918  6E23               	movwf	itoa@buf,c
  6578  00191A  0E00               	movlw	high xsum_builder@xsumBuf
  6579  00191C  6E24               	movwf	itoa@buf+1,c
  6580  00191E  C02D  F025         	movff	xsum_builder@xsum,itoa@val
  6581  001922  C02E  F026         	movff	xsum_builder@xsum+1,itoa@val+1
  6582  001926  0E00               	movlw	0
  6583  001928  6E28               	movwf	itoa@base+1,c
  6584  00192A  0E0A               	movlw	10
  6585  00192C  6E27               	movwf	itoa@base,c
  6586  00192E  ECF1  F00D         	call	_itoa	;wreg free
  6587                           
  6588                           ;SlaveComm.c: 475: command_builder_add_string( send_buffer, xsumBuf );
  6589  001932  C02B  F017         	movff	xsum_builder@send_buffer,command_builder_add_string@send_buffer
  6590  001936  C02C  F018         	movff	xsum_builder@send_buffer+1,command_builder_add_string@send_buffer+1
  6591  00193A  0EAE               	movlw	low xsum_builder@xsumBuf
  6592  00193C  6E19               	movwf	command_builder_add_string@data_string,c
  6593  00193E  0E00               	movlw	high xsum_builder@xsumBuf
  6594  001940  6E1A               	movwf	command_builder_add_string@data_string+1,c
  6595  001942  EC5E  F00A         	call	_command_builder_add_string	;wreg free
  6596                           
  6597                           ;SlaveComm.c: 477: command_builder_add_char( send_buffer, '*' );
  6598  001946  C02B  F013         	movff	xsum_builder@send_buffer,command_builder_add_char@send_buffer
  6599  00194A  C02C  F014         	movff	xsum_builder@send_buffer+1,command_builder_add_char@send_buffer+1
  6600  00194E  0E2A               	movlw	42
  6601  001950  6E15               	movwf	command_builder_add_char@data,c
  6602  001952  ECAC  F00C         	call	_command_builder_add_char	;wreg free
  6603  001956  0012               	return	
  6604  001958                     __end_of_xsum_builder:
  6605                           	opt stack 0
  6606                           tblptru	equ	0xFF8
  6607                           tblptrh	equ	0xFF7
  6608                           tblptrl	equ	0xFF6
  6609                           tablat	equ	0xFF5
  6610                           prodh	equ	0xFF4
  6611                           prodl	equ	0xFF3
  6612                           intcon	equ	0xFF2
  6613                           intcon2	equ	0xFF1
  6614                           intcon3	equ	0xFF0
  6615                           postinc0	equ	0xFEE
  6616                           wreg	equ	0xFE8
  6617                           postinc1	equ	0xFE6
  6618                           fsr1h	equ	0xFE2
  6619                           fsr1l	equ	0xFE1
  6620                           indf2	equ	0xFDF
  6621                           postinc2	equ	0xFDE
  6622                           postdec2	equ	0xFDD
  6623                           fsr2h	equ	0xFDA
  6624                           fsr2l	equ	0xFD9
  6625                           status	equ	0xFD8
  6626                           
  6627 ;; *************** function _itoa *****************
  6628 ;; Defined at:
  6629 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
  6630 ;; Parameters:    Size  Location     Type
  6631 ;;  buf             2   34[COMRAM] PTR unsigned char 
  6632 ;;		 -> xsum_builder@xsumBuf(16), 
  6633 ;;  val             2   36[COMRAM] int 
  6634 ;;  base            2   38[COMRAM] int 
  6635 ;; Auto vars:     Size  Location     Type
  6636 ;;  cp              2   40[COMRAM] PTR unsigned char 
  6637 ;;		 -> xsum_builder@xsumBuf(16), 
  6638 ;; Return value:  Size  Location     Type
  6639 ;;                  2   34[COMRAM] PTR unsigned char 
  6640 ;; Registers used:
  6641 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6642 ;; Tracked objects:
  6643 ;;		On entry : 0/0
  6644 ;;		On exit  : 0/0
  6645 ;;		Unchanged: 0/0
  6646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6647 ;;      Params:         6       0       0       0       0       0       0
  6648 ;;      Locals:         2       0       0       0       0       0       0
  6649 ;;      Temps:          0       0       0       0       0       0       0
  6650 ;;      Totals:         8       0       0       0       0       0       0
  6651 ;;Total ram usage:        8 bytes
  6652 ;; Hardware stack levels used:    1
  6653 ;; Hardware stack levels required when called:    3
  6654 ;; This function calls:
  6655 ;;		_utoa
  6656 ;; This function is called by:
  6657 ;;		_xsum_builder
  6658 ;; This function uses a non-reentrant model
  6659 ;;
  6660                           
  6661                           	psect	text47
  6662  001BE2                     __ptext47:
  6663                           	opt stack 0
  6664  001BE2                     _itoa:
  6665                           	opt stack 21
  6666                           
  6667                           ;incstack = 0
  6668  001BE2  C023  F029         	movff	itoa@buf,itoa@cp
  6669  001BE6  C024  F02A         	movff	itoa@buf+1,itoa@cp+1
  6670  001BEA  AE26               	btfss	itoa@val+1,7,c
  6671  001BEC  D00C               	goto	l930
  6672  001BEE  C023  FFD9         	movff	itoa@buf,fsr2l
  6673  001BF2  C024  FFDA         	movff	itoa@buf+1,fsr2h
  6674  001BF6  0E2D               	movlw	45
  6675  001BF8  6EDF               	movwf	indf2,c
  6676  001BFA  4A23               	infsnz	itoa@buf,f,c
  6677  001BFC  2A24               	incf	itoa@buf+1,f,c
  6678  001BFE  6C25               	negf	itoa@val,c
  6679  001C00  1E26               	comf	itoa@val+1,f,c
  6680  001C02  B0D8               	btfsc	status,0,c
  6681  001C04  2A26               	incf	itoa@val+1,f,c
  6682  001C06                     l930:
  6683  001C06  C023  F01A         	movff	itoa@buf,utoa@buf
  6684  001C0A  C024  F01B         	movff	itoa@buf+1,utoa@buf+1
  6685  001C0E  C025  F01C         	movff	itoa@val,utoa@val
  6686  001C12  C026  F01D         	movff	itoa@val+1,utoa@val+1
  6687  001C16  C027  F01E         	movff	itoa@base,utoa@base
  6688  001C1A  C028  F01F         	movff	itoa@base+1,utoa@base+1
  6689  001C1E  EC70  F009         	call	_utoa	;wreg free
  6690  001C22  0012               	return	
  6691  001C24                     __end_of_itoa:
  6692                           	opt stack 0
  6693                           tblptru	equ	0xFF8
  6694                           tblptrh	equ	0xFF7
  6695                           tblptrl	equ	0xFF6
  6696                           tablat	equ	0xFF5
  6697                           prodh	equ	0xFF4
  6698                           prodl	equ	0xFF3
  6699                           intcon	equ	0xFF2
  6700                           intcon2	equ	0xFF1
  6701                           intcon3	equ	0xFF0
  6702                           postinc0	equ	0xFEE
  6703                           wreg	equ	0xFE8
  6704                           postinc1	equ	0xFE6
  6705                           fsr1h	equ	0xFE2
  6706                           fsr1l	equ	0xFE1
  6707                           indf2	equ	0xFDF
  6708                           postinc2	equ	0xFDE
  6709                           postdec2	equ	0xFDD
  6710                           fsr2h	equ	0xFDA
  6711                           fsr2l	equ	0xFD9
  6712                           status	equ	0xFD8
  6713                           
  6714 ;; *************** function _utoa *****************
  6715 ;; Defined at:
  6716 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\itoa.c"
  6717 ;; Parameters:    Size  Location     Type
  6718 ;;  buf             2   25[COMRAM] PTR unsigned char 
  6719 ;;		 -> xsum_builder@xsumBuf(16), 
  6720 ;;  val             2   27[COMRAM] unsigned int 
  6721 ;;  base            2   29[COMRAM] int 
  6722 ;; Auto vars:     Size  Location     Type
  6723 ;;  v               2   31[COMRAM] unsigned int 
  6724 ;;  c               1   33[COMRAM] unsigned char 
  6725 ;; Return value:  Size  Location     Type
  6726 ;;                  2   25[COMRAM] PTR unsigned char 
  6727 ;; Registers used:
  6728 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6729 ;; Tracked objects:
  6730 ;;		On entry : 0/0
  6731 ;;		On exit  : 0/0
  6732 ;;		Unchanged: 0/0
  6733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6734 ;;      Params:         6       0       0       0       0       0       0
  6735 ;;      Locals:         3       0       0       0       0       0       0
  6736 ;;      Temps:          0       0       0       0       0       0       0
  6737 ;;      Totals:         9       0       0       0       0       0       0
  6738 ;;Total ram usage:        9 bytes
  6739 ;; Hardware stack levels used:    1
  6740 ;; Hardware stack levels required when called:    2
  6741 ;; This function calls:
  6742 ;;		___lwdiv
  6743 ;;		___lwmod
  6744 ;; This function is called by:
  6745 ;;		_itoa
  6746 ;; This function uses a non-reentrant model
  6747 ;;
  6748                           
  6749                           	psect	text48
  6750  0012E0                     __ptext48:
  6751                           	opt stack 0
  6752  0012E0                     _utoa:
  6753                           	opt stack 21
  6754                           
  6755                           ;incstack = 0
  6756  0012E0  C01C  F020         	movff	utoa@val,utoa@v
  6757  0012E4  C01D  F021         	movff	utoa@val+1,utoa@v+1
  6758  0012E8  C020  F013         	movff	utoa@v,___lwdiv@dividend
  6759  0012EC  C021  F014         	movff	utoa@v+1,___lwdiv@dividend+1
  6760  0012F0  C01E  F015         	movff	utoa@base,___lwdiv@divisor
  6761  0012F4  C01F  F016         	movff	utoa@base+1,___lwdiv@divisor+1
  6762  0012F8  EC32  F00D         	call	___lwdiv	;wreg free
  6763  0012FC  C013  F020         	movff	?___lwdiv,utoa@v
  6764  001300  C014  F021         	movff	?___lwdiv+1,utoa@v+1
  6765  001304  4A1A               	infsnz	utoa@buf,f,c
  6766  001306  2A1B               	incf	utoa@buf+1,f,c
  6767  001308  5020               	movf	utoa@v,w,c
  6768  00130A  1021               	iorwf	utoa@v+1,w,c
  6769  00130C  A4D8               	btfss	status,2,c
  6770  00130E  D7EC               	goto	l934
  6771  001310  C01A  FFD9         	movff	utoa@buf,fsr2l
  6772  001314  C01B  FFDA         	movff	utoa@buf+1,fsr2h
  6773  001318  0E00               	movlw	0
  6774  00131A  6EDF               	movwf	indf2,c
  6775  00131C  061A               	decf	utoa@buf,f,c
  6776  00131E  A0D8               	btfss	status,0,c
  6777  001320  061B               	decf	utoa@buf+1,f,c
  6778  001322  C01C  F013         	movff	utoa@val,___lwmod@dividend
  6779  001326  C01D  F014         	movff	utoa@val+1,___lwmod@dividend+1
  6780  00132A  C01E  F015         	movff	utoa@base,___lwmod@divisor
  6781  00132E  C01F  F016         	movff	utoa@base+1,___lwmod@divisor+1
  6782  001332  EC12  F00E         	call	___lwmod	;wreg free
  6783  001336  5013               	movf	?___lwmod,w,c
  6784  001338  6E22               	movwf	utoa@c,c
  6785  00133A  C01C  F013         	movff	utoa@val,___lwdiv@dividend
  6786  00133E  C01D  F014         	movff	utoa@val+1,___lwdiv@dividend+1
  6787  001342  C01E  F015         	movff	utoa@base,___lwdiv@divisor
  6788  001346  C01F  F016         	movff	utoa@base+1,___lwdiv@divisor+1
  6789  00134A  EC32  F00D         	call	___lwdiv	;wreg free
  6790  00134E  C013  F01C         	movff	?___lwdiv,utoa@val
  6791  001352  C014  F01D         	movff	?___lwdiv+1,utoa@val+1
  6792  001356  0E09               	movlw	9
  6793  001358  6422               	cpfsgt	utoa@c,c
  6794  00135A  D002               	goto	l937
  6795  00135C  0E07               	movlw	7
  6796  00135E  2622               	addwf	utoa@c,f,c
  6797  001360                     l937:
  6798  001360  0E30               	movlw	48
  6799  001362  2622               	addwf	utoa@c,f,c
  6800  001364  C01A  FFD9         	movff	utoa@buf,fsr2l
  6801  001368  C01B  FFDA         	movff	utoa@buf+1,fsr2h
  6802  00136C  C022  FFDF         	movff	utoa@c,indf2
  6803  001370  061A               	decf	utoa@buf,f,c
  6804  001372  A0D8               	btfss	status,0,c
  6805  001374  061B               	decf	utoa@buf+1,f,c
  6806  001376  501C               	movf	utoa@val,w,c
  6807  001378  101D               	iorwf	utoa@val+1,w,c
  6808  00137A  A4D8               	btfss	status,2,c
  6809  00137C  D7D2               	goto	l936
  6810                           
  6811                           ;	Return value of _utoa is never used
  6812  00137E  4A1A               	infsnz	utoa@buf,f,c
  6813  001380  2A1B               	incf	utoa@buf+1,f,c
  6814  001382  0012               	return	
  6815  001384                     __end_of_utoa:
  6816                           	opt stack 0
  6817                           tblptru	equ	0xFF8
  6818                           tblptrh	equ	0xFF7
  6819                           tblptrl	equ	0xFF6
  6820                           tablat	equ	0xFF5
  6821                           prodh	equ	0xFF4
  6822                           prodl	equ	0xFF3
  6823                           intcon	equ	0xFF2
  6824                           intcon2	equ	0xFF1
  6825                           intcon3	equ	0xFF0
  6826                           postinc0	equ	0xFEE
  6827                           wreg	equ	0xFE8
  6828                           postinc1	equ	0xFE6
  6829                           fsr1h	equ	0xFE2
  6830                           fsr1l	equ	0xFE1
  6831                           indf2	equ	0xFDF
  6832                           postinc2	equ	0xFDE
  6833                           postdec2	equ	0xFDD
  6834                           fsr2h	equ	0xFDA
  6835                           fsr2l	equ	0xFD9
  6836                           status	equ	0xFD8
  6837                           
  6838 ;; *************** function ___lwmod *****************
  6839 ;; Defined at:
  6840 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  6841 ;; Parameters:    Size  Location     Type
  6842 ;;  dividend        2   18[COMRAM] unsigned int 
  6843 ;;  divisor         2   20[COMRAM] unsigned int 
  6844 ;; Auto vars:     Size  Location     Type
  6845 ;;  counter         1   22[COMRAM] unsigned char 
  6846 ;; Return value:  Size  Location     Type
  6847 ;;                  2   18[COMRAM] unsigned int 
  6848 ;; Registers used:
  6849 ;;		wreg, status,2, status,0
  6850 ;; Tracked objects:
  6851 ;;		On entry : 0/0
  6852 ;;		On exit  : 0/0
  6853 ;;		Unchanged: 0/0
  6854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6855 ;;      Params:         4       0       0       0       0       0       0
  6856 ;;      Locals:         1       0       0       0       0       0       0
  6857 ;;      Temps:          0       0       0       0       0       0       0
  6858 ;;      Totals:         5       0       0       0       0       0       0
  6859 ;;Total ram usage:        5 bytes
  6860 ;; Hardware stack levels used:    1
  6861 ;; Hardware stack levels required when called:    1
  6862 ;; This function calls:
  6863 ;;		Nothing
  6864 ;; This function is called by:
  6865 ;;		_utoa
  6866 ;; This function uses a non-reentrant model
  6867 ;;
  6868                           
  6869                           	psect	text49
  6870  001C24                     __ptext49:
  6871                           	opt stack 0
  6872  001C24                     ___lwmod:
  6873                           	opt stack 21
  6874                           
  6875                           ;incstack = 0
  6876  001C24  5015               	movf	___lwmod@divisor,w,c
  6877  001C26  1016               	iorwf	___lwmod@divisor+1,w,c
  6878  001C28  B4D8               	btfsc	status,2,c
  6879  001C2A  D018               	goto	l1046
  6880  001C2C  0E01               	movlw	1
  6881  001C2E  6E17               	movwf	___lwmod@counter,c
  6882  001C30  D004               	goto	l1041
  6883  001C32  90D8               	bcf	status,0,c
  6884  001C34  3615               	rlcf	___lwmod@divisor,f,c
  6885  001C36  3616               	rlcf	___lwmod@divisor+1,f,c
  6886  001C38  2A17               	incf	___lwmod@counter,f,c
  6887  001C3A                     l1041:
  6888  001C3A  AE16               	btfss	___lwmod@divisor+1,7,c
  6889  001C3C  D7FA               	goto	l1042
  6890  001C3E                     u2210:
  6891  001C3E  5015               	movf	___lwmod@divisor,w,c
  6892  001C40  5C13               	subwf	___lwmod@dividend,w,c
  6893  001C42  5016               	movf	___lwmod@divisor+1,w,c
  6894  001C44  5814               	subwfb	___lwmod@dividend+1,w,c
  6895  001C46  A0D8               	btfss	status,0,c
  6896  001C48  D004               	goto	l1045
  6897  001C4A  5015               	movf	___lwmod@divisor,w,c
  6898  001C4C  5E13               	subwf	___lwmod@dividend,f,c
  6899  001C4E  5016               	movf	___lwmod@divisor+1,w,c
  6900  001C50  5A14               	subwfb	___lwmod@dividend+1,f,c
  6901  001C52                     l1045:
  6902  001C52  90D8               	bcf	status,0,c
  6903  001C54  3216               	rrcf	___lwmod@divisor+1,f,c
  6904  001C56  3215               	rrcf	___lwmod@divisor,f,c
  6905  001C58  2E17               	decfsz	___lwmod@counter,f,c
  6906  001C5A  D7F1               	goto	u2210
  6907  001C5C                     l1046:
  6908  001C5C  C013  F013         	movff	___lwmod@dividend,?___lwmod
  6909  001C60  C014  F014         	movff	___lwmod@dividend+1,?___lwmod+1
  6910  001C64  0012               	return		;funcret
  6911  001C66                     __end_of___lwmod:
  6912                           	opt stack 0
  6913                           tblptru	equ	0xFF8
  6914                           tblptrh	equ	0xFF7
  6915                           tblptrl	equ	0xFF6
  6916                           tablat	equ	0xFF5
  6917                           prodh	equ	0xFF4
  6918                           prodl	equ	0xFF3
  6919                           intcon	equ	0xFF2
  6920                           intcon2	equ	0xFF1
  6921                           intcon3	equ	0xFF0
  6922                           postinc0	equ	0xFEE
  6923                           wreg	equ	0xFE8
  6924                           postinc1	equ	0xFE6
  6925                           fsr1h	equ	0xFE2
  6926                           fsr1l	equ	0xFE1
  6927                           indf2	equ	0xFDF
  6928                           postinc2	equ	0xFDE
  6929                           postdec2	equ	0xFDD
  6930                           fsr2h	equ	0xFDA
  6931                           fsr2l	equ	0xFD9
  6932                           status	equ	0xFD8
  6933                           
  6934 ;; *************** function ___lwdiv *****************
  6935 ;; Defined at:
  6936 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  6937 ;; Parameters:    Size  Location     Type
  6938 ;;  dividend        2   18[COMRAM] unsigned int 
  6939 ;;  divisor         2   20[COMRAM] unsigned int 
  6940 ;; Auto vars:     Size  Location     Type
  6941 ;;  quotient        2   23[COMRAM] unsigned int 
  6942 ;;  counter         1   22[COMRAM] unsigned char 
  6943 ;; Return value:  Size  Location     Type
  6944 ;;                  2   18[COMRAM] unsigned int 
  6945 ;; Registers used:
  6946 ;;		wreg, status,2, status,0
  6947 ;; Tracked objects:
  6948 ;;		On entry : 0/0
  6949 ;;		On exit  : 0/0
  6950 ;;		Unchanged: 0/0
  6951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6952 ;;      Params:         4       0       0       0       0       0       0
  6953 ;;      Locals:         3       0       0       0       0       0       0
  6954 ;;      Temps:          0       0       0       0       0       0       0
  6955 ;;      Totals:         7       0       0       0       0       0       0
  6956 ;;Total ram usage:        7 bytes
  6957 ;; Hardware stack levels used:    1
  6958 ;; Hardware stack levels required when called:    1
  6959 ;; This function calls:
  6960 ;;		Nothing
  6961 ;; This function is called by:
  6962 ;;		_utoa
  6963 ;; This function uses a non-reentrant model
  6964 ;;
  6965                           
  6966                           	psect	text50
  6967  001A64                     __ptext50:
  6968                           	opt stack 0
  6969  001A64                     ___lwdiv:
  6970                           	opt stack 21
  6971                           
  6972                           ;incstack = 0
  6973  001A64  0E00               	movlw	0
  6974  001A66  6E19               	movwf	___lwdiv@quotient+1,c
  6975  001A68  0E00               	movlw	0
  6976  001A6A  6E18               	movwf	___lwdiv@quotient,c
  6977  001A6C  5015               	movf	___lwdiv@divisor,w,c
  6978  001A6E  1016               	iorwf	___lwdiv@divisor+1,w,c
  6979  001A70  B4D8               	btfsc	status,2,c
  6980  001A72  D01C               	goto	l1036
  6981  001A74  0E01               	movlw	1
  6982  001A76  6E17               	movwf	___lwdiv@counter,c
  6983  001A78  D004               	goto	l1031
  6984  001A7A  90D8               	bcf	status,0,c
  6985  001A7C  3615               	rlcf	___lwdiv@divisor,f,c
  6986  001A7E  3616               	rlcf	___lwdiv@divisor+1,f,c
  6987  001A80  2A17               	incf	___lwdiv@counter,f,c
  6988  001A82                     l1031:
  6989  001A82  AE16               	btfss	___lwdiv@divisor+1,7,c
  6990  001A84  D7FA               	goto	l1032
  6991  001A86                     u2180:
  6992  001A86  90D8               	bcf	status,0,c
  6993  001A88  3618               	rlcf	___lwdiv@quotient,f,c
  6994  001A8A  3619               	rlcf	___lwdiv@quotient+1,f,c
  6995  001A8C  5015               	movf	___lwdiv@divisor,w,c
  6996  001A8E  5C13               	subwf	___lwdiv@dividend,w,c
  6997  001A90  5016               	movf	___lwdiv@divisor+1,w,c
  6998  001A92  5814               	subwfb	___lwdiv@dividend+1,w,c
  6999  001A94  A0D8               	btfss	status,0,c
  7000  001A96  D005               	goto	l1035
  7001  001A98  5015               	movf	___lwdiv@divisor,w,c
  7002  001A9A  5E13               	subwf	___lwdiv@dividend,f,c
  7003  001A9C  5016               	movf	___lwdiv@divisor+1,w,c
  7004  001A9E  5A14               	subwfb	___lwdiv@dividend+1,f,c
  7005  001AA0  8018               	bsf	___lwdiv@quotient,0,c
  7006  001AA2                     l1035:
  7007  001AA2  90D8               	bcf	status,0,c
  7008  001AA4  3216               	rrcf	___lwdiv@divisor+1,f,c
  7009  001AA6  3215               	rrcf	___lwdiv@divisor,f,c
  7010  001AA8  2E17               	decfsz	___lwdiv@counter,f,c
  7011  001AAA  D7ED               	goto	u2180
  7012  001AAC                     l1036:
  7013  001AAC  C018  F013         	movff	___lwdiv@quotient,?___lwdiv
  7014  001AB0  C019  F014         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7015  001AB4  0012               	return		;funcret
  7016  001AB6                     __end_of___lwdiv:
  7017                           	opt stack 0
  7018                           tblptru	equ	0xFF8
  7019                           tblptrh	equ	0xFF7
  7020                           tblptrl	equ	0xFF6
  7021                           tablat	equ	0xFF5
  7022                           prodh	equ	0xFF4
  7023                           prodl	equ	0xFF3
  7024                           intcon	equ	0xFF2
  7025                           intcon2	equ	0xFF1
  7026                           intcon3	equ	0xFF0
  7027                           postinc0	equ	0xFEE
  7028                           wreg	equ	0xFE8
  7029                           postinc1	equ	0xFE6
  7030                           fsr1h	equ	0xFE2
  7031                           fsr1l	equ	0xFE1
  7032                           indf2	equ	0xFDF
  7033                           postinc2	equ	0xFDE
  7034                           postdec2	equ	0xFDD
  7035                           fsr2h	equ	0xFDA
  7036                           fsr2l	equ	0xFD9
  7037                           status	equ	0xFD8
  7038                           
  7039 ;; *************** function _command_builder_add_string *****************
  7040 ;; Defined at:
  7041 ;;		line 495 in file "SlaveComm.c"
  7042 ;; Parameters:    Size  Location     Type
  7043 ;;  send_buffer     2   22[COMRAM] PTR struct buffer
  7044 ;;		 -> communications@send_buffer(42), 
  7045 ;;  data_string     2   24[COMRAM] PTR unsigned char 
  7046 ;;		 -> STR_29(4), STR_28(10), STR_27(4), STR_26(12), 
  7047 ;;		 -> STR_25(5), STR_24(4), STR_23(5), STR_22(4), 
  7048 ;;		 -> STR_21(4), STR_20(6), STR_19(4), STR_18(7), 
  7049 ;;		 -> STR_17(4), com_command_setEnergyUsed@temp(12), STR_16(6), STR_15(4), 
  7050 ;;		 -> com_command_setPower@temp(12), STR_14(5), STR_13(5), STR_12(4), 
  7051 ;;		 -> xsum_builder@xsumBuf(16), 
  7052 ;; Auto vars:     Size  Location     Type
  7053 ;;  inx             2   30[COMRAM] int 
  7054 ;;  xsumAdd         2   28[COMRAM] int 
  7055 ;; Return value:  Size  Location     Type
  7056 ;;                  2   22[COMRAM] int 
  7057 ;; Registers used:
  7058 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7059 ;; Tracked objects:
  7060 ;;		On entry : 0/0
  7061 ;;		On exit  : 0/0
  7062 ;;		Unchanged: 0/0
  7063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7064 ;;      Params:         4       0       0       0       0       0       0
  7065 ;;      Locals:         4       0       0       0       0       0       0
  7066 ;;      Temps:          2       0       0       0       0       0       0
  7067 ;;      Totals:        10       0       0       0       0       0       0
  7068 ;;Total ram usage:       10 bytes
  7069 ;; Hardware stack levels used:    1
  7070 ;; Hardware stack levels required when called:    2
  7071 ;; This function calls:
  7072 ;;		_command_builder_add_char
  7073 ;; This function is called by:
  7074 ;;		_command_builder1
  7075 ;;		_command_builder3
  7076 ;;		_xsum_builder
  7077 ;;		_command_builder2
  7078 ;;		_command_builder4
  7079 ;; This function uses a non-reentrant model
  7080 ;;
  7081                           
  7082                           	psect	text51
  7083  0014BC                     __ptext51:
  7084                           	opt stack 0
  7085  0014BC                     _command_builder_add_string:
  7086                           	opt stack 22
  7087                           
  7088                           ;SlaveComm.c: 497: int xsumAdd = 0;
  7089                           
  7090                           ;incstack = 0
  7091  0014BC  0E00               	movlw	0
  7092  0014BE  6E1E               	movwf	command_builder_add_string@xsumAdd+1,c
  7093  0014C0  0E00               	movlw	0
  7094  0014C2  6E1D               	movwf	command_builder_add_string@xsumAdd,c
  7095                           
  7096                           ;SlaveComm.c: 499: for( int inx = 0; data_string[inx] != '\0'; inx++ )
  7097  0014C4  0E00               	movlw	0
  7098  0014C6  6E20               	movwf	command_builder_add_string@inx+1,c
  7099  0014C8  0E00               	movlw	0
  7100  0014CA  6E1F               	movwf	command_builder_add_string@inx,c
  7101  0014CC  D023               	goto	l293
  7102  0014CE                     
  7103                           ;SlaveComm.c: 500: {
  7104                           ;SlaveComm.c: 501: xsumAdd += command_builder_add_char( send_buffer, data_string[inx] );
  7105  0014CE  C017  F013         	movff	command_builder_add_string@send_buffer,command_builder_add_char@send_buffer
  7106  0014D2  C018  F014         	movff	command_builder_add_string@send_buffer+1,command_builder_add_char@send_buffer+1
  7107  0014D6  501F               	movf	command_builder_add_string@inx,w,c
  7108  0014D8  2419               	addwf	command_builder_add_string@data_string,w,c
  7109  0014DA  6E1B               	movwf	??_command_builder_add_string& (0+255),c
  7110  0014DC  5020               	movf	command_builder_add_string@inx+1,w,c
  7111  0014DE  201A               	addwfc	command_builder_add_string@data_string+1,w,c
  7112  0014E0  6E1C               	movwf	(??_command_builder_add_string+1)& (0+255),c
  7113  0014E2  C01B  FFF6         	movff	??_command_builder_add_string,tblptrl
  7114  0014E6  C01C  FFF7         	movff	??_command_builder_add_string+1,tblptrh
  7115  0014EA  6AF8               	clrf	tblptru,c
  7116  0014EC  0E05               	movlw	(high __ramtop+-1)
  7117  0014EE  64F7               	cpfsgt	tblptrh,c
  7118  0014F0  D003               	bra	u2277
  7119  0014F2  0008               	tblrd		*
  7120  0014F4  50F5               	movf	tablat,w,c
  7121  0014F6  D005               	bra	u2270
  7122  0014F8                     u2277:
  7123  0014F8  CFF6 FFE1          	movff	tblptrl,fsr1l
  7124  0014FC  CFF7 FFE2          	movff	tblptrh,fsr1h
  7125  001500  50E7               	movf	indf1,w,c
  7126  001502                     u2270:
  7127  001502  6E15               	movwf	command_builder_add_char@data,c
  7128  001504  ECAC  F00C         	call	_command_builder_add_char	;wreg free
  7129  001508  5013               	movf	?_command_builder_add_char,w,c
  7130  00150A  261D               	addwf	command_builder_add_string@xsumAdd,f,c
  7131  00150C  5014               	movf	?_command_builder_add_char+1,w,c
  7132  00150E  221E               	addwfc	command_builder_add_string@xsumAdd+1,f,c
  7133  001510  4A1F               	infsnz	command_builder_add_string@inx,f,c
  7134  001512  2A20               	incf	command_builder_add_string@inx+1,f,c
  7135  001514                     l293:
  7136  001514  501F               	movf	command_builder_add_string@inx,w,c
  7137  001516  2419               	addwf	command_builder_add_string@data_string,w,c
  7138  001518  6E1B               	movwf	??_command_builder_add_string& (0+255),c
  7139  00151A  5020               	movf	command_builder_add_string@inx+1,w,c
  7140  00151C  201A               	addwfc	command_builder_add_string@data_string+1,w,c
  7141  00151E  6E1C               	movwf	(??_command_builder_add_string+1)& (0+255),c
  7142  001520  C01B  FFF6         	movff	??_command_builder_add_string,tblptrl
  7143  001524  C01C  FFF7         	movff	??_command_builder_add_string+1,tblptrh
  7144  001528  6AF8               	clrf	tblptru,c
  7145  00152A  0E05               	movlw	(high __ramtop+-1)
  7146  00152C  64F7               	cpfsgt	tblptrh,c
  7147  00152E  D003               	bra	u2287
  7148  001530  0008               	tblrd		*
  7149  001532  50F5               	movf	tablat,w,c
  7150  001534  D005               	bra	u2280
  7151  001536                     u2287:
  7152  001536  CFF6 FFE1          	movff	tblptrl,fsr1l
  7153  00153A  CFF7 FFE2          	movff	tblptrh,fsr1h
  7154  00153E  50E7               	movf	indf1,w,c
  7155  001540                     u2280:
  7156  001540  0900               	iorlw	0
  7157  001542  A4D8               	btfss	status,2,c
  7158  001544  D7C4               	goto	l294
  7159                           
  7160                           ;SlaveComm.c: 502: }
  7161                           ;SlaveComm.c: 504: return xsumAdd;
  7162  001546  C01D  F017         	movff	command_builder_add_string@xsumAdd,?_command_builder_add_string
  7163  00154A  C01E  F018         	movff	command_builder_add_string@xsumAdd+1,?_command_builder_add_string+1
  7164  00154E  0012               	return		;funcret
  7165  001550                     __end_of_command_builder_add_string:
  7166                           	opt stack 0
  7167                           tblptru	equ	0xFF8
  7168                           tblptrh	equ	0xFF7
  7169                           tblptrl	equ	0xFF6
  7170                           tablat	equ	0xFF5
  7171                           prodh	equ	0xFF4
  7172                           prodl	equ	0xFF3
  7173                           intcon	equ	0xFF2
  7174                           intcon2	equ	0xFF1
  7175                           intcon3	equ	0xFF0
  7176                           postinc0	equ	0xFEE
  7177                           wreg	equ	0xFE8
  7178                           indf1	equ	0xFE7
  7179                           postinc1	equ	0xFE6
  7180                           fsr1h	equ	0xFE2
  7181                           fsr1l	equ	0xFE1
  7182                           indf2	equ	0xFDF
  7183                           postinc2	equ	0xFDE
  7184                           postdec2	equ	0xFDD
  7185                           fsr2h	equ	0xFDA
  7186                           fsr2l	equ	0xFD9
  7187                           status	equ	0xFD8
  7188                           
  7189 ;; *************** function _command_builder_add_char *****************
  7190 ;; Defined at:
  7191 ;;		line 482 in file "SlaveComm.c"
  7192 ;; Parameters:    Size  Location     Type
  7193 ;;  send_buffer     2   18[COMRAM] PTR struct buffer
  7194 ;;		 -> communications@send_buffer(42), 
  7195 ;;  data            1   20[COMRAM] unsigned char 
  7196 ;; Auto vars:     Size  Location     Type
  7197 ;;		None
  7198 ;; Return value:  Size  Location     Type
  7199 ;;                  2   18[COMRAM] int 
  7200 ;; Registers used:
  7201 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7202 ;; Tracked objects:
  7203 ;;		On entry : 0/0
  7204 ;;		On exit  : 0/0
  7205 ;;		Unchanged: 0/0
  7206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7207 ;;      Params:         3       0       0       0       0       0       0
  7208 ;;      Locals:         0       0       0       0       0       0       0
  7209 ;;      Temps:          1       0       0       0       0       0       0
  7210 ;;      Totals:         4       0       0       0       0       0       0
  7211 ;;Total ram usage:        4 bytes
  7212 ;; Hardware stack levels used:    1
  7213 ;; Hardware stack levels required when called:    1
  7214 ;; This function calls:
  7215 ;;		Nothing
  7216 ;; This function is called by:
  7217 ;;		_command_builder1
  7218 ;;		_command_builder3
  7219 ;;		_xsum_builder
  7220 ;;		_command_builder_add_string
  7221 ;;		_command_builder2
  7222 ;;		_command_builder4
  7223 ;; This function uses a non-reentrant model
  7224 ;;
  7225                           
  7226                           	psect	text52
  7227  001958                     __ptext52:
  7228                           	opt stack 0
  7229  001958                     _command_builder_add_char:
  7230                           	opt stack 22
  7231                           
  7232                           ;SlaveComm.c: 484: send_buffer->data_buffer[send_buffer->write_position] = data;
  7233                           
  7234                           ;incstack = 0
  7235  001958  EE20 F028          	lfsr	2,40
  7236  00195C  5013               	movf	command_builder_add_char@send_buffer,w,c
  7237  00195E  26D9               	addwf	fsr2l,f,c
  7238  001960  5014               	movf	command_builder_add_char@send_buffer+1,w,c
  7239  001962  22DA               	addwfc	fsr2h,f,c
  7240  001964  50DF               	movf	indf2,w,c
  7241  001966  6E16               	movwf	??_command_builder_add_char& (0+255),c
  7242  001968  5016               	movf	??_command_builder_add_char,w,c
  7243  00196A  0D01               	mullw	1
  7244  00196C  50F3               	movf	prodl,w,c
  7245  00196E  2413               	addwf	command_builder_add_char@send_buffer,w,c
  7246  001970  6ED9               	movwf	fsr2l,c
  7247  001972  50F4               	movf	prodh,w,c
  7248  001974  2014               	addwfc	command_builder_add_char@send_buffer+1,w,c
  7249  001976  6EDA               	movwf	fsr2h,c
  7250  001978  C015  FFDF         	movff	command_builder_add_char@data,indf2
  7251                           
  7252                           ;SlaveComm.c: 486: send_buffer->write_position++;
  7253  00197C  EE20 F028          	lfsr	2,40
  7254  001980  5013               	movf	command_builder_add_char@send_buffer,w,c
  7255  001982  26D9               	addwf	fsr2l,f,c
  7256  001984  5014               	movf	command_builder_add_char@send_buffer+1,w,c
  7257  001986  22DA               	addwfc	fsr2h,f,c
  7258  001988  2ADF               	incf	indf2,f,c
  7259                           
  7260                           ;SlaveComm.c: 487: if( send_buffer->write_position >= 40 )
  7261  00198A  EE20 F028          	lfsr	2,40
  7262  00198E  5013               	movf	command_builder_add_char@send_buffer,w,c
  7263  001990  26D9               	addwf	fsr2l,f,c
  7264  001992  5014               	movf	command_builder_add_char@send_buffer+1,w,c
  7265  001994  22DA               	addwfc	fsr2h,f,c
  7266  001996  0E27               	movlw	39
  7267  001998  64DF               	cpfsgt	indf2,c
  7268  00199A  D008               	goto	l289
  7269                           
  7270                           ;SlaveComm.c: 488: {
  7271                           ;SlaveComm.c: 489: send_buffer->write_position = 0;
  7272  00199C  EE20 F028          	lfsr	2,40
  7273  0019A0  5013               	movf	command_builder_add_char@send_buffer,w,c
  7274  0019A2  26D9               	addwf	fsr2l,f,c
  7275  0019A4  5014               	movf	command_builder_add_char@send_buffer+1,w,c
  7276  0019A6  22DA               	addwfc	fsr2h,f,c
  7277  0019A8  0E00               	movlw	0
  7278  0019AA  6EDF               	movwf	indf2,c
  7279  0019AC                     l289:
  7280                           
  7281                           ;SlaveComm.c: 490: }
  7282                           ;SlaveComm.c: 492: return data;
  7283  0019AC  C015  F013         	movff	command_builder_add_char@data,?_command_builder_add_char
  7284  0019B0  6A14               	clrf	?_command_builder_add_char+1,c
  7285  0019B2  0012               	return	
  7286  0019B4                     __end_of_command_builder_add_char:
  7287                           	opt stack 0
  7288                           tblptru	equ	0xFF8
  7289                           tblptrh	equ	0xFF7
  7290                           tblptrl	equ	0xFF6
  7291                           tablat	equ	0xFF5
  7292                           prodh	equ	0xFF4
  7293                           prodl	equ	0xFF3
  7294                           intcon	equ	0xFF2
  7295                           intcon2	equ	0xFF1
  7296                           intcon3	equ	0xFF0
  7297                           postinc0	equ	0xFEE
  7298                           wreg	equ	0xFE8
  7299                           indf1	equ	0xFE7
  7300                           postinc1	equ	0xFE6
  7301                           fsr1h	equ	0xFE2
  7302                           fsr1l	equ	0xFE1
  7303                           indf2	equ	0xFDF
  7304                           postinc2	equ	0xFDE
  7305                           postdec2	equ	0xFDD
  7306                           fsr2h	equ	0xFDA
  7307                           fsr2l	equ	0xFD9
  7308                           status	equ	0xFD8
  7309                           
  7310 ;; *************** function _atol *****************
  7311 ;; Defined at:
  7312 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atol.c"
  7313 ;; Parameters:    Size  Location     Type
  7314 ;;  s               2   30[COMRAM] PTR const unsigned char 
  7315 ;;		 -> process_data@parameters(50), 
  7316 ;; Auto vars:     Size  Location     Type
  7317 ;;  a               4   39[COMRAM] long 
  7318 ;;  c               1   43[COMRAM] unsigned char 
  7319 ;;  sign            1   38[COMRAM] unsigned char 
  7320 ;; Return value:  Size  Location     Type
  7321 ;;                  4   30[COMRAM] long 
  7322 ;; Registers used:
  7323 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7324 ;; Tracked objects:
  7325 ;;		On entry : 0/0
  7326 ;;		On exit  : 0/0
  7327 ;;		Unchanged: 0/0
  7328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7329 ;;      Params:         4       0       0       0       0       0       0
  7330 ;;      Locals:         6       0       0       0       0       0       0
  7331 ;;      Temps:          4       0       0       0       0       0       0
  7332 ;;      Totals:        14       0       0       0       0       0       0
  7333 ;;Total ram usage:       14 bytes
  7334 ;; Hardware stack levels used:    1
  7335 ;; Hardware stack levels required when called:    2
  7336 ;; This function calls:
  7337 ;;		___lmul
  7338 ;;		_isdigit
  7339 ;; This function is called by:
  7340 ;;		_process_data_parameters
  7341 ;; This function uses a non-reentrant model
  7342 ;;
  7343                           
  7344                           	psect	text53
  7345  000D56                     __ptext53:
  7346                           	opt stack 0
  7347  000D56                     _atol:
  7348                           	opt stack 24
  7349                           
  7350                           ;incstack = 0
  7351  000D56  C01F  FFD9         	movff	atol@s,fsr2l
  7352  000D5A  C020  FFDA         	movff	atol@s+1,fsr2h
  7353  000D5E  50DF               	movf	indf2,w,c
  7354  000D60  6E2C               	movwf	atol@c,c
  7355  000D62  4A1F               	infsnz	atol@s,f,c
  7356  000D64  2A20               	incf	atol@s+1,f,c
  7357  000D66  0E20               	movlw	32
  7358  000D68  182C               	xorwf	atol@c,w,c
  7359  000D6A  B4D8               	btfsc	status,2,c
  7360  000D6C  D7F4               	goto	_atol
  7361  000D6E  0E09               	movlw	9
  7362  000D70  182C               	xorwf	atol@c,w,c
  7363  000D72  B4D8               	btfsc	status,2,c
  7364  000D74  D7F0               	goto	_atol
  7365  000D76  0E00               	movlw	0
  7366  000D78  6E28               	movwf	atol@a,c
  7367  000D7A  0E00               	movlw	0
  7368  000D7C  6E29               	movwf	atol@a+1,c
  7369  000D7E  0E00               	movlw	0
  7370  000D80  6E2A               	movwf	atol@a+2,c
  7371  000D82  0E00               	movlw	0
  7372  000D84  6E2B               	movwf	atol@a+3,c
  7373  000D86  0E00               	movlw	0
  7374  000D88  6E27               	movwf	atol@sign,c
  7375  000D8A  0E2D               	movlw	45
  7376  000D8C  182C               	xorwf	atol@c,w,c
  7377  000D8E  A4D8               	btfss	status,2,c
  7378  000D90  D002               	goto	l746
  7379  000D92  2A27               	incf	atol@sign,f,c
  7380  000D94  D027               	goto	L7
  7381  000D96                     l746:
  7382  000D96  0E2B               	movlw	43
  7383  000D98  182C               	xorwf	atol@c,w,c
  7384  000D9A  A4D8               	btfss	status,2,c
  7385  000D9C  D02B               	goto	l749
  7386  000D9E  D022               	goto	L7
  7387  000DA0  C028  F013         	movff	atol@a,___lmul@multiplier
  7388  000DA4  C029  F014         	movff	atol@a+1,___lmul@multiplier+1
  7389  000DA8  C02A  F015         	movff	atol@a+2,___lmul@multiplier+2
  7390  000DAC  C02B  F016         	movff	atol@a+3,___lmul@multiplier+3
  7391  000DB0  0E0A               	movlw	10
  7392  000DB2  6E17               	movwf	___lmul@multiplicand,c
  7393  000DB4  0E00               	movlw	0
  7394  000DB6  6E18               	movwf	___lmul@multiplicand+1,c
  7395  000DB8  0E00               	movlw	0
  7396  000DBA  6E19               	movwf	___lmul@multiplicand+2,c
  7397  000DBC  0E00               	movlw	0
  7398  000DBE  6E1A               	movwf	___lmul@multiplicand+3,c
  7399  000DC0  EC07  F00D         	call	___lmul	;wreg free
  7400  000DC4  C02C  F023         	movff	atol@c,??_atol
  7401  000DC8  0ED0               	movlw	208
  7402  000DCA  2623               	addwf	??_atol,f,c
  7403  000DCC  5023               	movf	??_atol,w,c
  7404  000DCE  2413               	addwf	?___lmul,w,c
  7405  000DD0  6E28               	movwf	atol@a,c
  7406  000DD2  0E00               	movlw	0
  7407  000DD4  2014               	addwfc	?___lmul+1,w,c
  7408  000DD6  6E29               	movwf	atol@a+1,c
  7409  000DD8  0E00               	movlw	0
  7410  000DDA  2015               	addwfc	?___lmul+2,w,c
  7411  000DDC  6E2A               	movwf	atol@a+2,c
  7412  000DDE  0E00               	movlw	0
  7413  000DE0  2016               	addwfc	?___lmul+3,w,c
  7414  000DE2  6E2B               	movwf	atol@a+3,c
  7415  000DE4                     L7:
  7416  000DE4  C01F  FFD9         	movff	atol@s,fsr2l
  7417  000DE8  C020  FFDA         	movff	atol@s+1,fsr2h
  7418  000DEC  50DF               	movf	indf2,w,c
  7419  000DEE  6E2C               	movwf	atol@c,c
  7420  000DF0  4A1F               	infsnz	atol@s,f,c
  7421  000DF2  2A20               	incf	atol@s+1,f,c
  7422  000DF4                     l749:
  7423  000DF4  502C               	movf	atol@c,w,c
  7424  000DF6  EC79  F00F         	call	_isdigit
  7425  000DFA  B0D8               	btfsc	status,0,c
  7426  000DFC  D7D1               	goto	l750
  7427  000DFE  5027               	movf	atol@sign,w,c
  7428  000E00  B4D8               	btfsc	status,2,c
  7429  000E02  D01A               	goto	l752
  7430  000E04  C028  F023         	movff	atol@a,??_atol
  7431  000E08  C029  F024         	movff	atol@a+1,??_atol+1
  7432  000E0C  C02A  F025         	movff	atol@a+2,??_atol+2
  7433  000E10  C02B  F026         	movff	atol@a+3,??_atol+3
  7434  000E14  1E23               	comf	??_atol,f,c
  7435  000E16  1E24               	comf	??_atol+1,f,c
  7436  000E18  1E25               	comf	??_atol+2,f,c
  7437  000E1A  1E26               	comf	??_atol+3,f,c
  7438  000E1C  2A23               	incf	??_atol,f,c
  7439  000E1E  0E00               	movlw	0
  7440  000E20  2224               	addwfc	??_atol+1,f,c
  7441  000E22  2225               	addwfc	??_atol+2,f,c
  7442  000E24  2226               	addwfc	??_atol+3,f,c
  7443  000E26  C023  F01F         	movff	??_atol,?_atol
  7444  000E2A  C024  F020         	movff	??_atol+1,?_atol+1
  7445  000E2E  C025  F021         	movff	??_atol+2,?_atol+2
  7446  000E32  C026  F022         	movff	??_atol+3,?_atol+3
  7447  000E36  0012               	return	
  7448  000E38                     l752:
  7449  000E38  C028  F01F         	movff	atol@a,?_atol
  7450  000E3C  C029  F020         	movff	atol@a+1,?_atol+1
  7451  000E40  C02A  F021         	movff	atol@a+2,?_atol+2
  7452  000E44  C02B  F022         	movff	atol@a+3,?_atol+3
  7453  000E48  0012               	return		;funcret
  7454  000E4A                     __end_of_atol:
  7455                           	opt stack 0
  7456                           tblptru	equ	0xFF8
  7457                           tblptrh	equ	0xFF7
  7458                           tblptrl	equ	0xFF6
  7459                           tablat	equ	0xFF5
  7460                           prodh	equ	0xFF4
  7461                           prodl	equ	0xFF3
  7462                           intcon	equ	0xFF2
  7463                           intcon2	equ	0xFF1
  7464                           intcon3	equ	0xFF0
  7465                           postinc0	equ	0xFEE
  7466                           wreg	equ	0xFE8
  7467                           indf1	equ	0xFE7
  7468                           postinc1	equ	0xFE6
  7469                           fsr1h	equ	0xFE2
  7470                           fsr1l	equ	0xFE1
  7471                           indf2	equ	0xFDF
  7472                           postinc2	equ	0xFDE
  7473                           postdec2	equ	0xFDD
  7474                           fsr2h	equ	0xFDA
  7475                           fsr2l	equ	0xFD9
  7476                           status	equ	0xFD8
  7477                           
  7478 ;; *************** function _isdigit *****************
  7479 ;; Defined at:
  7480 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  7481 ;; Parameters:    Size  Location     Type
  7482 ;;  c               1    wreg     unsigned char 
  7483 ;; Auto vars:     Size  Location     Type
  7484 ;;  c               1   20[COMRAM] unsigned char 
  7485 ;; Return value:  Size  Location     Type
  7486 ;;		None               void
  7487 ;; Registers used:
  7488 ;;		wreg, status,2, status,0
  7489 ;; Tracked objects:
  7490 ;;		On entry : 0/0
  7491 ;;		On exit  : 0/0
  7492 ;;		Unchanged: 0/0
  7493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7494 ;;      Params:         0       0       0       0       0       0       0
  7495 ;;      Locals:         2       0       0       0       0       0       0
  7496 ;;      Temps:          1       0       0       0       0       0       0
  7497 ;;      Totals:         3       0       0       0       0       0       0
  7498 ;;Total ram usage:        3 bytes
  7499 ;; Hardware stack levels used:    1
  7500 ;; Hardware stack levels required when called:    1
  7501 ;; This function calls:
  7502 ;;		Nothing
  7503 ;; This function is called by:
  7504 ;;		_atol
  7505 ;; This function uses a non-reentrant model
  7506 ;;
  7507                           
  7508                           	psect	text54
  7509  001EF2                     __ptext54:
  7510                           	opt stack 0
  7511  001EF2                     _isdigit:
  7512                           	opt stack 24
  7513                           
  7514                           ;incstack = 0
  7515                           ;isdigit@c stored from wreg
  7516  001EF2  6E15               	movwf	isdigit@c,c
  7517  001EF4  0E00               	movlw	0
  7518  001EF6  6E14               	movwf	_isdigit$2299,c
  7519  001EF8  0E3A               	movlw	58
  7520  001EFA  6015               	cpfslt	isdigit@c,c
  7521  001EFC  D005               	goto	l924
  7522  001EFE  0E2F               	movlw	47
  7523  001F00  6415               	cpfsgt	isdigit@c,c
  7524  001F02  D002               	goto	l924
  7525  001F04  0E01               	movlw	1
  7526  001F06  6E14               	movwf	_isdigit$2299,c
  7527  001F08                     l924:
  7528  001F08  C014  F013         	movff	_isdigit$2299,??_isdigit
  7529  001F0C  3013               	rrcf	??_isdigit,w,c
  7530  001F0E  0012               	return	
  7531  001F10                     __end_of_isdigit:
  7532                           	opt stack 0
  7533                           tblptru	equ	0xFF8
  7534                           tblptrh	equ	0xFF7
  7535                           tblptrl	equ	0xFF6
  7536                           tablat	equ	0xFF5
  7537                           prodh	equ	0xFF4
  7538                           prodl	equ	0xFF3
  7539                           intcon	equ	0xFF2
  7540                           intcon2	equ	0xFF1
  7541                           intcon3	equ	0xFF0
  7542                           postinc0	equ	0xFEE
  7543                           wreg	equ	0xFE8
  7544                           indf1	equ	0xFE7
  7545                           postinc1	equ	0xFE6
  7546                           fsr1h	equ	0xFE2
  7547                           fsr1l	equ	0xFE1
  7548                           indf2	equ	0xFDF
  7549                           postinc2	equ	0xFDE
  7550                           postdec2	equ	0xFDD
  7551                           fsr2h	equ	0xFDA
  7552                           fsr2l	equ	0xFD9
  7553                           status	equ	0xFD8
  7554                           
  7555 ;; *************** function ___lmul *****************
  7556 ;; Defined at:
  7557 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
  7558 ;; Parameters:    Size  Location     Type
  7559 ;;  multiplier      4   18[COMRAM] unsigned long 
  7560 ;;  multiplicand    4   22[COMRAM] unsigned long 
  7561 ;; Auto vars:     Size  Location     Type
  7562 ;;  product         4   26[COMRAM] unsigned long 
  7563 ;; Return value:  Size  Location     Type
  7564 ;;                  4   18[COMRAM] unsigned long 
  7565 ;; Registers used:
  7566 ;;		wreg, status,2, status,0
  7567 ;; Tracked objects:
  7568 ;;		On entry : 0/0
  7569 ;;		On exit  : 0/0
  7570 ;;		Unchanged: 0/0
  7571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7572 ;;      Params:         8       0       0       0       0       0       0
  7573 ;;      Locals:         4       0       0       0       0       0       0
  7574 ;;      Temps:          0       0       0       0       0       0       0
  7575 ;;      Totals:        12       0       0       0       0       0       0
  7576 ;;Total ram usage:       12 bytes
  7577 ;; Hardware stack levels used:    1
  7578 ;; Hardware stack levels required when called:    1
  7579 ;; This function calls:
  7580 ;;		Nothing
  7581 ;; This function is called by:
  7582 ;;		_atol
  7583 ;; This function uses a non-reentrant model
  7584 ;;
  7585                           
  7586                           	psect	text55
  7587  001A0E                     __ptext55:
  7588                           	opt stack 0
  7589  001A0E                     ___lmul:
  7590                           	opt stack 24
  7591                           
  7592                           ;incstack = 0
  7593  001A0E  0E00               	movlw	0
  7594  001A10  6E1B               	movwf	___lmul@product,c
  7595  001A12  0E00               	movlw	0
  7596  001A14  6E1C               	movwf	___lmul@product+1,c
  7597  001A16  0E00               	movlw	0
  7598  001A18  6E1D               	movwf	___lmul@product+2,c
  7599  001A1A  0E00               	movlw	0
  7600  001A1C  6E1E               	movwf	___lmul@product+3,c
  7601  001A1E  A013               	btfss	___lmul@multiplier,0,c
  7602  001A20  D008               	goto	l593
  7603  001A22  5017               	movf	___lmul@multiplicand,w,c
  7604  001A24  261B               	addwf	___lmul@product,f,c
  7605  001A26  5018               	movf	___lmul@multiplicand+1,w,c
  7606  001A28  221C               	addwfc	___lmul@product+1,f,c
  7607  001A2A  5019               	movf	___lmul@multiplicand+2,w,c
  7608  001A2C  221D               	addwfc	___lmul@product+2,f,c
  7609  001A2E  501A               	movf	___lmul@multiplicand+3,w,c
  7610  001A30  221E               	addwfc	___lmul@product+3,f,c
  7611  001A32                     l593:
  7612  001A32  90D8               	bcf	status,0,c
  7613  001A34  3617               	rlcf	___lmul@multiplicand,f,c
  7614  001A36  3618               	rlcf	___lmul@multiplicand+1,f,c
  7615  001A38  3619               	rlcf	___lmul@multiplicand+2,f,c
  7616  001A3A  361A               	rlcf	___lmul@multiplicand+3,f,c
  7617  001A3C  90D8               	bcf	status,0,c
  7618  001A3E  3216               	rrcf	___lmul@multiplier+3,f,c
  7619  001A40  3215               	rrcf	___lmul@multiplier+2,f,c
  7620  001A42  3214               	rrcf	___lmul@multiplier+1,f,c
  7621  001A44  3213               	rrcf	___lmul@multiplier,f,c
  7622  001A46  5013               	movf	___lmul@multiplier,w,c
  7623  001A48  1014               	iorwf	___lmul@multiplier+1,w,c
  7624  001A4A  1015               	iorwf	___lmul@multiplier+2,w,c
  7625  001A4C  1016               	iorwf	___lmul@multiplier+3,w,c
  7626  001A4E  A4D8               	btfss	status,2,c
  7627  001A50  D7E6               	goto	l592
  7628  001A52  C01B  F013         	movff	___lmul@product,?___lmul
  7629  001A56  C01C  F014         	movff	___lmul@product+1,?___lmul+1
  7630  001A5A  C01D  F015         	movff	___lmul@product+2,?___lmul+2
  7631  001A5E  C01E  F016         	movff	___lmul@product+3,?___lmul+3
  7632  001A62  0012               	return		;funcret
  7633  001A64                     __end_of___lmul:
  7634                           	opt stack 0
  7635                           tblptru	equ	0xFF8
  7636                           tblptrh	equ	0xFF7
  7637                           tblptrl	equ	0xFF6
  7638                           tablat	equ	0xFF5
  7639                           prodh	equ	0xFF4
  7640                           prodl	equ	0xFF3
  7641                           intcon	equ	0xFF2
  7642                           intcon2	equ	0xFF1
  7643                           intcon3	equ	0xFF0
  7644                           postinc0	equ	0xFEE
  7645                           wreg	equ	0xFE8
  7646                           indf1	equ	0xFE7
  7647                           postinc1	equ	0xFE6
  7648                           fsr1h	equ	0xFE2
  7649                           fsr1l	equ	0xFE1
  7650                           indf2	equ	0xFDF
  7651                           postinc2	equ	0xFDE
  7652                           postdec2	equ	0xFDD
  7653                           fsr2h	equ	0xFDA
  7654                           fsr2l	equ	0xFD9
  7655                           status	equ	0xFD8
  7656                           
  7657 ;; *************** function _process_data_parameterize *****************
  7658 ;; Defined at:
  7659 ;;		line 290 in file "SlaveComm.c"
  7660 ;; Parameters:    Size  Location     Type
  7661 ;;  parameters      2   24[COMRAM] PTR unsigned char [10]
  7662 ;;		 -> process_data@parameters(50), 
  7663 ;;  buffer_to_pa    2   26[COMRAM] PTR struct buffer
  7664 ;;		 -> communications@receive_buffer(42), 
  7665 ;; Auto vars:     Size  Location     Type
  7666 ;;  inx             2   31[COMRAM] int 
  7667 ;;  parameter_po    1   34[COMRAM] unsigned char 
  7668 ;;  parameter_in    1   33[COMRAM] unsigned char 
  7669 ;; Return value:  Size  Location     Type
  7670 ;;                  1    wreg      void 
  7671 ;; Registers used:
  7672 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7673 ;; Tracked objects:
  7674 ;;		On entry : 0/0
  7675 ;;		On exit  : 0/0
  7676 ;;		Unchanged: 0/0
  7677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7678 ;;      Params:         4       0       0       0       0       0       0
  7679 ;;      Locals:         4       0       0       0       0       0       0
  7680 ;;      Temps:          3       0       0       0       0       0       0
  7681 ;;      Totals:        11       0       0       0       0       0       0
  7682 ;;Total ram usage:       11 bytes
  7683 ;; Hardware stack levels used:    1
  7684 ;; Hardware stack levels required when called:    2
  7685 ;; This function calls:
  7686 ;;		___wmul
  7687 ;; This function is called by:
  7688 ;;		_process_data
  7689 ;; This function uses a non-reentrant model
  7690 ;;
  7691                           
  7692                           	psect	text56
  7693  0009B4                     __ptext56:
  7694                           	opt stack 0
  7695  0009B4                     _process_data_parameterize:
  7696                           	opt stack 25
  7697                           
  7698                           ;SlaveComm.c: 292: unsigned char parameter_position = 0;
  7699                           
  7700                           ;incstack = 0
  7701  0009B4  0E00               	movlw	0
  7702  0009B6  6E23               	movwf	process_data_parameterize@parameter_position,c
  7703                           
  7704                           ;SlaveComm.c: 293: unsigned char parameter_index = 0;
  7705  0009B8  0E00               	movlw	0
  7706  0009BA  6E22               	movwf	process_data_parameterize@parameter_index,c
  7707                           
  7708                           ;SlaveComm.c: 302: for( int inx = 0; inx < 5; inx++ )
  7709  0009BC  0E00               	movlw	0
  7710  0009BE  6E21               	movwf	process_data_parameterize@inx+1,c
  7711  0009C0  0E00               	movlw	0
  7712  0009C2  6E20               	movwf	process_data_parameterize@inx,c
  7713  0009C4  BE21               	btfsc	process_data_parameterize@inx+1,7,c
  7714  0009C6  D008               	goto	l235
  7715  0009C8  5021               	movf	process_data_parameterize@inx+1,w,c
  7716  0009CA  E105               	bnz	u2610
  7717  0009CC  0E05               	movlw	5
  7718  0009CE  5C20               	subwf	process_data_parameterize@inx,w,c
  7719  0009D0  B0D8               	btfsc	status,0,c
  7720  0009D2  D082               	goto	l237
  7721  0009D4  D001               	goto	l235
  7722  0009D6                     u2610:
  7723  0009D6  D080               	goto	l237
  7724  0009D8                     l235:
  7725                           
  7726                           ;SlaveComm.c: 303: {
  7727                           ;SlaveComm.c: 304: parameters[inx][0] = '\0';
  7728  0009D8  C020  F013         	movff	process_data_parameterize@inx,___wmul@multiplier
  7729  0009DC  C021  F014         	movff	process_data_parameterize@inx+1,___wmul@multiplier+1
  7730  0009E0  0E00               	movlw	0
  7731  0009E2  6E16               	movwf	___wmul@multiplicand+1,c
  7732  0009E4  0E0A               	movlw	10
  7733  0009E6  6E15               	movwf	___wmul@multiplicand,c
  7734  0009E8  EC38  F00F         	call	___wmul	;wreg free
  7735  0009EC  5013               	movf	?___wmul,w,c
  7736  0009EE  2419               	addwf	process_data_parameterize@parameters,w,c
  7737  0009F0  6ED9               	movwf	fsr2l,c
  7738  0009F2  5014               	movf	?___wmul+1,w,c
  7739  0009F4  201A               	addwfc	process_data_parameterize@parameters+1,w,c
  7740  0009F6  6EDA               	movwf	fsr2h,c
  7741  0009F8  0E00               	movlw	0
  7742  0009FA  6EDF               	movwf	indf2,c
  7743  0009FC  4A20               	infsnz	process_data_parameterize@inx,f,c
  7744  0009FE  2A21               	incf	process_data_parameterize@inx+1,f,c
  7745  000A00  BE21               	btfsc	process_data_parameterize@inx+1,7,c
  7746  000A02  D7EA               	goto	l235
  7747  000A04  5021               	movf	process_data_parameterize@inx+1,w,c
  7748  000A06  E168               	bnz	l3835
  7749  000A08  D7E1               	goto	L6
  7750  000A0A                     
  7751                           ;SlaveComm.c: 316: parameter_position = 0;
  7752  000A0A  0E00               	movlw	0
  7753  000A0C  6E23               	movwf	process_data_parameterize@parameter_position,c
  7754                           
  7755                           ;SlaveComm.c: 317: parameter_index++;
  7756  000A0E  2A22               	incf	process_data_parameterize@parameter_index,f,c
  7757                           
  7758                           ;SlaveComm.c: 319: if( parameter_index >= 5 )
  7759  000A10  0E04               	movlw	4
  7760  000A12  6422               	cpfsgt	process_data_parameterize@parameter_index,c
  7761  000A14  D05A               	goto	l241
  7762                           
  7763                           ;SlaveComm.c: 320: {
  7764                           ;SlaveComm.c: 323: parameter_index = (5 - 1);
  7765  000A16  0E04               	movlw	4
  7766  000A18  6E22               	movwf	process_data_parameterize@parameter_index,c
  7767                           
  7768                           ;SlaveComm.c: 324: }
  7769                           ;SlaveComm.c: 326: break;
  7770  000A1A  D057               	goto	l241
  7771  000A1C                     
  7772                           ;SlaveComm.c: 329: parameters[parameter_index][parameter_position] = buffer_to_parameter
      +                          ize->data_buffer[buffer_to_parameterize->read_position];
  7773  000A1C  EE20 F029          	lfsr	2,41
  7774  000A20  501B               	movf	process_data_parameterize@buffer_to_parameterize,w,c
  7775  000A22  26D9               	addwf	fsr2l,f,c
  7776  000A24  501C               	movf	process_data_parameterize@buffer_to_parameterize+1,w,c
  7777  000A26  22DA               	addwfc	fsr2h,f,c
  7778  000A28  50DF               	movf	indf2,w,c
  7779  000A2A  6E1D               	movwf	??_process_data_parameterize& (0+255),c
  7780  000A2C  501D               	movf	??_process_data_parameterize,w,c
  7781  000A2E  0D01               	mullw	1
  7782  000A30  50F3               	movf	prodl,w,c
  7783  000A32  241B               	addwf	process_data_parameterize@buffer_to_parameterize,w,c
  7784  000A34  6ED9               	movwf	fsr2l,c
  7785  000A36  50F4               	movf	prodh,w,c
  7786  000A38  201C               	addwfc	process_data_parameterize@buffer_to_parameterize+1,w,c
  7787  000A3A  6EDA               	movwf	fsr2h,c
  7788  000A3C  5022               	movf	process_data_parameterize@parameter_index,w,c
  7789  000A3E  0D0A               	mullw	10
  7790  000A40  C019  F01E         	movff	process_data_parameterize@parameters,??_process_data_parameterize+1
  7791  000A44  C01A  F01F         	movff	process_data_parameterize@parameters+1,??_process_data_parameterize+2
  7792  000A48  50F3               	movf	prodl,w,c
  7793  000A4A  261E               	addwf	??_process_data_parameterize+1,f,c
  7794  000A4C  50F4               	movf	prodh,w,c
  7795  000A4E  221F               	addwfc	??_process_data_parameterize+2,f,c
  7796  000A50  5023               	movf	process_data_parameterize@parameter_position,w,c
  7797  000A52  0D01               	mullw	1
  7798  000A54  50F3               	movf	prodl,w,c
  7799  000A56  241E               	addwf	??_process_data_parameterize+1,w,c
  7800  000A58  6EE1               	movwf	fsr1l,c
  7801  000A5A  50F4               	movf	prodh,w,c
  7802  000A5C  201F               	addwfc	??_process_data_parameterize+2,w,c
  7803  000A5E  6EE2               	movwf	fsr1h,c
  7804  000A60  CFDF FFE7          	movff	indf2,indf1
  7805                           
  7806                           ;SlaveComm.c: 330: parameter_position++;
  7807  000A64  2A23               	incf	process_data_parameterize@parameter_position,f,c
  7808                           
  7809                           ;SlaveComm.c: 331: if( parameter_position >= 10 )
  7810  000A66  0E09               	movlw	9
  7811  000A68  6423               	cpfsgt	process_data_parameterize@parameter_position,c
  7812  000A6A  D002               	goto	l245
  7813                           
  7814                           ;SlaveComm.c: 332: {
  7815                           ;SlaveComm.c: 335: parameter_position = (10 - 1);
  7816  000A6C  0E09               	movlw	9
  7817  000A6E  6E23               	movwf	process_data_parameterize@parameter_position,c
  7818  000A70                     l245:
  7819                           
  7820                           ;SlaveComm.c: 336: }
  7821                           ;SlaveComm.c: 339: parameters[parameter_index][parameter_position] = '\0';
  7822  000A70  5022               	movf	process_data_parameterize@parameter_index,w,c
  7823  000A72  0D0A               	mullw	10
  7824  000A74  C019  F01D         	movff	process_data_parameterize@parameters,??_process_data_parameterize
  7825  000A78  C01A  F01E         	movff	process_data_parameterize@parameters+1,??_process_data_parameterize+1
  7826  000A7C  50F3               	movf	prodl,w,c
  7827  000A7E  261D               	addwf	??_process_data_parameterize,f,c
  7828  000A80  50F4               	movf	prodh,w,c
  7829  000A82  221E               	addwfc	??_process_data_parameterize+1,f,c
  7830  000A84  5023               	movf	process_data_parameterize@parameter_position,w,c
  7831  000A86  0D01               	mullw	1
  7832  000A88  50F3               	movf	prodl,w,c
  7833  000A8A  241D               	addwf	??_process_data_parameterize,w,c
  7834  000A8C  6ED9               	movwf	fsr2l,c
  7835  000A8E  50F4               	movf	prodh,w,c
  7836  000A90  201E               	addwfc	??_process_data_parameterize+1,w,c
  7837  000A92  6EDA               	movwf	fsr2h,c
  7838  000A94  0E00               	movlw	0
  7839  000A96  6EDF               	movwf	indf2,c
  7840                           
  7841                           ;SlaveComm.c: 341: }
  7842                           
  7843                           ;SlaveComm.c: 340: break;
  7844  000A98  D018               	goto	l241
  7845  000A9A  EE20 F029          	lfsr	2,41
  7846  000A9E  501B               	movf	process_data_parameterize@buffer_to_parameterize,w,c
  7847  000AA0  26D9               	addwf	fsr2l,f,c
  7848  000AA2  501C               	movf	process_data_parameterize@buffer_to_parameterize+1,w,c
  7849  000AA4  22DA               	addwfc	fsr2h,f,c
  7850  000AA6  50DF               	movf	indf2,w,c
  7851  000AA8  6E1D               	movwf	??_process_data_parameterize& (0+255),c
  7852  000AAA  501D               	movf	??_process_data_parameterize,w,c
  7853  000AAC  0D01               	mullw	1
  7854  000AAE  50F3               	movf	prodl,w,c
  7855  000AB0  241B               	addwf	process_data_parameterize@buffer_to_parameterize,w,c
  7856  000AB2  6ED9               	movwf	fsr2l,c
  7857  000AB4  50F4               	movf	prodh,w,c
  7858  000AB6  201C               	addwfc	process_data_parameterize@buffer_to_parameterize+1,w,c
  7859  000AB8  6EDA               	movwf	fsr2h,c
  7860  000ABA  50DF               	movf	indf2,w,c
  7861                           
  7862                           ; Switch size 1, requested type "space"
  7863                           ; Number of cases is 2, Range of values is 33 to 59
  7864                           ; switch strategies available:
  7865                           ; Name         Instructions Cycles
  7866                           ; simple_byte            7     4 (average)
  7867                           ;	Chosen strategy is simple_byte
  7868  000ABC  0A21               	xorlw	33	; case 33
  7869  000ABE  B4D8               	btfsc	status,2,c
  7870  000AC0  D004               	goto	l241
  7871  000AC2  0A1A               	xorlw	26	; case 59
  7872  000AC4  B4D8               	btfsc	status,2,c
  7873  000AC6  D7A1               	goto	l242
  7874  000AC8  D7A9               	goto	l244
  7875  000ACA                     l241:
  7876                           
  7877                           ;SlaveComm.c: 343: buffer_to_parameterize->read_position++;
  7878  000ACA  EE20 F029          	lfsr	2,41
  7879  000ACE  501B               	movf	process_data_parameterize@buffer_to_parameterize,w,c
  7880  000AD0  26D9               	addwf	fsr2l,f,c
  7881  000AD2  501C               	movf	process_data_parameterize@buffer_to_parameterize+1,w,c
  7882  000AD4  22DA               	addwfc	fsr2h,f,c
  7883  000AD6  2ADF               	incf	indf2,f,c
  7884  000AD8                     l237:
  7885  000AD8                     l3835:
  7886  000AD8  EE20 F029          	lfsr	2,41
  7887  000ADC  501B               	movf	process_data_parameterize@buffer_to_parameterize,w,c
  7888  000ADE  26D9               	addwf	fsr2l,f,c
  7889  000AE0  501C               	movf	process_data_parameterize@buffer_to_parameterize+1,w,c
  7890  000AE2  22DA               	addwfc	fsr2h,f,c
  7891  000AE4  50DF               	movf	indf2,w,c
  7892  000AE6  6E1D               	movwf	??_process_data_parameterize& (0+255),c
  7893  000AE8  501D               	movf	??_process_data_parameterize,w,c
  7894  000AEA  0D01               	mullw	1
  7895  000AEC  50F3               	movf	prodl,w,c
  7896  000AEE  241B               	addwf	process_data_parameterize@buffer_to_parameterize,w,c
  7897  000AF0  6ED9               	movwf	fsr2l,c
  7898  000AF2  50F4               	movf	prodh,w,c
  7899  000AF4  201C               	addwfc	process_data_parameterize@buffer_to_parameterize+1,w,c
  7900  000AF6  6EDA               	movwf	fsr2h,c
  7901  000AF8  0E2A               	movlw	42
  7902  000AFA  18DE               	xorwf	postinc2,w,c
  7903  000AFC  B4D8               	btfsc	status,2,c
  7904  000AFE  0012               	return	
  7905  000B00  EE20 F029          	lfsr	2,41
  7906  000B04  501B               	movf	process_data_parameterize@buffer_to_parameterize,w,c
  7907  000B06  26D9               	addwf	fsr2l,f,c
  7908  000B08  501C               	movf	process_data_parameterize@buffer_to_parameterize+1,w,c
  7909  000B0A  22DA               	addwfc	fsr2h,f,c
  7910  000B0C  0E28               	movlw	40
  7911  000B0E  60DF               	cpfslt	indf2,c
  7912  000B10  0012               	return	
  7913  000B12  EE20 F028          	lfsr	2,40
  7914  000B16  501B               	movf	process_data_parameterize@buffer_to_parameterize,w,c
  7915  000B18  26D9               	addwf	fsr2l,f,c
  7916  000B1A  501C               	movf	process_data_parameterize@buffer_to_parameterize+1,w,c
  7917  000B1C  22DA               	addwfc	fsr2h,f,c
  7918  000B1E  EE10 F029          	lfsr	1,41
  7919  000B22  501B               	movf	process_data_parameterize@buffer_to_parameterize,w,c
  7920  000B24  26E1               	addwf	fsr1l,f,c
  7921  000B26  501C               	movf	process_data_parameterize@buffer_to_parameterize+1,w,c
  7922  000B28  22E2               	addwfc	fsr1h,f,c
  7923  000B2A  50DE               	movf	postinc2,w,c
  7924  000B2C  18E6               	xorwf	postinc1,w,c
  7925  000B2E  B4D8               	btfsc	status,2,c
  7926  000B30  0012               	return	
  7927  000B32  D7B3               	goto	l239
  7928  000B34                     __end_of_process_data_parameterize:
  7929                           	opt stack 0
  7930                           tblptru	equ	0xFF8
  7931                           tblptrh	equ	0xFF7
  7932                           tblptrl	equ	0xFF6
  7933                           tablat	equ	0xFF5
  7934                           prodh	equ	0xFF4
  7935                           prodl	equ	0xFF3
  7936                           intcon	equ	0xFF2
  7937                           intcon2	equ	0xFF1
  7938                           intcon3	equ	0xFF0
  7939                           postinc0	equ	0xFEE
  7940                           wreg	equ	0xFE8
  7941                           indf1	equ	0xFE7
  7942                           postinc1	equ	0xFE6
  7943                           fsr1h	equ	0xFE2
  7944                           fsr1l	equ	0xFE1
  7945                           indf2	equ	0xFDF
  7946                           postinc2	equ	0xFDE
  7947                           postdec2	equ	0xFDD
  7948                           fsr2h	equ	0xFDA
  7949                           fsr2l	equ	0xFD9
  7950                           status	equ	0xFD8
  7951                           
  7952 ;; *************** function ___wmul *****************
  7953 ;; Defined at:
  7954 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  7955 ;; Parameters:    Size  Location     Type
  7956 ;;  multiplier      2   18[COMRAM] unsigned int 
  7957 ;;  multiplicand    2   20[COMRAM] unsigned int 
  7958 ;; Auto vars:     Size  Location     Type
  7959 ;;  product         2   22[COMRAM] unsigned int 
  7960 ;; Return value:  Size  Location     Type
  7961 ;;                  2   18[COMRAM] unsigned int 
  7962 ;; Registers used:
  7963 ;;		wreg, status,2, status,0, prodl, prodh
  7964 ;; Tracked objects:
  7965 ;;		On entry : 0/0
  7966 ;;		On exit  : 0/0
  7967 ;;		Unchanged: 0/0
  7968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7969 ;;      Params:         4       0       0       0       0       0       0
  7970 ;;      Locals:         2       0       0       0       0       0       0
  7971 ;;      Temps:          0       0       0       0       0       0       0
  7972 ;;      Totals:         6       0       0       0       0       0       0
  7973 ;;Total ram usage:        6 bytes
  7974 ;; Hardware stack levels used:    1
  7975 ;; Hardware stack levels required when called:    1
  7976 ;; This function calls:
  7977 ;;		Nothing
  7978 ;; This function is called by:
  7979 ;;		_process_data_parameterize
  7980 ;; This function uses a non-reentrant model
  7981 ;;
  7982                           
  7983                           	psect	text57
  7984  001E70                     __ptext57:
  7985                           	opt stack 0
  7986  001E70                     ___wmul:
  7987                           	opt stack 25
  7988                           
  7989                           ;incstack = 0
  7990  001E70  5013               	movf	___wmul@multiplier,w,c
  7991  001E72  0215               	mulwf	___wmul@multiplicand,c
  7992  001E74  CFF3 F017          	movff	prodl,___wmul@product
  7993  001E78  CFF4 F018          	movff	prodh,___wmul@product+1
  7994  001E7C  5013               	movf	___wmul@multiplier,w,c
  7995  001E7E  0216               	mulwf	___wmul@multiplicand+1,c
  7996  001E80  50F3               	movf	prodl,w,c
  7997  001E82  2618               	addwf	___wmul@product+1,f,c
  7998  001E84  5014               	movf	___wmul@multiplier+1,w,c
  7999  001E86  0215               	mulwf	___wmul@multiplicand,c
  8000  001E88  50F3               	movf	prodl,w,c
  8001  001E8A  2618               	addwf	___wmul@product+1,f,c
  8002  001E8C  C017  F013         	movff	___wmul@product,?___wmul
  8003  001E90  C018  F014         	movff	___wmul@product+1,?___wmul+1
  8004  001E94  0012               	return	
  8005  001E96                     __end_of___wmul:
  8006                           	opt stack 0
  8007                           tblptru	equ	0xFF8
  8008                           tblptrh	equ	0xFF7
  8009                           tblptrl	equ	0xFF6
  8010                           tablat	equ	0xFF5
  8011                           prodh	equ	0xFF4
  8012                           prodl	equ	0xFF3
  8013                           intcon	equ	0xFF2
  8014                           intcon2	equ	0xFF1
  8015                           intcon3	equ	0xFF0
  8016                           postinc0	equ	0xFEE
  8017                           wreg	equ	0xFE8
  8018                           indf1	equ	0xFE7
  8019                           postinc1	equ	0xFE6
  8020                           fsr1h	equ	0xFE2
  8021                           fsr1l	equ	0xFE1
  8022                           indf2	equ	0xFDF
  8023                           postinc2	equ	0xFDE
  8024                           postdec2	equ	0xFDD
  8025                           fsr2h	equ	0xFDA
  8026                           fsr2l	equ	0xFD9
  8027                           status	equ	0xFD8
  8028                           
  8029 ;; *************** function _SPISlaveInit *****************
  8030 ;; Defined at:
  8031 ;;		line 690 in file "SlaveComm.c"
  8032 ;; Parameters:    Size  Location     Type
  8033 ;;		None
  8034 ;; Auto vars:     Size  Location     Type
  8035 ;;		None
  8036 ;; Return value:  Size  Location     Type
  8037 ;;                  1    wreg      void 
  8038 ;; Registers used:
  8039 ;;		wreg, status,2
  8040 ;; Tracked objects:
  8041 ;;		On entry : 0/0
  8042 ;;		On exit  : 0/0
  8043 ;;		Unchanged: 0/0
  8044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8045 ;;      Params:         0       0       0       0       0       0       0
  8046 ;;      Locals:         0       0       0       0       0       0       0
  8047 ;;      Temps:          0       0       0       0       0       0       0
  8048 ;;      Totals:         0       0       0       0       0       0       0
  8049 ;;Total ram usage:        0 bytes
  8050 ;; Hardware stack levels used:    1
  8051 ;; Hardware stack levels required when called:    1
  8052 ;; This function calls:
  8053 ;;		Nothing
  8054 ;; This function is called by:
  8055 ;;		_commInit
  8056 ;; This function uses a non-reentrant model
  8057 ;;
  8058                           
  8059                           	psect	text58
  8060  001E22                     __ptext58:
  8061                           	opt stack 0
  8062  001E22                     _SPISlaveInit:
  8063                           	opt stack 28
  8064                           
  8065                           ;SlaveComm.c: 693: SSP2CON1bits.SSPEN = 0;
  8066                           
  8067                           ;incstack = 0
  8068  001E22  9A6C               	bcf	3948,5,c	;volatile
  8069                           
  8070                           ;SlaveComm.c: 695: TRISBbits.RB0 = 0b1;
  8071  001E24  8093               	bsf	3987,0,c	;volatile
  8072                           
  8073                           ;SlaveComm.c: 696: TRISBbits.RB1 = 0b1;
  8074  001E26  8293               	bsf	3987,1,c	;volatile
  8075                           
  8076                           ;SlaveComm.c: 697: TRISBbits.RB2 = 0b1;
  8077  001E28  8493               	bsf	3987,2,c	;volatile
  8078                           
  8079                           ;SlaveComm.c: 698: TRISBbits.RB3 = 0b0;
  8080  001E2A  9693               	bcf	3987,3,c	;volatile
  8081                           
  8082                           ;SlaveComm.c: 700: SSP2STATbits.SMP = 0;
  8083  001E2C  9E6D               	bcf	3949,7,c	;volatile
  8084                           
  8085                           ;SlaveComm.c: 701: SSP2STATbits.CKE = 1;
  8086  001E2E  8C6D               	bsf	3949,6,c	;volatile
  8087                           
  8088                           ;SlaveComm.c: 703: SSP2CON1bits.WCOL = 0;
  8089  001E30  9E6C               	bcf	3948,7,c	;volatile
  8090                           
  8091                           ;SlaveComm.c: 704: SSP2CON1bits.SSPOV = 0;
  8092  001E32  9C6C               	bcf	3948,6,c	;volatile
  8093                           
  8094                           ;SlaveComm.c: 705: SSP2CON1bits.SSPEN = 0;
  8095  001E34  9A6C               	bcf	3948,5,c	;volatile
  8096                           
  8097                           ;SlaveComm.c: 706: SSP2CON1bits.CKP = 1;
  8098  001E36  886C               	bsf	3948,4,c	;volatile
  8099                           
  8100                           ;SlaveComm.c: 707: SSP2CON1bits.SSPM = 0b0100;
  8101  001E38  506C               	movf	3948,w,c	;volatile
  8102  001E3A  0BF0               	andlw	-16
  8103  001E3C  0904               	iorlw	4
  8104  001E3E  6E6C               	movwf	3948,c	;volatile
  8105                           
  8106                           ;SlaveComm.c: 709: SSP2CON3 = 0x00;
  8107  001E40  0E00               	movlw	0
  8108  001E42  6E69               	movwf	3945,c	;volatile
  8109                           
  8110                           ;SlaveComm.c: 710: SSP2CON3bits.BOEN = 0b0;
  8111  001E44  9869               	bcf	3945,4,c	;volatile
  8112                           
  8113                           ;SlaveComm.c: 712: SSP2CON1bits.SSPEN = 1;
  8114  001E46  8A6C               	bsf	3948,5,c	;volatile
  8115  001E48  0012               	return	
  8116  001E4A                     __end_of_SPISlaveInit:
  8117                           	opt stack 0
  8118                           tblptru	equ	0xFF8
  8119                           tblptrh	equ	0xFF7
  8120                           tblptrl	equ	0xFF6
  8121                           tablat	equ	0xFF5
  8122                           prodh	equ	0xFF4
  8123                           prodl	equ	0xFF3
  8124                           intcon	equ	0xFF2
  8125                           intcon2	equ	0xFF1
  8126                           intcon3	equ	0xFF0
  8127                           postinc0	equ	0xFEE
  8128                           wreg	equ	0xFE8
  8129                           indf1	equ	0xFE7
  8130                           postinc1	equ	0xFE6
  8131                           fsr1h	equ	0xFE2
  8132                           fsr1l	equ	0xFE1
  8133                           indf2	equ	0xFDF
  8134                           postinc2	equ	0xFDE
  8135                           postdec2	equ	0xFDD
  8136                           fsr2h	equ	0xFDA
  8137                           fsr2l	equ	0xFD9
  8138                           status	equ	0xFD8
  8139                           
  8140 ;; *************** function _Timer0_ISR *****************
  8141 ;; Defined at:
  8142 ;;		line 80 in file "Timer.c"
  8143 ;; Parameters:    Size  Location     Type
  8144 ;;		None
  8145 ;; Auto vars:     Size  Location     Type
  8146 ;;		None
  8147 ;; Return value:  Size  Location     Type
  8148 ;;                  1    wreg      void 
  8149 ;; Registers used:
  8150 ;;		wreg, status,2, status,0
  8151 ;; Tracked objects:
  8152 ;;		On entry : 0/0
  8153 ;;		On exit  : 0/0
  8154 ;;		Unchanged: 0/0
  8155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8156 ;;      Params:         0       0       0       0       0       0       0
  8157 ;;      Locals:         0       0       0       0       0       0       0
  8158 ;;      Temps:         18       0       0       0       0       0       0
  8159 ;;      Totals:        18       0       0       0       0       0       0
  8160 ;;Total ram usage:       18 bytes
  8161 ;; Hardware stack levels used:    1
  8162 ;; This function calls:
  8163 ;;		Nothing
  8164 ;; This function is called by:
  8165 ;;		Interrupt level 2
  8166 ;; This function uses a non-reentrant model
  8167 ;;
  8168                           
  8169                           	psect	intcode
  8170  000008                     __pintcode:
  8171                           	opt stack 0
  8172  000008                     _Timer0_ISR:
  8173                           	opt stack 20
  8174                           
  8175                           ;incstack = 0
  8176  000008  824D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8177  00000A  CFFA F001          	movff	pclath,??_Timer0_ISR
  8178  00000E  CFFB F002          	movff	pclatu,??_Timer0_ISR+1
  8179  000012  CFE9 F003          	movff	fsr0l,??_Timer0_ISR+2
  8180  000016  CFEA F004          	movff	fsr0h,??_Timer0_ISR+3
  8181  00001A  CFE1 F005          	movff	fsr1l,??_Timer0_ISR+4
  8182  00001E  CFE2 F006          	movff	fsr1h,??_Timer0_ISR+5
  8183  000022  CFD9 F007          	movff	fsr2l,??_Timer0_ISR+6
  8184  000026  CFDA F008          	movff	fsr2h,??_Timer0_ISR+7
  8185  00002A  CFF3 F009          	movff	prodl,??_Timer0_ISR+8
  8186  00002E  CFF4 F00A          	movff	prodh,??_Timer0_ISR+9
  8187  000032  CFF6 F00B          	movff	tblptrl,??_Timer0_ISR+10
  8188  000036  CFF7 F00C          	movff	tblptrh,??_Timer0_ISR+11
  8189  00003A  CFF8 F00D          	movff	tblptru,??_Timer0_ISR+12
  8190  00003E  CFF5 F00E          	movff	tablat,??_Timer0_ISR+13
  8191  000042  C04D  F00F         	movff	btemp,??_Timer0_ISR+14
  8192  000046  C04E  F010         	movff	btemp+1,??_Timer0_ISR+15
  8193  00004A  C04F  F011         	movff	btemp+2,??_Timer0_ISR+16
  8194  00004E  C050  F012         	movff	btemp+3,??_Timer0_ISR+17
  8195                           
  8196                           ;Timer.c: 82: INTCONbits.TMR0IF = 0;
  8197  000052  94F2               	bcf	intcon,2,c	;volatile
  8198                           
  8199                           ;Timer.c: 84: TMR0H = ((unsigned char)(((( 65536 - 1000 ))>>8)&0xFF));
  8200  000054  0EFC               	movlw	252
  8201  000056  6ED7               	movwf	4055,c	;volatile
  8202                           
  8203                           ;Timer.c: 85: TMR0L = ((unsigned char)((( 65536 - 1000 ))&0xFF));
  8204  000058  0E18               	movlw	24
  8205  00005A  6ED6               	movwf	4054,c	;volatile
  8206                           
  8207                           ;Timer.c: 87: timerCount_ms[0]++;
  8208  00005C  0E01               	movlw	1
  8209  00005E  0100               	movlb	0	; () banked
  8210  000060  2760               	addwf	_timerCount_ms& (0+255),f,b	;volatile
  8211  000062  0E00               	movlw	0
  8212  000064  2361               	addwfc	(_timerCount_ms+1)& (0+255),f,b	;volatile
  8213  000066  2362               	addwfc	(_timerCount_ms+2)& (0+255),f,b	;volatile
  8214  000068  2363               	addwfc	(_timerCount_ms+3)& (0+255),f,b	;volatile
  8215                           
  8216                           ; BSR set to: 0
  8217                           ;Timer.c: 88: timerCount_ms[1]++;
  8218  00006A  0E01               	movlw	1
  8219  00006C  2764               	addwf	(_timerCount_ms+4)& (0+255),f,b	;volatile
  8220  00006E  0E00               	movlw	0
  8221  000070  2365               	addwfc	(_timerCount_ms+5)& (0+255),f,b	;volatile
  8222  000072  2366               	addwfc	(_timerCount_ms+6)& (0+255),f,b	;volatile
  8223  000074  2367               	addwfc	(_timerCount_ms+7)& (0+255),f,b	;volatile
  8224                           
  8225                           ; BSR set to: 0
  8226                           ;Timer.c: 89: timerCount_ms[2]++;
  8227  000076  0E01               	movlw	1
  8228  000078  2768               	addwf	(_timerCount_ms+8)& (0+255),f,b	;volatile
  8229  00007A  0E00               	movlw	0
  8230  00007C  2369               	addwfc	(_timerCount_ms+9)& (0+255),f,b	;volatile
  8231  00007E  236A               	addwfc	(_timerCount_ms+10)& (0+255),f,b	;volatile
  8232  000080  236B               	addwfc	(_timerCount_ms+11)& (0+255),f,b	;volatile
  8233                           
  8234                           ; BSR set to: 0
  8235                           ;Timer.c: 90: timerCount_ms[3]++;
  8236  000082  0E01               	movlw	1
  8237  000084  276C               	addwf	(_timerCount_ms+12)& (0+255),f,b	;volatile
  8238  000086  0E00               	movlw	0
  8239  000088  236D               	addwfc	(_timerCount_ms+13)& (0+255),f,b	;volatile
  8240  00008A  236E               	addwfc	(_timerCount_ms+14)& (0+255),f,b	;volatile
  8241  00008C  236F               	addwfc	(_timerCount_ms+15)& (0+255),f,b	;volatile
  8242                           
  8243                           ; BSR set to: 0
  8244                           
  8245                           ; BSR set to: 0
  8246                           ;Timer.c: 92: return;
  8247  00008E  C012  F050         	movff	??_Timer0_ISR+17,btemp+3
  8248  000092  C011  F04F         	movff	??_Timer0_ISR+16,btemp+2
  8249  000096  C010  F04E         	movff	??_Timer0_ISR+15,btemp+1
  8250  00009A  C00F  F04D         	movff	??_Timer0_ISR+14,btemp
  8251  00009E  C00E  FFF5         	movff	??_Timer0_ISR+13,tablat
  8252  0000A2  C00D  FFF8         	movff	??_Timer0_ISR+12,tblptru
  8253  0000A6  C00C  FFF7         	movff	??_Timer0_ISR+11,tblptrh
  8254  0000AA  C00B  FFF6         	movff	??_Timer0_ISR+10,tblptrl
  8255  0000AE  C00A  FFF4         	movff	??_Timer0_ISR+9,prodh
  8256  0000B2  C009  FFF3         	movff	??_Timer0_ISR+8,prodl
  8257  0000B6  C008  FFDA         	movff	??_Timer0_ISR+7,fsr2h
  8258  0000BA  C007  FFD9         	movff	??_Timer0_ISR+6,fsr2l
  8259  0000BE  C006  FFE2         	movff	??_Timer0_ISR+5,fsr1h
  8260  0000C2  C005  FFE1         	movff	??_Timer0_ISR+4,fsr1l
  8261  0000C6  C004  FFEA         	movff	??_Timer0_ISR+3,fsr0h
  8262  0000CA  C003  FFE9         	movff	??_Timer0_ISR+2,fsr0l
  8263  0000CE  C002  FFFB         	movff	??_Timer0_ISR+1,pclatu
  8264  0000D2  C001  FFFA         	movff	??_Timer0_ISR,pclath
  8265  0000D6  924D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8266  0000D8  0011               	retfie		f
  8267  0000DA                     __end_of_Timer0_ISR:
  8268                           	opt stack 0
  8269                           pclatu	equ	0xFFB
  8270                           pclath	equ	0xFFA
  8271                           tblptru	equ	0xFF8
  8272                           tblptrh	equ	0xFF7
  8273                           tblptrl	equ	0xFF6
  8274                           tablat	equ	0xFF5
  8275                           prodh	equ	0xFF4
  8276                           prodl	equ	0xFF3
  8277                           intcon	equ	0xFF2
  8278                           intcon2	equ	0xFF1
  8279                           intcon3	equ	0xFF0
  8280                           postinc0	equ	0xFEE
  8281                           fsr0h	equ	0xFEA
  8282                           fsr0l	equ	0xFE9
  8283                           wreg	equ	0xFE8
  8284                           indf1	equ	0xFE7
  8285                           postinc1	equ	0xFE6
  8286                           fsr1h	equ	0xFE2
  8287                           fsr1l	equ	0xFE1
  8288                           indf2	equ	0xFDF
  8289                           postinc2	equ	0xFDE
  8290                           postdec2	equ	0xFDD
  8291                           fsr2h	equ	0xFDA
  8292                           fsr2l	equ	0xFD9
  8293                           status	equ	0xFD8
  8294                           pclatu	equ	0xFFB
  8295                           pclath	equ	0xFFA
  8296                           tblptru	equ	0xFF8
  8297                           tblptrh	equ	0xFF7
  8298                           tblptrl	equ	0xFF6
  8299                           tablat	equ	0xFF5
  8300                           prodh	equ	0xFF4
  8301                           prodl	equ	0xFF3
  8302                           intcon	equ	0xFF2
  8303                           intcon2	equ	0xFF1
  8304                           intcon3	equ	0xFF0
  8305                           postinc0	equ	0xFEE
  8306                           fsr0h	equ	0xFEA
  8307                           fsr0l	equ	0xFE9
  8308                           wreg	equ	0xFE8
  8309                           indf1	equ	0xFE7
  8310                           postinc1	equ	0xFE6
  8311                           fsr1h	equ	0xFE2
  8312                           fsr1l	equ	0xFE1
  8313                           indf2	equ	0xFDF
  8314                           postinc2	equ	0xFDE
  8315                           postdec2	equ	0xFDD
  8316                           fsr2h	equ	0xFDA
  8317                           fsr2l	equ	0xFD9
  8318                           status	equ	0xFD8
  8319                           
  8320                           	psect	rparam
  8321  0000                     pclatu	equ	0xFFB
  8322                           pclath	equ	0xFFA
  8323                           tblptru	equ	0xFF8
  8324                           tblptrh	equ	0xFF7
  8325                           tblptrl	equ	0xFF6
  8326                           tablat	equ	0xFF5
  8327                           prodh	equ	0xFF4
  8328                           prodl	equ	0xFF3
  8329                           intcon	equ	0xFF2
  8330                           intcon2	equ	0xFF1
  8331                           intcon3	equ	0xFF0
  8332                           postinc0	equ	0xFEE
  8333                           fsr0h	equ	0xFEA
  8334                           fsr0l	equ	0xFE9
  8335                           wreg	equ	0xFE8
  8336                           indf1	equ	0xFE7
  8337                           postinc1	equ	0xFE6
  8338                           fsr1h	equ	0xFE2
  8339                           fsr1l	equ	0xFE1
  8340                           indf2	equ	0xFDF
  8341                           postinc2	equ	0xFDE
  8342                           postdec2	equ	0xFDD
  8343                           fsr2h	equ	0xFDA
  8344                           fsr2l	equ	0xFD9
  8345                           status	equ	0xFD8
  8346                           
  8347                           	psect	temp
  8348  00004D                     btemp:
  8349                           	opt stack 0
  8350  00004D                     	ds	1
  8351  0000                     int$flags	set	btemp
  8352  0000                     wtemp6	set	btemp+1
  8353                           pclatu	equ	0xFFB
  8354                           pclath	equ	0xFFA
  8355                           tblptru	equ	0xFF8
  8356                           tblptrh	equ	0xFF7
  8357                           tblptrl	equ	0xFF6
  8358                           tablat	equ	0xFF5
  8359                           prodh	equ	0xFF4
  8360                           prodl	equ	0xFF3
  8361                           intcon	equ	0xFF2
  8362                           intcon2	equ	0xFF1
  8363                           intcon3	equ	0xFF0
  8364                           postinc0	equ	0xFEE
  8365                           fsr0h	equ	0xFEA
  8366                           fsr0l	equ	0xFE9
  8367                           wreg	equ	0xFE8
  8368                           indf1	equ	0xFE7
  8369                           postinc1	equ	0xFE6
  8370                           fsr1h	equ	0xFE2
  8371                           fsr1l	equ	0xFE1
  8372                           indf2	equ	0xFDF
  8373                           postinc2	equ	0xFDE
  8374                           postdec2	equ	0xFDD
  8375                           fsr2h	equ	0xFDA
  8376                           fsr2l	equ	0xFD9
  8377                           status	equ	0xFD8


Data Sizes:
    Strings     81
    Constant    0
    Data        0
    BSS         136
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     60      76
    BANK0           160     45     123
    BANK1           256     51      93
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    ultoa@buf	PTR unsigned char  size(2) Largest target is 12
		 -> com_command_setEnergyUsed@temp(BANK0[12]), com_command_setPower@temp(BANK0[12]), 

    sp__ltoa	PTR unsigned char  size(2) Largest target is 0

    utoa@buf	PTR unsigned char  size(2) Largest target is 16
		 -> xsum_builder@xsumBuf(BANK0[16]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 16
		 -> xsum_builder@xsumBuf(BANK0[16]), 

    itoa@buf	PTR unsigned char  size(2) Largest target is 16
		 -> xsum_builder@xsumBuf(BANK0[16]), 

    itoa@cp	PTR unsigned char  size(2) Largest target is 16
		 -> xsum_builder@xsumBuf(BANK0[16]), 

    atol@s	PTR const unsigned char  size(2) Largest target is 50
		 -> process_data@parameters(BANK1[50]), 

    com_command_setVersion@send_buffer	PTR struct buffer size(2) Largest target is 42
		 -> communications@send_buffer(BANK0[42]), 

    com_command_setEnergyUsed@send_buffer	PTR struct buffer size(2) Largest target is 42
		 -> communications@send_buffer(BANK0[42]), 

    com_command_setPower@send_buffer	PTR struct buffer size(2) Largest target is 42
		 -> communications@send_buffer(BANK0[42]), 

    sp__ultoa	PTR unsigned char  size(2) Largest target is 12
		 -> com_command_setEnergyUsed@temp(BANK0[12]), com_command_setPower@temp(BANK0[12]), 

    send_end_of_transmission@send_buffer	PTR struct buffer size(2) Largest target is 42
		 -> communications@send_buffer(BANK0[42]), 

    SPI_receive_data@data	PTR unsigned char  size(2) Largest target is 1
		 -> receive_data@data(COMRAM[1]), 

    strcmp2@b	PTR unsigned char  size(2) Largest target is 12
		 -> STR_11(CODE[10]), STR_10(CODE[5]), STR_9(CODE[6]), STR_8(CODE[7]), 
		 -> STR_7(CODE[6]), STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[7]), 
		 -> STR_3(CODE[12]), STR_2(CODE[4]), STR_1(CODE[4]), 

    strcmp2@a	PTR unsigned char  size(2) Largest target is 50
		 -> process_data@parameters(BANK1[50]), 

    strmatch@b	PTR unsigned char  size(2) Largest target is 12
		 -> STR_11(CODE[10]), STR_10(CODE[5]), STR_9(CODE[6]), STR_8(CODE[7]), 
		 -> STR_7(CODE[6]), STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[7]), 
		 -> STR_3(CODE[12]), STR_2(CODE[4]), STR_1(CODE[4]), 

    strmatch@a	PTR unsigned char  size(2) Largest target is 50
		 -> process_data@parameters(BANK1[50]), 

    send_data@send_buffer	PTR struct buffer size(2) Largest target is 42
		 -> communications@send_buffer(BANK0[42]), 

    command_builder_add_string@data_string	PTR unsigned char  size(2) Largest target is 16
		 -> STR_29(CODE[4]), STR_28(CODE[10]), STR_27(CODE[4]), STR_26(CODE[12]), 
		 -> STR_25(CODE[5]), STR_24(CODE[4]), STR_23(CODE[5]), STR_22(CODE[4]), 
		 -> STR_21(CODE[4]), STR_20(CODE[6]), STR_19(CODE[4]), STR_18(CODE[7]), 
		 -> STR_17(CODE[4]), com_command_setEnergyUsed@temp(BANK0[12]), STR_16(CODE[6]), STR_15(CODE[4]), 
		 -> com_command_setPower@temp(BANK0[12]), STR_14(CODE[5]), STR_13(CODE[5]), STR_12(CODE[4]), 
		 -> xsum_builder@xsumBuf(BANK0[16]), 

    command_builder_add_string@send_buffer	PTR struct buffer size(2) Largest target is 42
		 -> communications@send_buffer(BANK0[42]), 

    command_builder_add_char@send_buffer	PTR struct buffer size(2) Largest target is 42
		 -> communications@send_buffer(BANK0[42]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 16
		 -> xsum_builder@xsumBuf(BANK0[16]), 

    xsum_builder@send_buffer	PTR struct buffer size(2) Largest target is 42
		 -> communications@send_buffer(BANK0[42]), 

    command_builder3@data3	PTR unsigned char  size(2) Largest target is 12
		 -> STR_29(CODE[4]), STR_24(CODE[4]), STR_21(CODE[4]), com_command_setEnergyUsed@temp(BANK0[12]), 
		 -> com_command_setPower@temp(BANK0[12]), 

    command_builder3@data2	PTR unsigned char  size(2) Largest target is 10
		 -> STR_28(CODE[10]), STR_23(CODE[5]), STR_20(CODE[6]), STR_18(CODE[7]), 
		 -> STR_16(CODE[6]), 

    command_builder3@data1	PTR unsigned char  size(2) Largest target is 4
		 -> STR_27(CODE[4]), STR_22(CODE[4]), STR_19(CODE[4]), STR_17(CODE[4]), 
		 -> STR_15(CODE[4]), 

    command_builder3@send_buffer	PTR struct buffer size(2) Largest target is 42
		 -> communications@send_buffer(BANK0[42]), 

    command_builder1@data1	PTR unsigned char  size(2) Largest target is 4
		 -> STR_12(CODE[4]), 

    command_builder1@send_buffer	PTR struct buffer size(2) Largest target is 42
		 -> communications@send_buffer(BANK0[42]), 

    process_data_parameters@send_buffer	PTR struct buffer size(2) Largest target is 42
		 -> communications@send_buffer(BANK0[42]), 

    process_data_parameters@parameters	PTR unsigned char [10] size(2) Largest target is 50
		 -> process_data@parameters(BANK1[50]), 

    process_data_parameterize@buffer_to_parameterize	PTR struct buffer size(2) Largest target is 42
		 -> communications@receive_buffer(BANK1[42]), 

    process_data_parameterize@parameters	PTR unsigned char [10] size(2) Largest target is 50
		 -> process_data@parameters(BANK1[50]), 

    process_data@send_buffer	PTR struct buffer size(2) Largest target is 42
		 -> communications@send_buffer(BANK0[42]), 

    process_data@receive_buffer	PTR struct buffer size(2) Largest target is 42
		 -> communications@receive_buffer(BANK1[42]), 

    receive_data@receive_buffer	PTR struct buffer size(2) Largest target is 42
		 -> communications@receive_buffer(BANK1[42]), 

    resetCommunications@send_buffer	PTR struct buffer size(2) Largest target is 42
		 -> communications@send_buffer(BANK0[42]), 


Critical Paths under _main in COMRAM

    _mcpUpdatePower->_powerReduction
    _powerReduction->___lldiv
    _powerCalculateWatts->___lldiv
    _ledGoToggle->_ledToggle
    _mcpInit->_mcpInitF
    _mcpInitF->_delayMS10
    _ledSetAllOn->_ledSetAll
    _ledRun->_ledRunDown
    _ledRun->_ledRunUp
    _ledRunUp->_ledSetAll
    _ledRunDown->_ledSetAll
    _ledSetAllOff->_ledSetAll
    _ledSetAll->_ledSet
    _communications->_resetCommunications
    _send_data->_SPI_send_data
    _resetCommunications->_com_command_setEnergyUsed
    _resetCommunications->_com_command_setPower
    _resetCommunications->_com_command_setVersion
    _ledTestToggle->_ledToggle
    _ledToggle->_ledSet
    _com_command_setVersion->_command_builder3
    _com_command_setPower->_command_builder3
    _receive_data->_SPI_receive_data
    _process_data->_process_data_parameters
    _process_data_parameters->_com_command_setEnergyUsed
    _strmatch->_strcmp2
    _send_end_of_transmission->_command_builder1
    _command_builder1->_xsum_builder
    _com_command_setEnergyUsed->_command_builder3
    _ultoa->___lldiv
    _command_builder3->_xsum_builder
    _xsum_builder->_itoa
    _itoa->_utoa
    _utoa->___lwdiv
    _command_builder_add_string->_command_builder_add_char
    _atol->___lmul
    _process_data_parameterize->___wmul

Critical Paths under _Timer0_ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _commRun->_communications
    _commInit->_communications
    _communications->_process_data
    _resetCommunications->_com_command_setEnergyUsed
    _resetCommunications->_com_command_setPower
    _process_data->_process_data_parameters
    _process_data_parameters->_com_command_setEnergyUsed
    _command_builder1->_xsum_builder
    _command_builder3->_xsum_builder

Critical Paths under _Timer0_ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _communications->_process_data

Critical Paths under _Timer0_ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Timer0_ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Timer0_ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Timer0_ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Timer0_ISR in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0  302607
                                             38 BANK0      7     7      0
                            ___llmod
                           _commInit
                            _commRun
                             _initIO
                _initInterruptsClear
                            _initOSC
                            _ledInit
                             _ledRun
                       _ledSetAllOff
                        _ledSetAllOn
                      _ledTestToggle
                            _mcpInit
                     _mcpUpdatePower
                      _timerGetCount
                          _timerInit
 ---------------------------------------------------------------------------------
 (1) _timerInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _mcpUpdatePower                                       8     8      0    5516
                                             39 COMRAM     8     8      0
                        _ledGoToggle
                _powerCalculateWatts
                     _powerReduction
                      _timerGetCount
                    _timerResetCount
 ---------------------------------------------------------------------------------
 (2) _timerResetCount                                      4     2      2     326
                                             18 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _powerReduction                                       8     4      4    1715
                                             31 COMRAM     8     4      4
                            ___lldiv
                      _timerGetCount
 ---------------------------------------------------------------------------------
 (1) _timerGetCount                                        6     2      4     326
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _powerCalculateWatts                                  7     2      5    1631
                                             31 COMRAM     7     2      5
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) _ledGoToggle                                          2     0      2    1419
                                             32 COMRAM     2     0      2
                          _ledToggle
 ---------------------------------------------------------------------------------
 (1) _mcpInit                                              0     0      0    1612
                          _delayMS10
                           _mcpInitF
 ---------------------------------------------------------------------------------
 (2) _mcpInitF                                             1     1      0     806
                                             23 COMRAM     1     1      0
                          _delayMS10
 ---------------------------------------------------------------------------------
 (1) _ledSetAllOn                                          0     0      0    3802
                          _ledSetAll
 ---------------------------------------------------------------------------------
 (1) _ledRun                                               2     0      2   10918
                                             34 COMRAM     2     0      2
                         _ledRunDown
                           _ledRunUp
 ---------------------------------------------------------------------------------
 (2) _ledRunUp                                             4     2      2    5399
                                             30 COMRAM     4     2      2
                            ___awdiv
                          _delayMS10
                          _ledSetAll
 ---------------------------------------------------------------------------------
 (2) _ledRunDown                                           4     2      2    5399
                                             30 COMRAM     4     2      2
                            ___awdiv
                          _delayMS10
                          _ledSetAll
 ---------------------------------------------------------------------------------
 (3) _delayMS10                                            5     3      2     806
                                             18 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     604
                                             18 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _ledInit                                              0     0      0    3802
                       _ledSetAllOff
 ---------------------------------------------------------------------------------
 (1) _ledSetAllOff                                         0     0      0    3802
                          _ledSetAll
 ---------------------------------------------------------------------------------
 (2) _ledSetAll                                            6     0      6    3802
                                             24 COMRAM     6     0      6
                             _ledSet
 ---------------------------------------------------------------------------------
 (1) _initOSC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initInterruptsClear                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initIO                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _commRun                                              0     0      0  135358
                     _communications
 ---------------------------------------------------------------------------------
 (1) _commInit                                             0     0      0  135358
                       _SPISlaveInit
                     _communications
 ---------------------------------------------------------------------------------
 (2) _communications                                       2     2      0  135358
                                             36 BANK0      2     2      0
                       _process_data
                       _receive_data
                _resetCommunications
                          _send_data
 ---------------------------------------------------------------------------------
 (3) _send_data                                            5     3      2     301
                                             20 COMRAM     5     3      2
                      _SPI_send_data
 ---------------------------------------------------------------------------------
 (4) _SPI_send_data                                        2     2      0      47
                                             18 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _resetCommunications                                  4     2      2   78890
                                             58 COMRAM     2     0      2
                                             28 BANK0      2     2      0
          _com_command_setEnergyUsed
               _com_command_setPower
             _com_command_setVersion
                      _ledTestToggle
 ---------------------------------------------------------------------------------
 (1) _ledTestToggle                                        2     0      2    1419
                                             32 COMRAM     2     0      2
                          _ledToggle
 ---------------------------------------------------------------------------------
 (3) _ledToggle                                            8     6      2    1245
                                             24 COMRAM     8     6      2
                             _ledSet
 ---------------------------------------------------------------------------------
 (4) _ledSet                                               6     2      4    1000
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _com_command_setVersion                               2     0      2   23682
                                             56 COMRAM     2     0      2
                   _command_builder3
 ---------------------------------------------------------------------------------
 (4) _com_command_setPower                                14    12      2   26682
                                             56 COMRAM     2     0      2
                                             16 BANK0     12    12      0
                   _command_builder3
                              _ultoa
 ---------------------------------------------------------------------------------
 (3) _receive_data                                         4     2      2     443
                                             21 COMRAM     4     2      2
                   _SPI_receive_data
 ---------------------------------------------------------------------------------
 (4) _SPI_receive_data                                     3     1      2     123
                                             18 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (3) _process_data                                        55    51      4   55690
                                             32 BANK0      4     0      4
                                              0 BANK1     51    51      0
          _process_data_parameterize
            _process_data_parameters
 ---------------------------------------------------------------------------------
 (4) _process_data_parameters                              5     1      4   54003
                                             58 COMRAM     1     1      0
                                             28 BANK0      4     0      4
                               _atol
          _com_command_setEnergyUsed
           _send_end_of_transmission
                           _strmatch
 ---------------------------------------------------------------------------------
 (5) _strmatch                                             7     3      4    3117
                                             29 COMRAM     7     3      4
                            _strcmp2
 ---------------------------------------------------------------------------------
 (6) _strcmp2                                             11     7      4    1007
                                             18 COMRAM    11     7      4
 ---------------------------------------------------------------------------------
 (5) _send_end_of_transmission                             2     0      2   22224
                                             52 COMRAM     2     0      2
                   _command_builder1
 ---------------------------------------------------------------------------------
 (6) _command_builder1                                     6     2      4   21743
                                             46 COMRAM     6     2      4
           _command_builder_add_char
         _command_builder_add_string
                       _xsum_builder
 ---------------------------------------------------------------------------------
 (4) _com_command_setEnergyUsed                           14    12      2   26772
                                             56 COMRAM     2     0      2
                                             16 BANK0     12    12      0
                   _command_builder3
                              _ultoa
 ---------------------------------------------------------------------------------
 (5) _ultoa                                               13     5      8    2920
                                             31 COMRAM    13     5      8
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (6) ___llmod                                              9     1      8     592
                                             18 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8    1141
                                             18 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (5) _command_builder3                                    10     2      8   23561
                                             46 COMRAM    10     2      8
           _command_builder_add_char
         _command_builder_add_string
                       _xsum_builder
 ---------------------------------------------------------------------------------
 (6) _xsum_builder                                        20    16      4   12279
                                             42 COMRAM     4     0      4
                                              0 BANK0     16    16      0
           _command_builder_add_char
         _command_builder_add_string
                               _itoa
 ---------------------------------------------------------------------------------
 (7) _itoa                                                 8     2      6    2226
                                             34 COMRAM     8     2      6
                               _utoa
 ---------------------------------------------------------------------------------
 (8) _utoa                                                 9     3      6    1723
                                             25 COMRAM     9     3      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (9) ___lwmod                                              5     1      4     412
                                             18 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (9) ___lwdiv                                              7     3      4     601
                                             18 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (7) _command_builder_add_string                          10     6      4    5635
                                             22 COMRAM    10     6      4
           _command_builder_add_char
 ---------------------------------------------------------------------------------
 (8) _command_builder_add_char                             4     1      3    3457
                                             18 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (5) _atol                                                14    10      4    1115
                                             30 COMRAM    14    10      4
                             ___lmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (6) _isdigit                                              3     3      0      99
                                             18 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) ___lmul                                              12     4      8     456
                                             18 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (4) _process_data_parameterize                           11     7      4    1301
                                             24 COMRAM    11     7      4
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     412
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _SPISlaveInit                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _Timer0_ISR                                         18    18      0       0
                                              0 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___llmod
   _commInit
     _SPISlaveInit
     _communications
       _process_data
         _process_data_parameterize
           ___wmul
         _process_data_parameters
           _atol
             ___lmul
             _isdigit
           _com_command_setEnergyUsed
             _command_builder3
               _command_builder_add_char
               _command_builder_add_string
                 _command_builder_add_char
               _xsum_builder
                 _command_builder_add_char
                 _command_builder_add_string
                   _command_builder_add_char
                 _itoa
                   _utoa
                     ___lwdiv
                     ___lwmod
             _ultoa
               ___lldiv
               ___llmod
           _send_end_of_transmission
             _command_builder1
               _command_builder_add_char
               _command_builder_add_string
                 _command_builder_add_char
               _xsum_builder
                 _command_builder_add_char
                 _command_builder_add_string
                   _command_builder_add_char
                 _itoa
                   _utoa
                     ___lwdiv
                     ___lwmod
           _strmatch
             _strcmp2
       _receive_data
         _SPI_receive_data
       _resetCommunications
         _com_command_setEnergyUsed
           _command_builder3
             _command_builder_add_char
             _command_builder_add_string
               _command_builder_add_char
             _xsum_builder
               _command_builder_add_char
               _command_builder_add_string
                 _command_builder_add_char
               _itoa
                 _utoa
                   ___lwdiv
                   ___lwmod
           _ultoa
             ___lldiv
             ___llmod
         _com_command_setPower
           _command_builder3
             _command_builder_add_char
             _command_builder_add_string
               _command_builder_add_char
             _xsum_builder
               _command_builder_add_char
               _command_builder_add_string
                 _command_builder_add_char
               _itoa
                 _utoa
                   ___lwdiv
                   ___lwmod
           _ultoa
             ___lldiv
             ___llmod
         _com_command_setVersion
           _command_builder3
             _command_builder_add_char
             _command_builder_add_string
               _command_builder_add_char
             _xsum_builder
               _command_builder_add_char
               _command_builder_add_string
                 _command_builder_add_char
               _itoa
                 _utoa
                   ___lwdiv
                   ___lwmod
         _ledTestToggle
           _ledToggle
             _ledSet
       _send_data
         _SPI_send_data
   _commRun
     _communications
       _process_data
         _process_data_parameterize
           ___wmul
         _process_data_parameters
           _atol
             ___lmul
             _isdigit
           _com_command_setEnergyUsed
             _command_builder3
               _command_builder_add_char
               _command_builder_add_string
                 _command_builder_add_char
               _xsum_builder
                 _command_builder_add_char
                 _command_builder_add_string
                   _command_builder_add_char
                 _itoa
                   _utoa
                     ___lwdiv
                     ___lwmod
             _ultoa
               ___lldiv
               ___llmod
           _send_end_of_transmission
             _command_builder1
               _command_builder_add_char
               _command_builder_add_string
                 _command_builder_add_char
               _xsum_builder
                 _command_builder_add_char
                 _command_builder_add_string
                   _command_builder_add_char
                 _itoa
                   _utoa
                     ___lwdiv
                     ___lwmod
           _strmatch
             _strcmp2
       _receive_data
         _SPI_receive_data
       _resetCommunications
         _com_command_setEnergyUsed
           _command_builder3
             _command_builder_add_char
             _command_builder_add_string
               _command_builder_add_char
             _xsum_builder
               _command_builder_add_char
               _command_builder_add_string
                 _command_builder_add_char
               _itoa
                 _utoa
                   ___lwdiv
                   ___lwmod
           _ultoa
             ___lldiv
             ___llmod
         _com_command_setPower
           _command_builder3
             _command_builder_add_char
             _command_builder_add_string
               _command_builder_add_char
             _xsum_builder
               _command_builder_add_char
               _command_builder_add_string
                 _command_builder_add_char
               _itoa
                 _utoa
                   ___lwdiv
                   ___lwmod
           _ultoa
             ___lldiv
             ___llmod
         _com_command_setVersion
           _command_builder3
             _command_builder_add_char
             _command_builder_add_string
               _command_builder_add_char
             _xsum_builder
               _command_builder_add_char
               _command_builder_add_string
                 _command_builder_add_char
               _itoa
                 _utoa
                   ___lwdiv
                   ___lwmod
         _ledTestToggle
           _ledToggle
             _ledSet
       _send_data
         _SPI_send_data
   _initIO
   _initInterruptsClear
   _initOSC
   _ledInit
     _ledSetAllOff
       _ledSetAll
         _ledSet
   _ledRun
     _ledRunDown
       ___awdiv
       _delayMS10
       _ledSetAll
         _ledSet
     _ledRunUp
       ___awdiv
       _delayMS10
       _ledSetAll
         _ledSet
   _ledSetAllOff
     _ledSetAll
       _ledSet
   _ledSetAllOn
     _ledSetAll
       _ledSet
   _ledTestToggle
     _ledToggle
       _ledSet
   _mcpInit
     _delayMS10
     _mcpInitF
       _delayMS10
   _mcpUpdatePower
     _ledGoToggle
       _ledToggle
         _ledSet
     _powerCalculateWatts
       ___lldiv
     _powerReduction
       ___lldiv
       _timerGetCount
     _timerGetCount
     _timerResetCount
   _timerGetCount
   _timerInit

 _Timer0_ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100     33      5D       6       36.3%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     2D      7B       4       76.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3C      4C       1       80.9%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     124       9        0.0%
DATA                 0      0     124      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Feb 15 17:15:08 2020

                                       _SPISlaveInit 1E22                                                   l22 1B28  
                                                 l23 1B04                                                   l25 1B10  
                                    ??_timerGetCount 0017                                                   l26 1B1C  
                                                 l90 173E                                                   l85 170A  
                                                 l86 16E8                                                   l87 172E  
                                                 l88 16F6                                                   l89 16FC  
                           __size_of_timerResetCount 002A                                         ___awdiv@sign 0018  
                                ___wmul@multiplicand 0015                                       ??_ledSetAllOff 001F  
                                       __CFG_CP0$OFF 000000                                         __CFG_CP1$OFF 000000  
                                       __CFG_CP2$OFF 000000                                         __CFG_CP3$OFF 000000  
                                                l200 13B8                                                  l212 12B8  
                                                l204 1408                                                  l213 1286  
                                                l310 0B46                                                  l302 15DC  
                                                l206 141A                                                  l311 0B7A  
                                                l223 1008                                                  l215 1294  
                                                l216 12A2                                                  l241 0ACA  
                                                l321 0C56                                                  l313 0BAC  
                                                l225 104C                                                  l217 12AE  
                                                l242 0A0A                                                  l330 1EAE  
                                                l235 09D8                                                  l227 10A6  
                                                l244 0A1C                                                  l252 0678  
                                                l228 10B8                                                  l237 0AD8  
                                                l245 0A70                                                  l309 0BB0  
                                                l325 1E1A                                                  l270 081A  
                                                l262 0764                                                  l254 0702  
                                                l326 1E1E                                                  l239 0A9A  
                                                l319 0C1E                                                  l264 0792  
                                                l266 07C0                                                  l194 13A6  
                                                l530 095E                                                  l450 0E80  
                                                l531 0978                                                  l523 095A  
                                                l268 07EE                                                  l196 13DA  
                                                l516 089E                                                  l452 0EC4  
                                                l293 1514                                                  l294 14CE  
                                                l198 13EE                                                  l518 08A2  
                                                l543 1472                                                  l527 0944  
                                                l455 0F32                                                  l536 1788  
                                                l528 0928                                                  l289 19AC  
                                                l299 157C                                                  l750 0DA0  
                                                l592 1A1E                                                  l752 0E38  
                                                l593 1A32                                                  l577 1D58  
                                                l746 0D96                                                  l930 1C06  
                                                l770 164C                                                  l762 15F4  
                                                l578 1D46                                                  l771 165A  
                                                l763 1604                                                  l924 1F08  
                                                l749 0DF4                                                  l765 1622  
                                                l934 12E8                                                  l766 161A  
                                                l936 1322                                                  l937 1360  
                                                l769 1642                                                  l964 1692  
                                                l965 1686                                                  l974 17E6  
                                                l975 17DA                                                  l968 16C6  
                                                l969 16D4                                                  l978 180E  
                                                l979 181C                                         __CFG_CPB$OFF 000000  
                                       __CFG_CPD$OFF 000000                                      ?_powerReduction 0020  
                                                wreg 000FE8                              __size_of_mcpUpdatePower 0196  
                                       __CFG_LVP$OFF 000000                                ??_resetCommunications 00CA  
                                               l1020 0D32                                                 l1031 1A82  
                                               l1032 1A7A                                                 l1041 1C3A  
                                               l1017 0C70                                                 l1042 1C32  
                                               l1035 1AA2                                                 l1019 0CC8  
                                               l1036 1AAC                                                 l1045 1C52  
                                               l1046 1C5C                                                 l4123 0EB4  
                                               l4049 0928                                                 l3835 0AD8  
                                               l3977 145E                                                 STR_1 064A  
                                               STR_2 064E                                                 STR_3 0601  
                    __size_of_com_command_setVersion 0026                                                 STR_4 0617  
                                               STR_5 062F                                                 STR_6 0634  
                                               STR_7 0624                                                 STR_8 0617  
                                               STR_9 061E                                                 u1305 1B18  
                                               u2210 1C3E                                                 u1306 1B1A  
                                               u1315 1B24                                                 u1316 1B26  
                                               u1500 1706                                                 u1501 1700  
                                               u3007 189E                                                 u2320 1696  
                                               u3017 18B0                                                 u2410 0BE8  
                                               u3027 18C6                                                 u2180 1A86  
                                               u3037 18DC                                                 u2270 1502  
                                               u2350 17EA                                                 u1295 1B0C  
                                               u3047 1D4C                                                 u2280 1540  
                                               u1296 1B0E                                                 u3057 124E  
                                               u2610 09D6                                                 u2530 1DC8  
                                               u2540 1DCA                                                 u2277 14F8  
                                               _IPR1 000F9F                                                 _IPR2 000FA2  
                                               u2287 1536                                                 _PIE1 000F9D  
                                               _IPR3 000FA5                                                 u1488 16EE  
                                               _PIE2 000FA0                                                 _IPR4 000F7C  
                                               _PIE3 000FA3                                                 _IPR5 000F7F  
                                               _PIE4 000F7A                                                 _PIE5 000F7D  
                                               u2900 08AA                                                 u1950 1626  
                                               u2850 145E                                                 u2950 0EB4  
                                               _PIR1 000F9E                                                 _PIR2 000FA1  
                                               u2987 0E8C                                                 _PIR3 000FA4  
                                               _PIR4 000F7B                                                 u2997 0EA2  
                                               _PIR5 000F7E                                          main@oneShot 0080  
                                               _atol 0D56                                                 _main 0E4A  
                                               _itoa 1BE2                                                 fsr0h 000FEA  
                                               fsr1h 000FE2                                                 fsr2h 000FDA  
                                               fsr0l 000FE9                                                 indf1 000FE7  
                                               indf2 000FDF                                                 fsr1l 000FE1  
                                               fsr2l 000FD9                                                 btemp 004D  
                                               _utoa 12E0                                        __CFG_BORV$190 000000  
                             __size_of_SPI_send_data 0020                                                 prodh 000FF4  
                                               prodl 000FF3                                                 start 00DA  
                                      __CFG_IESO$OFF 000000                              communications@firstTime 00D3  
                      __size_of_com_command_setPower 004A                                         ___param_bank 000000  
                    mcpUpdatePower@timerHFoutLast_ms 0070                                 __end_of_xsum_builder 1958  
                                     _communications 1384                                      ??_ledTestToggle 0023  
                                              ?_atol 001F                                                ?_main 0001  
                                              ?_itoa 0023                                      __end_of___awdiv 1664  
                                              STR_10 0639                                                STR_11 060D  
                                              STR_12 064A                                                STR_21 063E  
                                              STR_14 062A                                                STR_15 064E  
                                              STR_16 0624                                                STR_24 0642  
                                              STR_17 064E                                                STR_18 0617  
                                              STR_27 064E                                                STR_28 060D  
                                              STR_29 0646                                      __end_of___lldiv 16E6  
                                              ?_utoa 001A                                      ___awdiv@divisor 0015  
                                    __end_of___llmod 182E                                       __CFG_DEBUG$OFF 000000  
                                    __end_of___lwdiv 1AB6                                      __end_of___lwmod 1C66  
                                  ?_command_builder1 002F                                    ?_command_builder3 002F  
                                    ___awdiv@counter 0017                                                _TMR0H 000FD7  
                                              _TMR0L 000FD6                                  _initInterruptsClear 1AB6  
                                      __CFG_WRT0$OFF 000000                                        __CFG_WRT1$OFF 000000  
                                      __CFG_WRT2$OFF 000000                                  ___lmul@multiplicand 0017  
                                      __CFG_WRT3$OFF 000000                         ??_command_builder_add_string 001B  
                                 ??_command_builder1 0033                                   ??_command_builder3 0037  
                                     __CFG_EBTR0$OFF 000000                                       __CFG_FCMEN$OFF 000000  
                                     __CFG_EBTR1$OFF 000000                                      __end_of_ledInit 1F84  
                                     __CFG_EBTR2$OFF 000000                                       __CFG_EBTR3$OFF 000000  
                                    __end_of_commRun 1F98                   process_data_parameters@send_buffer 00CC  
                          powerReduction@countReduce 0041                                        __CFG_WRTB$OFF 000000  
                                      __CFG_WRTC$OFF 000000                                        __CFG_WRTD$OFF 000000  
                                    __end_of_mcpInit 1CD8                                       __CFG_EBTRB$OFF 000000  
                                    __end_of_initOSC 1F42                                      __end_of_isdigit 1F10  
                                 __CFG_MCLRE$EXTMCLR 000000                                                atol@a 0028  
                                              atol@c 002C                                                atol@s 001F  
                                              _ultoa 0C60                                                pclath 000FFA  
                                 main@timerHeartbeat 00D5                                                tablat 000FF5  
                                              utoa@c 0022                                                utoa@v 0020  
                                              status 000FD8                                                wtemp6 004E  
                                    __end_of_strcmp2 0C60                                       __CFG_HFOFST$ON 000000  
                                     __CFG_PBADEN$ON 000000                          ??_process_data_parameterize 001D  
               com_command_setEnergyUsed@send_buffer 0039                                 ?_initInterruptsClear 0001  
                      command_builder_add_string@inx 001F                                      __initialization 1CD8  
                                       __end_of_atol 0E4A                                         __end_of_main 0F3A  
                                       __end_of_itoa 1C24                               __end_of_communications 1422  
                                       __end_of_utoa 1384                               _com_command_setVersion 1E4A  
                __size_of_command_builder_add_string 0094                                     _SPI_receive_data 1DFA  
                         powerReduction@timerLast_ms 0020                         command_builder_add_char@data 0015  
                                             ??_atol 0023                                               ??_main 00D4  
                                ledRunUp@ledRunDelay 001F                                               ??_itoa 0029  
                                      _SPI_send_data 1E96                                               ??_utoa 0020  
                                      __activetblptr 000002                              _process_data_parameters 0654  
                                  ??_timerResetCount 0015                                 __size_of_ledGoToggle 0002  
                                   receive_data@data 0019                                     ___llmod@dividend 0013  
                                   ___awdiv@dividend 0013                                               _ANSELA 000F38  
                                             _ANSELB 000F39                                               _ANSELC 000F3A  
                                             ?_ultoa 0020                                       __CFG_WDTEN$OFF 000000  
                                             _INTCON 000FF2                                SPI_send_data@sendGood 0014  
                               __size_of_ledSetAllOn 001E                                 __end_of_ledSetAllOff 1EF2  
                              ??_initInterruptsClear 0013                                           _Timer0_ISR 0008  
                                     __CFG_XINST$OFF 000000                                     __end_of_commInit 1F90  
                                   __end_of_ledRunUp 117A                         powerCalculateWatts@calcWatts 0025  
                                   __end_of_mcpInitF 18F6                                               ___lmul 1A0E  
                                             ___wmul 1E70                                            ??___awdiv 0017  
                                    ?_communications 0001                                       __CFG_STVREN$ON 000000  
                                          ??___lldiv 001B                                            ??___llmod 001B  
                                          ??___lwdiv 0017                                               _ledSet 1B02  
                                          ??___lwmod 0017                                               _ledRun 1F10  
                                             _initIO 1F58                                               clear_0 1CDE  
                                             clear_1 1CEA                                               clear_2 1CF6  
                                   ___awdiv@quotient 0019                         powerReduction@timerReduce_ms 0024  
                                     ?_SPI_send_data 0001                                            ??_ledInit 001F  
                                          ??_commRun 003D                           ?_com_command_setEnergyUsed 0039  
                                          ??_mcpInit 0019                                            ??_initOSC 0013  
                          _process_data_parameterize 09B4                                               itoa@cp 0029  
                                          ??_isdigit 0013                                       _mcpUpdatePower 081E  
                                  ledToggle@getValue 001F                                         __mediumconst 0000  
                                             tblptrh 000FF7                                               tblptrl 000FF6  
                                             tblptru 000FF8                                               ultoa@c 002C  
                           com_command_setPower@temp 00BE                                               ultoa@v 0028  
                                          ??_strcmp2 0017                                     __end_of_strmatch 1DD0  
                                   xsum_builder@xsum 002D                                        ?_receive_data 0016  
                                         __accesstop 0060                              __end_of__initialization 1CFC  
                                  ledToggle@setValue 001D                      com_command_setPower@send_buffer 0039  
                            timerGetCount@timerIndex 0013                                        ___rparam_used 000001  
                                  SPI_send_data@data 0013                                    ledRunUp@delay10ms 0021  
                              __size_of_xsum_builder 0062                                       __pcstackCOMRAM 0001  
                                 __size_of_delayMS10 0032                           receive_data@receive_buffer 0016  
                                   ??_powerReduction 0024                                        __end_of_ultoa 0D56  
                          ??_process_data_parameters 003B                         communications@receive_buffer 0133  
                             __end_of_mcpUpdatePower 09B4                command_builder_add_string@data_string 0019  
                 __end_of_command_builder_add_string 1550                           _command_builder_add_string 14BC  
                                 __size_of_ledSetAll 003E                                   __size_of_ledToggle 0076  
                                    ledToggle@ledNum 0019                                              ??_ultoa 0028  
                                         __pbssBANK0 0060                                           __pbssBANK1 0133  
                                     ??_receive_data 0018                                         _xsum_builder 18F6  
                                    __CFG_PLLCFG$OFF 000000                                         strcmp2@match 001A  
                                        ?_Timer0_ISR 0001                                   __CFG_CCP2MX$PORTC1 000000  
                       __size_of_powerCalculateWatts 006C                                              ?___lmul 0013  
                               command_builder1@xsum 0033                                              ?___wmul 0013  
                               command_builder3@xsum 0037                                   __CFG_CCP3MX$PORTB5 000000  
                                            ?_ledSet 0013                                      ??_SPI_send_data 0013  
                                            ?_ledRun 0023                                   __size_of_send_data 0090  
                                            ?_initIO 0001  process_data_parameters@end_of_transmission_received 003B  
         communications@end_of_transmission_received 0083                                       ___lmul@product 001B  
                              __end_of_timerGetCount 1D3C                                      ?_mcpUpdatePower 0001  
                        __end_of_resetCommunications 12E0                                   __size_of_timerInit 0064  
                                            _INTCON2 000FF1                                              _INTCON3 000FF0  
                                         _ledRunDown 117A                         __end_of_com_command_setPower 1B98  
                                  __CFG_PRICLKEN$OFF 000000                             _send_end_of_transmission 1F42  
                                            _SSP2BUF 000F6F                                __size_of_ledSetAllOff 001E  
                                          ?_commInit 0001                                            ?_ledRunUp 001F  
                           _command_builder_add_char 1958                                            ?_mcpInitF 0001  
                                  __end_of_delayMS10 1D6E                      __end_of_process_data_parameters 081E  
                           __end_of_SPI_receive_data 1E22                            __size_of_command_builder1 005A  
                          __size_of_command_builder3 00C2                                  ledRunDown@delay10ms 0021  
    process_data_parameterize@buffer_to_parameterize 001B                                      __CFG_PWRTEN$OFF 000000  
                                            __Hparam 0000                              ?_com_command_setVersion 0039  
                                            __Lparam 0000                                    __end_of_ledSetAll 1CA4  
                                  __end_of_ledToggle 175C                                      _timerResetCount 1DD0  
                                            ___awdiv 15E0                                      __size_of___lmul 0056  
           process_data_parameterize@parameter_index 0022                                              ___lldiv 1664  
                                    __size_of___wmul 0026                                              ___llmod 17C8  
                                            ___lwdiv 1A64                                              ___lwmod 1C24  
                                       __psmallconst 0600                                      __size_of_ledSet 004C  
                                    __size_of_ledRun 001A                                 SPI_receive_data@data 0013  
                                    __size_of_initIO 0012                                              __pcinit 1CD8  
                                            __ramtop 0600                                            ?_strmatch 001E  
                                            __ptext0 0E4A                                              __ptext1 182E  
                                            __ptext2 081E                                              __ptext3 1DD0  
                                            __ptext4 1422                                              __ptext5 1D0A  
                                            __ptext6 175C                                              _ledInit 1F78  
                                            __ptext7 1F98                                              __ptext8 1CA4  
                                            __ptext9 1892                                              _commRun 1F90  
                                          _T0CONbits 000FD5                                         _ledSetAllOff 1ED4  
                                            _mcpInit 1CA4                                              _initOSC 1F2A  
                              __end_of_ledTestToggle 1F78                                              _isdigit 1EF2  
                                __size_of_Timer0_ISR 00D2                                           ??_commInit 003D  
                                            main@inx 00D9                                              _strcmp2 0B34  
                                         ??_ledRunUp 0021                                 end_of_initialization 1CFC  
                                         ??_mcpInitF 0018                   __size_of_process_data_parameterize 0180  
                                  __end_of_send_data 15E0                                              itoa@buf 0023  
                                            itoa@val 0025                                        __Lmediumconst 0000  
                     __end_of_com_command_setVersion 1E70                                     ??_communications 003D  
                                  __end_of_timerInit 1892                                      ___lldiv@divisor 0017  
                                    ___lldiv@counter 001F          process_data_parameterize@parameter_position 0023  
                                            postdec2 000FDD                                              postinc0 000FEE  
                                            postinc1 000FE6                                              postinc2 000FDE  
                                            utoa@buf 001A                                              utoa@val 001C  
                              receive_data@my_status 004B                                 __end_of_receive_data 10BC  
                                         ??_strmatch 0022                                            _PORTAbits 000F80  
                                          _PORTBbits 000F81                                            _PORTCbits 000F82  
                                      ??_ledGoToggle 0023                      communications@last_state_active 0081  
                        ??_com_command_setEnergyUsed 003B                                        ?_process_data 00CE  
                                 ledSetAll@led1Value 0019                                   ledSetAll@led2Value 001B  
                                 ledSetAll@led3Value 001D                                          ?_ledRunDown 001F  
                                          _TRISAbits 000F92                                            _TRISBbits 000F93  
                                          _TRISCbits 000F94                                        ??_ledSetAllOn 001F  
                         process_data@receive_buffer 00CE                          __end_of_initInterruptsClear 1B02  
                  __end_of_process_data_parameterize 0B34                              __end_of_timerResetCount 1DFA  
                               _com_command_setPower 1B4E                  communications@receive_current_state 0082  
                                      ?_SPISlaveInit 0001                                       __end_of___lmul 1A64  
                                     __end_of___wmul 1E96                                       __end_of_ledSet 1B4E  
                                     __end_of_ledRun 1F2A                command_builder_add_string@send_buffer 0017  
                                     __end_of_initIO 1F6A                                       ??_process_data 003C  
                        ?_command_builder_add_string 0017                                  start_initialization 1CD8  
                                _powerCalculateWatts 175C                                  __end_of_ledGoToggle 1F9A  
                       resetCommunications@commState 0047                                     _command_builder1 19B4  
                                   _command_builder3 0F3A                            _com_command_setEnergyUsed 1B98  
                                    ___llmod@divisor 0017                                      ___llmod@counter 001B  
                  com_command_setVersion@send_buffer 0039                                  __end_of_ledSetAllOn 1ED4  
                                       ??_Timer0_ISR 0001                                 send_data@send_buffer 0015  
                              ?_com_command_setPower 0039                                  __size_of_ledRunDown 00BE  
                               ?_powerCalculateWatts 0020                                       ??_SPISlaveInit 0013  
                                           ??___lmul 001B                                     ??_mcpUpdatePower 0028  
                                           ??___wmul 0017                  send_end_of_transmission@send_buffer 0035  
                                           ??_ledSet 0017                                             ??_ledRun 0025  
                                           ??_initIO 0013                           ??_send_end_of_transmission 0037  
                         ??_command_builder_add_char 0016                                          __pbssCOMRAM 003D  
                                      __pcstackBANK0 00AE                                        __pcstackBANK1 0100  
                           SPI_receive_data@recvGood 0015                                   __end_of_Timer0_ISR 00DA  
                                       _isdigit$2299 0014                                    __size_of_commInit 000C  
                                  __size_of_ledRunUp 00BE                                    __size_of_mcpInitF 0064  
                                     delayMS10@count 0013                                    ?_SPI_receive_data 0013  
                                          _delayMS10 1D3C                                     ?_timerResetCount 0013  
                      com_command_setEnergyUsed@temp 00BE                             powerCalculateWatts@outHF 0024  
                                 ??_SPI_receive_data 0015                                         delayMS10@inx 0016  
                                   ___lwdiv@dividend 0013                                ??_powerCalculateWatts 0025  
                              command_builder1@data1 0031                          command_builder1@send_buffer 002F  
                           ?_process_data_parameters 00CA                                __size_of_receive_data 00C0  
                                          __pintcode 0008                                command_builder3@data1 0031  
                              command_builder3@data2 0033                                command_builder3@data3 0035  
                                           ?___awdiv 0013                                             ?___lldiv 0013  
                              ledRunDown@ledRunDelay 001F                                             ?___llmod 0013  
                                           ?___lwdiv 0013                                             ?___lwmod 0013  
                                          _ledSetAll 1C66                                            _ledToggle 16E6  
                         mcpUpdatePower@meterWattsHF 0045                                __end_of_SPI_send_data 1EB6  
                         mcpUpdatePower@meterWattsLF 0043                                             ?_ledInit 0001  
                                           ?_commRun 0001                                             ?_mcpInit 0001  
                                           ?_initOSC 0001                                          __smallconst 0600  
                                        _ledGoToggle 1F98                       resetCommunications@send_buffer 003B  
                                           ?_isdigit 0001                                    __size_of_strmatch 0030  
                            xsum_builder@send_buffer 002B                           mcpUpdatePower@oneShotHFout 004A  
                                  send_data@send_end 0019                           mcpUpdatePower@oneShotLFout 0049  
                            __size_of_powerReduction 009A                                     ___lwdiv@quotient 0018  
                                           ?_strcmp2 0013                         __size_of_resetCommunications 00A8  
                                        _ledSetAllOn 1EB6                                       __size_of_ultoa 00F6  
                                     strmatch@result 0022                  process_data_parameterize@parameters 0019  
                                       _receive_data 0FFC                                       ___wmul@product 0017  
                                           _LATBbits 000F8A                                             _LATCbits 000F8B  
                             __size_of_timerGetCount 0032                                           ?_delayMS10 0013  
                               __end_of_process_data 1DA0                                            _send_data 1550  
                             ??_com_command_setPower 003B                    process_data_parameters@parameters 00CA  
                                _meterEnergyUsedPart 0078                                             _RCONbits 000FD0  
                                   __CFG_WDTPS$32768 000000                                            _timerInit 182E  
                                           _SSP2CON3 000F69                                           ?_ledSetAll 0019  
                                         ?_ledToggle 0019                                           _ADCON0bits 000FC2  
                                  ___wmul@multiplier 0013                  command_builder_add_char@send_buffer 0013  
                                       ??_ledRunDown 0021                                    ledGoToggle@ledNum 0021  
                                  ledRun@ledRunDelay 0023                                    ___lmul@multiplier 0013  
                               __end_of_SPISlaveInit 1E4A             process_data@end_of_transmission_received 0132  
                                         ?_send_data 0015                                             __Hrparam 0000  
                             __size_of_ledTestToggle 000E                          mcpUpdatePower@timerHFout_ms 002C  
                                           __Lrparam 0000                                   __CFG_BOREN$SBORDIS 000000  
                                 __end_of_ledRunDown 1238                          command_builder3@send_buffer 002F  
                                  __CFG_P2BMX$PORTB5 000000                                           ?_timerInit 0001  
                        mcpUpdatePower@timerLFout_ms 0028                   __size_of_com_command_setEnergyUsed 004A  
                                   __size_of___awdiv 0084                     __end_of_send_end_of_transmission 1F58  
                                   __size_of___lldiv 0082                                     __size_of___llmod 0066  
                                   __size_of___lwdiv 0052                                     __size_of___lwmod 0042  
                   __end_of_command_builder_add_char 19B4                             __end_of_command_builder1 1A0E  
                           __end_of_command_builder3 0FFC                                        _timerGetCount 1D0A  
                                   __size_of_ledInit 000C                                     __size_of_commRun 0008  
                                   __size_of_mcpInit 0034                                     __size_of_initOSC 0018  
                                         strcmp2@inx 001C                         process_data_parameterize@inx 0020  
                                   __size_of_isdigit 001E                    mcpUpdatePower@meterEnergyUsedPart 0074  
                                    ___lwdiv@divisor 0015                                        _timerCount_ms 0060  
                                    ___lwdiv@counter 0017                                             __ptext10 1EB6  
                                           __ptext11 1F10                                             __ptext20 1AB6  
                                           __ptext12 10BC                                             __ptext21 1F58  
                                           __ptext13 117A                                             __ptext30 1B02  
                                           __ptext22 1F90                                             __ptext14 1D3C  
                                           __ptext31 1E4A                                             __ptext23 1F84  
                                           __ptext15 15E0                                             __ptext40 19B4  
                                           __ptext32 1B4E                                             __ptext24 1384  
                                           __ptext16 1F78                                             __ptext41 1B98  
                                           __ptext33 0FFC                                             __ptext25 1550  
                                           __ptext17 1ED4                                             __ptext50 1A64  
                                           __ptext42 0C60                                             __ptext34 1DFA  
                                           __ptext26 1E96                                             __ptext18 1C66  
                                           __ptext51 14BC                                             __ptext43 17C8  
                                           __ptext35 1D6E                                             __ptext27 1238  
                                           __ptext19 1F2A                                             __ptext52 1958  
                                           __ptext44 1664                                             __ptext36 0654  
                                           __ptext28 1F6A                                             __ptext53 0D56  
                                           __ptext45 0F3A                                             __ptext37 1DA0  
                                           __ptext29 16E6                                             __ptext54 1EF2  
                                           __ptext46 18F6                                             __ptext38 0B34  
                                           __ptext55 1A0E                                             __ptext47 1BE2  
                                           __ptext39 1F42                                             __ptext56 09B4  
                                           __ptext48 12E0                                             __ptext57 1E70  
                                           __ptext49 1C24                                             __ptext58 1E22  
                                           _commInit 1F84                                             _ledRunUp 10BC  
                                       _SSP2CON1bits 000F6C                                         _SSP2CON3bits 000F69  
                                           _mcpInitF 1892                                     __size_of_strcmp2 012C  
                                        _OSCCON2bits 000FD2                                        ?_xsum_builder 002B  
                                      __size_of_atol 00F4                                        __size_of_main 00F0  
                                      strmatch@match 0024                                        __size_of_itoa 0042  
                        powerCalculateWatts@timer_ms 0020                                        __size_of_utoa 00A4  
                                ledTestToggle@ledNum 0021                                          ??_delayMS10 0015  
                         ?_process_data_parameterize 0019                         __size_of_initInterruptsClear 004C  
                             _meterEnergyUsed_global 003D                                             int$flags 004D  
                          timerResetCount@timerIndex 0013                                             atol@sign 0027  
                                        ??_ledSetAll 001F                                          ??_ledToggle 001B  
                  __end_of_com_command_setEnergyUsed 1BE2                              __size_of_communications 009E  
                                           _strmatch 1DA0                                         _SSP2STATbits 000F6D  
                                     ?_timerGetCount 0013                              process_data@send_buffer 00D0  
                                        _OSCTUNEbits 000F9B                                           _INTCONbits 000FF2  
                                      _ledTestToggle 1F6A                                       _powerReduction 1422  
                                           itoa@base 0027                                             isdigit@c 0015  
                                          ultoa@base 0026                             ??_com_command_setVersion 003B  
                                     ??_xsum_builder 002F                                __size_of_process_data 0032  
                                           intlevel2 0000                               process_data@parameters 0100  
                                   ___lwmod@dividend 0013                                     ___lldiv@dividend 0013  
                      communications@no_more_to_send 00D2                                          ??_send_data 0017  
                                          strmatch@a 001E                                            strmatch@b 0020  
                                         _OSCCONbits 000FD3                    command_builder_add_string@xsumAdd 001D  
                                     ledSet@setValue 0015                                          ??_timerInit 0013  
                                _resetCommunications 1238                            __size_of_SPI_receive_data 0028  
                                           utoa@base 001E                                             ultoa@buf 0020  
                                      ?_ledSetAllOff 0001                                             ultoa@val 0022  
                                       ?_ledGoToggle 0021                                             strcmp2@a 0013  
                                           strcmp2@b 0015                                       ?_ledTestToggle 0021  
                             __end_of_powerReduction 14BC                                     ___lldiv@quotient 001B  
                                       _process_data 1D6E                                    _SPI_transmit_wait 004C  
                                    ___lwmod@divisor 0015                                __size_of_SPISlaveInit 0028  
                          communications@send_buffer 0084                                      ___lwmod@counter 0017  
                   __size_of_process_data_parameters 01CA                                    _meterWatts_global 007C  
                                  __CFG_T3CMX$PORTC0 000000                                 ?_resetCommunications 003B  
                                       ?_ledSetAllOn 0001                                         ledSet@ledNum 0013  
                  __size_of_send_end_of_transmission 0016                            ?_send_end_of_transmission 0035  
                        __end_of_powerCalculateWatts 17C8                                    __CFG_FOSC$INTIO67 000000  
                  __size_of_command_builder_add_char 005C                            ?_command_builder_add_char 0013  
                                xsum_builder@xsumBuf 00AE  
